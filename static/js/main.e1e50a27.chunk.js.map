{"version":3,"sources":["assets/svg/icons.svg","assets/svg/logo.svg","components/Intro.js","components/UserInput.js","lib/globalVariables.js","lib/handlers.js","components/UserForm.js","components/UserPanel.js","components/UserEdit.js","components/Sidebar.js","components/CreatorInput.js","components/Creator.js","components/EditableText.js","components/EditableTime.js","components/Spinners.js","components/TotalTime.js","components/CardButtons.js","components/StopAlert.js","components/TimeDisplay.js","components/Countdown.js","components/Progress.js","components/Controls.js","components/Finish.js","components/Timer.js","components/Card.js","components/CardPlaceholder.js","components/Board.js","components/Logo.js","lib/initialUsers.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Intro","props","handleShadowPostion","isIntroVisible","state","totalTime","timeInterval","elapsedTime","maxDistance","elapsedDistance","elapsedAngle","totalIntervals","distanceIncrement","angleIncrement","Math","pow","radians","PI","x","sin","y","cos","setState","prevState","xTranslation","yTranslation","onAppStateChange","isIntroFadingOut","clearInterval","intervalId","timeoutId","setTimeout","this","setInterval","clearTimeout","introClass","classNames","styleObject","transform","className","viewBox","id","width","height","fill","rx","ry","cx","cy","r","mask","style","Component","UserInput","inputId","inputName","parentName","value","label","isInputValid","isAlertVisible","alertText","isDisabled","isPreviewMode","onPreviewModeChange","onInputBlur","onInputChange","userInputClass","labelClass","inputClass","inputType","alertBoxClass","passedClass","previewClass","htmlFor","name","type","spellCheck","maxLength","disabled","onBlur","e","handleInputBlur","target","onChange","onClick","href","icons","cardFlipTime","animationStyle","animationDuration","validateTaskName","length","validateTaskTime","time","total","test","validateBreakTime","getCapitalized","string","charAt","toUpperCase","substring","getTotalTime","minutes","seconds","parseInt","makeTwoDigits","getTimeArray","floor","handleTimeChange","units","totalTaskTime","taskMinutes","totalTaskTimeArray","isTaskTimeValid","taskSeconds","totalBreakTime","breakMinutes","totalBreakTimeArray","isBreakTimeValid","breakSeconds","formatTimeResult","elapsedBreakTime","taskNameProgressStyle","getTotalDays","date","getDateString","Date","toISOString","slice","currentDate","currentDateStr","startDateStr","totalDays","limit","setDate","getDate","UserForm","componentDidMount","block","users","rememberedUser","Object","values","find","user","rememberMe","login","password","isLoginValid","isPasswordValid","handleCardToggle","onCardToggle","handleFormReset","handleAlert","input","getInputAlert","isEmpty","doesContainWhiteSpaces","isPasswordTooShort","doesLoginExist","map","handleLoginValidation","isInvalid","isLoginAlertVisible","handlePasswordValidation","isPasswordAlertVisible","isPasswordPreviewed","confirm","isConfirmValid","isConfirmAlertVisible","isConfirmPreviewMode","isConfirmDisabled","handleConfirmValidation","isConfirmPreviewed","handlePasswordPreview","handleRememberMe","isPasswordPreviewMode","handleFormSubmit","preventDefault","onUserLogin","isLoginPasswordCorrect","passwordAlertText","tasks","loginAlertText","confirmAlertText","isLoginForm","title","loginButtonName","loginButtonType","submitButtonType","onLoginButtonClick","undefined","onSignupButtonClick","checkboxClass","onSubmit","UserPanel","isLoginFormVisible","isSignupFormVisible","isUserPanelLoaded","userPanelClass","loginClass","signupClass","UserEdit","isEditMode","editedSetting","handleOldPasswordValidation","handleNewPasswordValidation","oldPassword","isOldPasswordValid","isOldPasswordAlertVisible","oldPasswordAlertText","isOldPasswordPreviewMode","newPassword","isNewPasswordValid","isNewPasswordAlertVisible","newPasswordAlertText","isNewPasswordPreviewMode","userEditClass","Fragment","Sidebar","handleStateChange","object","loggedUserId","userLogin","isOldPasswordPreviewed","isNewPasswordPreviewed","handleUserEdit","setting","onUserUpdate","onUserLogout","onUserRemove","handleInputsReset","isSidebarVisible","stats","userEditLabels","statsLabels","finishedTasks","avgTaskTime","avgBreakTime","avgTasksPerDay","dateCreated","statsLabelsKeys","keys","sidebarClass","editButtonsClass","confirmButtonsClass","button","index","buttonClass","tabIndexVal","key","tabIndex","isConfirmButtonDisabled","scope","CreatorInput","isVisible","isValid","modifier","placeholder","slideDirection","taskNameLength","onTaskNameChange","onMinutesChange","onSecondsChange","alertFlag","creatorInputClass","textInputClass","timeInputsClass","minutesInputClass","secondsInputClass","Creator","componentWillUnmount","timeoutOutroId","handleTaskName","creatorTaskName","isTaskNameValid","addNewTask","onBoardStateChange","onTaskEdit","newTask","taskName","creatorTaskMinutes","creatorTaskSeconds","creatorBreakMinutes","creatorBreakSeconds","creatorTotalTaskTime","creatorTotalBreakTime","creatorTaskTimeArray","creatorBreakTimeArray","now","isCreatorVisible","newTime","handleBackButton","isTaskTimeVisible","isBreakTimeVisible","isTaskNameVisible","handleNextButton","isCreatorValid","isCreatorRotatingOut","handleCreatorClose","isNextButtonVisible","creatorClass","backButtonClass","nextButtonClass","progressBarLoadedStyle","EditableText","output","isMaximized","onEditModeChange","editableTextClass","textClass","inputContainerClass","progressClass","EditableTime","unit","onTimeChange","timeClass","Spinners","handleValueChange","operation","newValue","lowerLimit","upperLimit","getNumFromRange","spinnersClass","TotalTime","labelName","isCardEditMode","onKeyPress","totalTimeClass","displayClass","onKeyDown","CardButtons","editModeActive","inputInvalid","cardRotatingMode","onAcceptButtonClick","onRemoveButtonClick","onTaskStateChange","onDrag","cardButtonsClass","acceptButtonClass","isPlaceholderVisible","onMouseDown","StopAlert","isStopAlertVisible","onStopCancel","onStopConfirm","stopAlertClass","containerClass","TimeDisplay","elapsedTimeArray","remainingTimeArray","isElapsedMode","elapsedTimeResult","join","remainingTimeResult","elapsedTimeClass","remainingTimeClass","Countdown","isCountdownVisible","totalBreaks","countdownClass","Progress","elapsedPercent","remainingPercent","elapsedPercentClass","remainingPercentClass","loadingClass","unloadingClass","roundedElapsedPercent","round","roundedRemainingPercent","loadingWidth","unloadingWidth","Controls","handlePlayPauseButton","isTaskTimeActive","isBreakTimeActive","onTimerStateChange","onCardStateChange","previousTime","onStopButtonClick","onDisplayModeChange","svgPlayClass","svgPauseClass","playPauseButtonClass","stopButtonClass","toggleButtonClass","Finish","isTaskFinished","onTaskRemove","onTimerRestart","elapsedBreakTimeArray","overallTime","overallTimeArray","breaksAmount","breakPercent","overallTimeResult","breakTimeResult","finishClass","Timer","handleRotatingStatus","isTaskRotatingIn","isTaskRotatingOut","handleTimerStop","isTimerStarted","isTimerMounted","handleTimeDisplayMode","handleAlertVisibility","handleTimeTick","elapsedTaskTime","onTaskFinish","remainingTime","totalTimeArray","startTime","isTimerVisible","isTaskTimeElapsedMode","isBreakTimeElapsedMode","isBreakFinished","elapsedTaskPercent","elapsedTaskTimeArray","elapsedBreakPercent","remainingTaskTime","remainingTaskPercent","remainingTaskTimeArray","remainingBreakTime","remainingBreakPercent","remainingBreakTimeArray","taskIntervalId","breakIntervalId","timerClass","Card","isTaskMounted","getHoveredCardSizes","cardIndex","cardsSizes","handleCardsSizes","appNodes","card","current","parentNode","children","filter","node","classList","contains","offsetHeight","offsetLeft","offsetTop","offsetWidth","left","top","handleCardDrag","handleMouseDown","clientX","clientY","window","addEventListener","handleMouseMove","handleMouseUp","originalX","scrollX","originalY","scrollY","xPosition","yPosition","draggedCardSizes","hoveredCardIndex","findIndex","hoveredCardSizes","translateX","translateY","isDragging","hoveredOffsetX","hoveredOffsetY","isDraggingMode","draggedCardIndex","removeEventListener","onTaskOrderChange","offsetX","offsetY","draggedOffsetX","draggedOffsetY","handleKeyPress","isTaskNameEditMode","isTaskTimeEditMode","isBreakTimeEditMode","acceptEditChange","handleMaximizeCard","handleTaskNameChange","handleEditMode","task","handleTaskRemove","handleStartButton","React","createRef","transitionTime","taskNameDisabled","taskTimeDisabled","breakTimeDisabled","cardStyle","cardClass","taskClass","startButtonClass","ref","CardPlaceholder","placeholderIndex","placeholderStyle","placeholderClass","Board","handleWindowResize","handleSidebar","handleSidebarQuit","handleNewTaskButton","boardClass","newTaskButtonClass","creatorContainerClass","boardLogoClass","Logo","App","localStorage","getItem","taskTimerUsers","JSON","parse","isAppLoaded","initialUsers","day","month","year","hr","min","userId","getTime","console","log","taskMin","taskSec","breakMin","breakSec","formattedAvgTaskTime","formattedAvgBreakTime","createdAt","exportUsers","componentDidUpdate","setItem","stringify","handleUserLogin","form","entries","isUserPanelVisible","isBoardVisible","handleUserLogout","handleUserRemove","handleTaskOrder","dragIndex","dropIndex","updatedTasks","splice","handleUserUpdate","prop","handleTaskFinish","results","updatedFinishedTasks","updatedTotalTaskTime","updatedTotalBreakTime","handleTaskEdit","option","editedIndex","indexOf","idx","StrictMode","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,mC,uBCA3CD,EAAOC,QAAU,IAA0B,kC,moBCkJ5BC,G,kBA7Ib,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAwBRC,oBAAsB,WACpB,GAAI,EAAKD,MAAME,eAAgB,CAAC,IAAD,EAQzB,EAAKC,MANPC,EAF2B,EAE3BA,UACAC,EAH2B,EAG3BA,aACAC,EAJ2B,EAI3BA,YACAC,EAL2B,EAK3BA,YACAC,EAN2B,EAM3BA,gBACAC,EAP2B,EAO3BA,aAGIC,EAAiBN,EAAYC,EAC7BM,EAAoBJ,EAAcG,EAGlCE,EAAiB,IAAMF,GAFd,EACUG,KAAKC,IADf,EACgCR,EAAcF,EAAnB,IAGpCW,EAAUN,GAAgBI,KAAKG,GAAK,KACpCC,EAAIJ,KAAKK,IAAIH,GAAYP,EACzBW,EAAIN,KAAKO,IAAIL,GAAYP,EAU/B,GARA,EAAKa,UAAS,SAAAC,GAAS,MAAK,CAC1BhB,YAAaA,EAAcD,EAC3BG,gBAAiBc,EAAUd,gBAAkBG,EAC7CF,aAAca,EAAUb,aAAeG,EACvCW,aAAcN,EACdO,aAAcL,MAGX,EAAKhB,MAAMG,aAAe,EAAKH,MAAMC,UAAY,CAAC,IAC7CqB,EAAqB,EAAKzB,MAA1ByB,iBAER,EAAKJ,SAAS,CAAEK,kBAAkB,IAClCC,cAAc,EAAKC,YACnB,EAAKC,UAAYC,YAAW,WAC1BL,EAAiB,CAAEvB,gBAAgB,MAClC,QA3DP,EAAKC,MAAQ,CACXC,UAAW,IACXC,aAAc,GACdE,YAAa,EACbC,gBAAiB,EACjBC,aAAc,IACdH,YAAa,EACbiB,aAAc,EACdC,aAAc,EACdE,kBAAkB,GAXH,E,iFAeE,IACXrB,EAAiB0B,KAAK5B,MAAtBE,aACR0B,KAAKH,WAAaI,YAAYD,KAAK9B,oBAAqBI,K,6CAIxDsB,cAAcI,KAAKH,YACnBK,aAAaF,KAAKF,a,+BA4CV,IAAD,EACkDE,KAAK5B,MAAtDuB,EADD,EACCA,iBAAkBH,EADnB,EACmBA,aAAcC,EADjC,EACiCA,aAElCU,EAAaC,IAAW,QAAS,CACrC,kBAAmBT,IAGfU,EAAc,CAClBC,UAAU,uBAAD,OACKd,EADL,cACuBC,EADvB,wCAMX,OACE,yBAAKc,UAAWJ,GACd,yBAAKI,UAAU,OAAOC,QAAQ,eAE5B,0BAAMC,GAAG,OAAOF,UAAU,cACxB,0BAAMG,MAAM,MAAMC,OAAO,MAAMC,KAAK,SACpC,0BACE1B,EAAE,MACFE,EAAE,KACFsB,MAAM,MACNC,OAAO,KACPE,GAAG,OACHC,GAAG,OACHF,KAAK,SAEP,4BAAQG,GAAG,MAAMC,GAAG,MAAMC,EAAE,MAAML,KAAK,SACvC,4BAAQG,GAAG,MAAMC,GAAG,MAAMC,EAAE,MAAML,KAAK,SACvC,0BACE1B,EAAE,QACFE,EAAE,QACFsB,MAAM,KACNC,OAAO,MACPE,GAAG,OACHC,GAAG,OACHF,KAAK,OACLL,UAAU,qBAId,0BAAMG,MAAM,MAAMC,OAAO,MAAMJ,UAAU,qBACzC,0BACErB,EAAE,MACFE,EAAE,KACFsB,MAAM,MACNC,OAAO,KACPJ,UAAU,mCAEZ,4BACEQ,GAAG,MACHC,GAAG,MACHC,EAAE,MACFV,UAAU,sCAEZ,0BACEG,MAAM,MACNC,OAAO,MACPJ,UAAU,eACVW,KAAK,aACLC,MAAOd,IAET,0BACEK,MAAM,MACNC,OAAO,MACPJ,UAAU,mBACVW,KAAK,qB,GAvIGE,c,gBC2HLC,G,MA1HG,SAACpD,GAAW,IAG1BqD,EAaErD,EAbFqD,QACAC,EAYEtD,EAZFsD,UACAC,EAWEvD,EAXFuD,WACAC,EAUExD,EAVFwD,MACAC,EASEzD,EATFyD,MACAC,EAQE1D,EARF0D,aACAC,EAOE3D,EAPF2D,eACAC,EAME5D,EANF4D,UACAC,EAKE7D,EALF6D,WACAC,EAIE9D,EAJF8D,cACAC,EAGE/D,EAHF+D,oBACAC,EAEEhE,EAFFgE,YACAC,EACEjE,EADFiE,cASIC,EAAc,qCACKX,EADL,uBAC8BD,EAD9B,QAIda,EAAahC,IACjB,mBAD2B,4BAENoB,GAAc,CACnC,6BAA8BM,IAG1BO,EAAajC,IACjB,mBAD2B,4BAENoB,GAAc,CACnC,6BAA8BM,IAG1BQ,EAA0B,UAAdf,EAChB,OACAQ,EAAgB,OAAS,WAErBQ,EAAgBnC,IACpB,sBAD8B,+BAENoB,GAAc,CACtC,+BAAgCI,IAG5BY,EAAcpC,IAClB,cAD4B,uBAEZoB,GAAc,CAC9B,uBAAwBG,IAGpBc,EAAerC,IACnB,kBAD6B,2BAEToB,GAAc,CAClC,0BAA2BO,EAC3B,4BAA6BD,IAK/B,OACE,yBAAKvB,UAAW4B,GAEd,2BAAOO,QAASpB,EAASf,UAAW6B,GACjCV,GAIH,2BACEjB,GAAIa,EACJqB,KAAMrB,EACNG,MAAOA,EACPmB,KAAMN,EACN/B,UAAW8B,EACXQ,WAAW,QACXC,UAAU,KACVC,SAAUjB,EACVkB,OAAQ,SAACC,GAAD,OAhEU,SAACxB,GAClBE,GAAcM,EAAYR,EAAOF,GA+DnB2B,CAAgBD,EAAEE,OAAO1B,QACxC2B,SAAU,SAACH,GAAD,OAAOf,EAAce,EAAEE,OAAO1B,UAI1C,yBAAKlB,UAAWgC,GACd,uBAAGhC,UAAU,oBAAoBsB,IAInC,yBAAKtB,UAAU,oBAGC,UAAdgB,EACE,yBAAKhB,UAAU,UACf,4BACEqC,KAAK,SACLrC,UAAWkC,EACXY,QAAS,kBAAMrB,EAAoBT,KAEnC,yBAAKhB,UAAU,uBAAuBC,QAAQ,eAC5C,yBAAK8C,KAAI,UAAKC,IAAL,gBAMC,cAAf/B,GAA4C,aAAdD,GACf,aAAfC,GAA2C,gBAAdD,EAC5B,yBAAKhB,UAAU,UACf,yBAAKA,UAAWiC,GACd,yBAAKjC,UAAU,mBAAmBC,QAAQ,eACxC,yBAAK8C,KAAI,UAAKC,IAAL,mBCvHVC,EAAe,IAGfC,EAAiB,CAC5BC,kBAAkB,GAAD,OAAKF,EAAL,OCFNG,EAAmB,SAAChB,GAAD,OAAUA,EAAKiB,OAAS,GAC3CC,EAAmB,SAACC,EAAMC,GAAP,MAAiB,QAAQC,KAAKF,IAASC,EAAQ,GAClEE,EAAoB,SAACH,GAAD,MAAU,QAAQE,KAAKF,IAE3CI,EAAiB,SAACC,GAC7B,OAAOA,EAAOC,OAAO,GAAGC,cAAgBF,EAAOG,UAAU,IAGrDC,EAAe,SAACC,EAASC,GAG7B,OAAkB,KAFlBD,EAAWA,EAAcE,SAASF,GAAb,GAEiB,KADtCC,EAAWA,EAAcC,SAASD,GAAb,IAIVE,EAAgB,SAAClD,GAAD,OAAWA,EAAQ,GAAR,WAAiBA,GAAjB,UAA8BA,IAczDmD,EAAe,SAACd,GAC3B,MAAO,CACLa,EAAc7F,KAAK+F,MAAMf,EAAO,MAChCa,EAAc7F,KAAK+F,MAAMf,EAAO,IAAO,KACvCa,EAAc7F,KAAK+F,MAAMf,EAAO,GAAK,QAI5BgB,EAAmB,SAACN,EAASC,EAASM,EAAOnC,GAExD,GAAa,SAATA,EAAiB,CACnB,IAAMoC,EAAgBT,EAAaC,EAASC,GAC5C,GAAc,YAAVM,EACF,MAAO,CACLE,YAAaT,EACbQ,gBACAE,mBAAoBN,EAAaI,GACjCG,gBAAiBtB,EAAiBW,EAASQ,IAExC,GAAc,YAAVD,EACT,MAAO,CACLK,YAAaX,EACbO,gBACAE,mBAAoBN,EAAaI,GACjCG,gBAAiBtB,EAAiBY,EAASO,SAG1C,GAAa,UAATpC,EAAkB,CAC3B,IAAMyC,EAAiBd,EAAaC,EAASC,GAC7C,GAAc,YAAVM,EACF,MAAO,CACLO,aAAcd,EACda,iBACAE,oBAAqBX,EAAaS,GAClCG,iBAAkBvB,EAAkBO,IAEjC,GAAc,YAAVO,EACT,MAAO,CACLU,aAAchB,EACdY,iBACAE,oBAAqBX,EAAaS,GAClCG,iBAAkBvB,EAAkBQ,MAM/BiB,EAAmB,SAAC,EAAoBC,GAAsB,IAAD,mBAAxCnB,EAAwC,KAA/BC,EAA+B,KAGxE,OAFAD,EAAUE,SAASF,GACnBC,EAAUC,SAASD,GACb,SAAN,OACKD,EAAU,EAAV,WACGA,EADH,YACmC,IAAZA,EAAA,WACpBA,EADoB,WACD,GAH3B,iBAIKA,EAAU,IAAMmB,EAAwC,IAArBA,EAAqC,IAAZlB,GAC7D,MAAQ,GALZ,iBAMKA,EAAU,EAAV,WACGA,EADH,YACmC,IAAZA,EAAA,WACpBA,EADoB,WACDkB,GAAyC,IAArBA,EAC3C,kBAAoB,GATxB,SAaWC,EAAwB,SAAChC,GACpC,MAAO,CAAElD,MAAM,GAAD,OAAKkD,ED7FY,GC6FiB,IAAlC,OAOHiC,EAAe,SAACC,GAU3B,IARA,IAAMC,EAAgB,SAACD,GAAD,OAAU,IAAIE,KAAKF,GAAMG,cAAcC,MAAM,EAAE,KAE/DC,EAAc,IAAIH,KACpBI,EAAiBL,EAAcI,GAC7BE,EAAeN,EAAcD,GAC/BQ,EAAY,EACZC,EAAQ,IAELF,IAAiBD,GAAkBG,EAAQ,GAChDJ,EAAYK,QAAQL,EAAYM,UAAY,GAC5CL,EAAiBL,EAAc,IAAIC,KAAKG,IACxCG,IACAC,IAEF,OAAOD,GC2PMI,G,kBAxWb,WAAYzI,GAAQ,IAAD,8BACjB,4CAAMA,KAwBR0I,kBAAoB,WAAO,IAAD,EACC,EAAK1I,MAAtB2I,EADgB,EAChBA,MAAOC,EADS,EACTA,MACTC,EAAiBC,OAAOC,OAAOH,GAAOI,MAAK,SAAAC,GAAI,OAAIA,EAAKC,cAE9D,GAAc,cAAVP,GACEE,EAAgB,CAAC,IAEXM,EAAoBN,EAApBM,MAAOC,EAAaP,EAAbO,SAEf,EAAK/H,SAAS,CACZ8H,QACAE,cAAc,EACdD,WACAE,iBAAiB,EACjBJ,YAAY,MAvCD,EA6CnBK,iBAAmB,YAEjBC,EADyB,EAAKxJ,MAAtBwJ,gBAER,EAAKC,mBAhDY,EAmDnBC,YAAc,SAAClG,EAAOmG,GAAW,IAAD,EACxBrG,EAAY2C,EAAe0D,GAC3B/F,EAAY,EAAKgG,cAAcpG,EAAOmG,GAE5C,EAAKtI,UAAL,+BACQiC,EADR,iBACkC,GADlC,wBAEMqG,EAFN,aAEyB/F,GAFzB,KAvDiB,EA6DnBgG,cAAgB,SAACpG,EAAOmG,GAAW,IAEzBP,EAAa,EAAKjJ,MAAlBiJ,SACFS,EAAoB,KAAVrG,EACVsG,EAAyB,MAAM/D,KAAKvC,GACpCuG,EAAqBvG,EAAMmC,OAAS,EAE1C,OAAQgE,GAEN,IAAK,QAAL,MAE2B,EAAK3J,MAAtB2I,EAFV,EAEUA,MAAOC,EAFjB,EAEiBA,MAEToB,EAAiBlB,OAAOC,OAAOH,GACpCqB,KAAI,SAAAhB,GAAI,OAAIA,EAAKE,SACjBH,MAAK,SAAAG,GAAK,OAAIA,IAAU3F,KAMzB,OAAOqG,EACL,0BALiC,cAAVlB,IAA0BqB,EAMjD,uCALqC,eAAVrB,GAAoC,aAAVA,IACpDqB,IAKD,4CAEJ,IAAK,WAEH,OAAOH,EACL,6BAA+BC,EAC/B,uCAAuCC,GACvC,6CAGJ,IAAK,UAGH,OAAOF,EACL,iCAHuBT,IAAa5F,IAIpC,0BAEJ,QAAS,OAAO,IAtGD,EA0GnB0G,sBAAwB,SAAC1G,GACvB,IAAM2G,IAAY,EAAKP,cAAcpG,EAAO,SAE5C,EAAKnC,SAAS,CACZ8H,MAAO3F,EACP6F,cAAec,EACfC,qBAAqB,KAhHN,EAoHnBC,yBAA2B,SAAC7G,GAC1B,IAAM2G,IAAY,EAAKP,cAAcpG,EAAO,YAE5C,EAAKnC,SAAS,CACZ+H,SAAU5F,EACV8F,iBAAkBa,EAClBG,wBAAwB,EACxBC,qBAAqB,EAErBC,QAAS,GACTC,gBAAgB,EAChBC,uBAAuB,EACvBC,sBAAsB,EACtBC,kBAAmBT,KAjIJ,EAqInBU,wBAA0B,SAACrH,GACzB,IAAM2G,IAAY,EAAKP,cAAcpG,EAAO,WAE5C,EAAKnC,SAAS,CACZmJ,QAAShH,EACTiH,gBAAiBN,EACjBO,uBAAuB,EACvBI,oBAAoB,KA5IL,EAgJnBC,sBAAwB,SAACpB,GACvB,IAAMrG,EAAY2C,EAAe0D,GAEjC,EAAKtI,UAAS,SAAAC,GAAS,kCACfgC,EADe,gBACWhC,EAAU,KAAD,OAAMgC,EAAN,qBApJ1B,EAwJnB0H,iBAAmB,WACjB,EAAK3J,UAAS,SAAAC,GAAS,MAAK,CAAE4H,YAAa5H,EAAU4H,gBAzJpC,EA4JnBO,gBAAkB,WAChB,EAAKpI,SAAS,CACZ6H,YAAY,EACZC,MAAO,GACPE,cAAc,EACde,qBAAqB,EACrBhB,SAAU,GACVE,iBAAiB,EACjBgB,wBAAwB,EACxBW,uBAAuB,EACvBT,QAAS,GACTC,gBAAgB,EAChBC,uBAAuB,EACvBC,sBAAsB,EACtBC,mBAAmB,KA1KJ,EA8KnBM,iBAAmB,SAAClG,GAClBA,EAAEmG,iBADsB,MAEc,EAAKnL,MAAnC2I,EAFgB,EAEhBA,MAAOC,EAFS,EAETA,MAAOwC,EAFE,EAEFA,YAFE,EAUpB,EAAKjL,MANPgJ,EAJsB,EAItBA,MACAC,EALsB,EAKtBA,SACAC,EANsB,EAMtBA,aACAC,EAPsB,EAOtBA,gBACAmB,EARsB,EAQtBA,eACAvB,EATsB,EAStBA,WAGID,EAAOH,OAAOC,OAAOH,GAAOI,MAAK,SAAAC,GAAI,OAAIA,EAAKE,QAAUA,KAExDkC,EAAmC,cAAV1C,GAC5BU,GACAJ,EAAKG,WAAaA,EAErB,GAAc,cAAVT,EAEE0C,GACFpC,EAAKC,WAAaA,EAClBkC,EAAYnC,EAAMN,GAClB,EAAKc,mBAGL,EAAKpI,SAAS,CACZ+H,SAAU,GACVE,iBAAiB,EACjBgB,wBAAwB,EACxBgB,kBAAmB,qBACnBL,uBAAuB,SAItB,GAAc,eAAVtC,EAAwB,CAEjC,KAAIU,GAAgBC,GAAmBmB,GAWhC,OAHLW,EAPgB,CACdjC,QACAC,WACAF,aACAqC,MAAO,IAGY5C,GACrB,EAAKc,oBA1NT,EAAKtJ,MAAQ,CACX+I,YAAY,EAEZC,MAAO,GACPE,cAAc,EACde,qBAAqB,EACrBoB,eAAgB,0BAEhBpC,SAAU,GACVE,iBAAiB,EACjBgB,wBAAwB,EACxBgB,kBAAmB,6BACnBL,uBAAuB,EAEvBT,QAAS,GACTC,gBAAgB,EAChBC,uBAAuB,EACvBe,iBAAkB,+BAClBd,sBAAsB,EACtBC,mBAAmB,GArBJ,E,sEAkOT,IAAD,EAEsB7I,KAAK/B,MAA1BsC,EAFD,EAECA,UAAWqG,EAFZ,EAEYA,MAFZ,EAqBH5G,KAAK5B,MAhBP+I,EALK,EAKLA,WACAC,EANK,EAMLA,MACAE,EAPK,EAOLA,aACAe,EARK,EAQLA,oBACAoB,EATK,EASLA,eACApC,EAVK,EAULA,SACAE,EAXK,EAWLA,gBACAgB,EAZK,EAYLA,uBACAgB,EAbK,EAaLA,kBACAL,EAdK,EAcLA,sBACAT,EAfK,EAeLA,QACAC,EAhBK,EAgBLA,eACAC,EAjBK,EAiBLA,sBACAe,EAlBK,EAkBLA,iBACAd,EAnBK,EAmBLA,qBACAC,EApBK,EAoBLA,kBAGIc,EAAwB,cAAV/C,EACdgD,EAAQD,EAAc,SAAW,UACjCE,EAAkBF,EAAc,SAAW,SAC3CG,EAAkBH,EAAc,SAAW,SAC3CI,EAAmBJ,EAAc,SAAW,SAC5CK,EAAqBL,OAAcM,EAAYjK,KAAKwH,iBACpD0C,EAAsBP,EAAc3J,KAAKwH,sBAAmByC,EAE5DE,EAAgB/J,IAAW,qBAAD,8BACTwG,GAAS,CAC9B,8BAA+BO,IAGjC,OACE,0BAAM5G,UAAWA,EAAW6J,SAAUpK,KAAKmJ,kBACzC,wBAAI5I,UAAS,UAAKqG,EAAL,cAAwBgD,GAGrC,kBAAC,EAAD,CACEtI,QAAO,UAAKsF,EAAL,SACPrF,UAAU,QACVC,WAAYoF,EACZnF,MAAO2F,EACP1F,MAAM,SACNC,aAAc2F,EACd1F,eAAgByG,EAChBxG,UAAW4H,EACXxH,YAAajC,KAAK2H,YAClBzF,cAAelC,KAAKmI,wBAItB,kBAAC,EAAD,CACE7G,QAAO,UAAKsF,EAAL,YACPrF,UAAU,WACVC,WAAYoF,EACZnF,MAAO4F,EACP3F,MAAM,YACNC,aAAc4F,EACd3F,eAAgB2G,EAChB1G,UAAW0H,EACXxH,cAAemH,EACflH,oBAAqBhC,KAAKgJ,sBAC1B/G,YAAajC,KAAK2H,YAClBzF,cAAelC,KAAKsI,2BAItBqB,EACE,yBAAKpJ,UAAU,UACf,kBAAC,EAAD,CACEe,QAAO,UAAKsF,EAAL,WACPrF,UAAU,UACVC,WAAYoF,EACZnF,MAAOgH,EACP/G,MAAM,WACNC,aAAc+G,EACd9G,eAAgB+G,EAChB9G,UAAW6H,EACX5H,WAAY+G,EACZ9G,cAAe6G,EACf5G,oBAAqBhC,KAAKgJ,sBAC1B/G,YAAajC,KAAK2H,YAClBzF,cAAelC,KAAK8I,0BAKxB,yBAAKvI,UAAU,YACb,yBACEA,UAAS,2CAAsCqG,GAC/CvD,QAASrD,KAAKiJ,kBAEd,yBAAK1I,UAAW4J,GACd,yBAAK7G,KAAI,UAAKC,IAAL,cAGb,2BACE9C,GAAE,UAAKmG,EAAL,YACFjE,KAAI,UAAKiE,EAAL,YACJrG,UAAS,2CAAsCqG,GAC/ChE,KAAK,aAEP,2BACEF,QAAO,UAAKkE,EAAL,YACPrG,UAAS,2CAAsCqG,GAC/CvD,QAASrD,KAAKiJ,kBAHhB,gBAUF,4BACE1I,UAAS,UAAKqG,EAAL,oBAAsBA,EAAtB,mBACTvD,QAAS2G,EACTpH,KAAMkH,GAELD,GAEH,4BACEtJ,UAAS,UAAKqG,EAAL,oBAAsBA,EAAtB,oBACTvD,QAAS6G,EACTtH,KAAMmH,GAHR,gB,GA9Ve3I,cC0ERiJ,G,kBA3Eb,WAAYpM,GAAQ,IAAD,8BACjB,4CAAMA,KAeRuJ,iBAAmB,WACjB,EAAKlI,UAAS,SAAAC,GAAS,MAAK,CAC1B+K,oBAAqB/K,EAAU+K,mBAC/BC,qBAAsBhL,EAAUgL,yBAjBlC,EAAKnM,MAAQ,CACXoM,mBAAmB,EACnBF,oBAAoB,EACpBC,qBAAqB,GALN,E,iFAUjBvK,KAAKV,SAAS,CACZkL,mBAAmB,EACnBF,oBAAoB,M,+BAWd,IAAD,EAIHtK,KAAK/B,MAFPoL,EAFK,EAELA,YACAxC,EAHK,EAGLA,MAHK,EASH7G,KAAK5B,MAHPoM,EANK,EAMLA,kBACAF,EAPK,EAOLA,mBACAC,EARK,EAQLA,oBAGIE,EAAiBrK,IAAW,YAAa,CAC7C,qBAAsBoK,IAGlBE,EAAatK,IAAW,YAAa,CACzC,sBAAuBkK,EACvB,wBAAyBA,IAGrBK,EAAcvK,IAAW,aAAc,CAC3C,uBAAwBmK,EACxB,yBAA0BA,IAG5B,OACE,yBAAKhK,UAAWkK,GACd,uBAAGlK,UAAU,mBAAb,OACM,0BAAMA,UAAU,0BAAhB,UAEN,yBAAKA,UAAU,wBAEb,kBAAC,EAAD,CACEA,UAAWmK,EACX9D,MAAM,YACNyC,YAAaA,EACbxC,MAAOA,EACPY,aAAczH,KAAKwH,mBAGrB,kBAAC,EAAD,CACEjH,UAAWoK,EACX/D,MAAM,aACNyC,YAAaA,EACbxC,MAAOA,EACPY,aAAczH,KAAKwH,yB,GArEPpG,cCoITwJ,G,MApIE,SAAC3M,GAAW,IAGzBuD,EAgCEvD,EAhCFuD,WACAqJ,EA+BE5M,EA/BF4M,WACAC,EA8BE7M,EA9BF6M,cACA9I,EA6BE/D,EA7BF+D,oBACAC,EA4BEhE,EA5BFgE,YACAkG,EA2BElK,EA3BFkK,sBACA4C,EA0BE9M,EA1BF8M,4BACAC,EAyBE/M,EAzBF+M,4BACAlC,EAwBE7K,EAxBF6K,wBAXwB,EAmCtB7K,EAtBFG,MACEgJ,EAdsB,EActBA,MACAE,EAfsB,EAetBA,aACAe,EAhBsB,EAgBtBA,oBACAoB,EAjBsB,EAiBtBA,eACAwB,EAlBsB,EAkBtBA,YACAC,EAnBsB,EAmBtBA,mBACAC,EApBsB,EAoBtBA,0BACAC,EArBsB,EAqBtBA,qBACAC,EAtBsB,EAsBtBA,yBACAC,EAvBsB,EAuBtBA,YACAC,EAxBsB,EAwBtBA,mBACAC,EAzBsB,EAyBtBA,0BACAC,EA1BsB,EA0BtBA,qBACAC,EA3BsB,EA2BtBA,yBACAjD,EA5BsB,EA4BtBA,QACAC,EA7BsB,EA6BtBA,eACAC,EA9BsB,EA8BtBA,sBACAe,EA/BsB,EA+BtBA,iBACAd,EAhCsB,EAgCtBA,qBACAC,EAjCsB,EAiCtBA,kBAIE8C,EAAgBvL,IAAW,WAAD,aAC9B,oBAAqByK,GADS,oBAEhBC,GAAkBD,IAGlC,OACE,kBAAC,IAAMe,SAAP,KAEoB,UAAlBd,EAEA,yBAAKvK,UAAWoL,GACd,kBAAC,EAAD,CACErK,QAAO,UAAKE,EAAL,SACPD,UAAU,QACVC,WAAYA,EACZC,MAAO2F,EACP1F,MAAM,aACNC,aAAc2F,EACd1F,eAAgByG,EAChBxG,UAAW4H,EACXxH,YAAaA,EACbC,cAAeiG,KAIC,aAAlB2C,EAEF,yBAAKvK,UAAWoL,GAEd,kBAAC,EAAD,CACErK,QAAO,UAAKE,EAAL,eACPD,UAAU,cACVC,WAAYA,EACZC,MAAOwJ,EACPvJ,MAAM,gBACNC,aAAcuJ,EACdtJ,eAAgBuJ,EAChBtJ,UAAWuJ,EACXrJ,cAAesJ,EACfrJ,oBAAqBA,EACrBC,YAAaA,EACbC,cAAe6I,IAGjB,kBAAC,EAAD,CACEzJ,QAAO,UAAKE,EAAL,eACPD,UAAU,cACVC,WAAYA,EACZC,MAAO6J,EACP5J,MAAM,gBACNC,aAAc4J,EACd3J,eAAgB4J,EAChB3J,UAAW4J,EACX1J,cAAe2J,EACf1J,oBAAqBA,EACrBC,YAAaA,EACbC,cAAe8I,IAGjB,kBAAC,EAAD,CACE1J,QAAO,UAAKE,EAAL,WACPD,UAAU,UACVC,WAAYA,EACZC,MAAOgH,EACP/G,MAAM,WACNC,aAAc+G,EACd9G,eAAgB+G,EAChB9G,UAAW6H,EACX5H,WAAY+G,EACZ9G,cAAe6G,EACf5G,oBAAqBA,EACrBC,YAAaA,EACbC,cAAe4G,KAIC,WAAlBgC,EAEF,yBAAKvK,UAAWoL,GACd,uBAAGpL,UAAU,kBAAb,aAOF,yBAAKA,UAAWoL,GACd,uBAAGpL,UAAU,kBAAb,oBC4ROsL,G,kBArZb,WAAY5N,GAAQ,IAAD,8BACjB,4CAAMA,KA+BR6N,kBAAoB,SAACC,GAAD,OAAY,EAAKzM,SAASyM,IAhC3B,EAkCnBpE,YAAc,SAAClG,EAAOmG,GAAW,IAAD,EACxBrG,EAAY2C,EAAe0D,GAC3B/F,EAAY,EAAKgG,cAAcpG,EAAOmG,GAE5C,EAAKtI,UAAL,+BACQiC,EADR,iBACkC,GADlC,wBAEMqG,EAFN,aAEyB/F,GAFzB,KAtCiB,EA4CnBgG,cAAgB,SAACpG,EAAOmG,GAAW,IAEzB0D,EAAgB,EAAKlN,MAArBkN,YACFxD,EAAoB,KAAVrG,EACVsG,EAAyB,MAAM/D,KAAKvC,GACpCuG,EAAqBvG,EAAMmC,OAAS,EAE1C,OAAQgE,GAEN,IAAK,QAAL,MAEyC,EAAK3J,MAApC2I,EAFV,EAEUA,MAAOC,EAFjB,EAEiBA,MACPO,EAAUP,EAHpB,EAEwBmF,cACd5E,MAEFa,EAAiBlB,OAAOC,OAAOH,GACpCqB,KAAI,SAAAhB,GAAI,OAAIA,EAAKE,SACjBH,MAAK,SAAAgF,GAAS,OAAIA,IAAcxK,GAASwK,IAAc7E,KAMxD,OAAOU,EACL,0BALiC,cAAVlB,IAA0BqB,EAMjD,uCALqC,eAAVrB,GAAoC,aAAVA,IACpDqB,IAKD,4CAEJ,IAAK,WACL,IAAK,cACL,IAAK,cAEH,OAAOH,EACL,6BAA+BC,EAC/B,uCAAuCC,GACvC,6CAEJ,IAAK,UAGH,OAAOF,EACL,iCAHuBwD,IAAgB7J,IAIvC,0BAEJ,QAAS,OAAO,IAvFD,EA2FnB0G,sBAAwB,SAAC1G,GACvB,IAAM2G,IAAY,EAAKP,cAAcpG,EAAO,SAE5C,EAAKnC,SAAS,CACZ8H,MAAO3F,EACP6F,cAAec,EACfC,qBAAqB,KAjGN,EAqGnB0C,4BAA8B,SAACtJ,GAC7B,IAAM2G,IAAY,EAAKP,cAAcpG,EAAO,YAE5C,EAAKnC,SAAS,CACZ2L,YAAaxJ,EACbyJ,oBAAqB9C,EACrB+C,2BAA2B,EAC3Be,wBAAwB,KA5GT,EAgHnBlB,4BAA8B,SAACvJ,GAC7B,IAAM2G,IAAY,EAAKP,cAAcpG,EAAO,YAE5C,EAAKnC,SAAS,CACZgM,YAAa7J,EACb8J,oBAAqBnD,EACrBoD,2BAA2B,EAC3BW,wBAAwB,EAExB1D,QAAS,GACTC,gBAAgB,EAChBC,uBAAuB,EACvBC,sBAAsB,EACtBC,kBAAmBT,KA7HJ,EAiInBU,wBAA0B,SAACrH,GACzB,IAAM2G,IAAY,EAAKP,cAAcpG,EAAO,WAE5C,EAAKnC,SAAS,CACZmJ,QAAShH,EACTiH,gBAAiBN,EACjBO,uBAAuB,EACvBI,oBAAoB,KAxIL,EA4InBC,sBAAwB,SAACpB,GACvB,IAAMrG,EAAY2C,EAAe0D,GAEjC,EAAKtI,UAAS,SAAAC,GAAS,kCACfgC,EADe,gBACWhC,EAAU,KAAD,OAAMgC,EAAN,qBAhJ1B,EAoJnB6K,eAAiB,SAACC,GAAa,IAAD,EAOxB,EAAKpO,MALPqO,EAF0B,EAE1BA,aACAC,EAH0B,EAG1BA,aACAC,EAJ0B,EAI1BA,aACA3F,EAL0B,EAK1BA,MACAmF,EAN0B,EAM1BA,aAN0B,EAS+B,EAAK5N,MAAxD0M,EAToB,EASpBA,cAAe1D,EATK,EASLA,MAAO6D,EATF,EASEA,YAAaK,EATf,EASeA,YACrCpE,EAAOL,EAAMmF,GAEnB,GAAgB,YAAZK,EAEF,OAAQvB,GAEN,IAAK,QACHwB,EAAalF,EAAO,SACpB,EAAK9H,SAAS,CAAEuL,YAAY,IAC9B,MAEA,IAAK,WACCI,IAAgB/D,EAAKG,UACvB,EAAKoF,oBACL,EAAKnN,SAAS,CACZ6L,2BAA2B,EAC3BC,qBAAsB,yBAIxBkB,EAAahB,EAAa,YAC1B,EAAKhM,SAAS,CAAEuL,YAAY,IAC5B,EAAK4B,qBAET,MAEA,IAAK,SAAUF,IAAgB,MAC/B,IAAK,SAAUC,QAII,WAAZH,GACT,EAAK/M,SAAS,CAAEuL,YAAY,IAC5B,EAAK4B,qBAGL,EAAKnN,SAAS,CAAEuL,YAAY,EAAMC,cAAeuB,KAlMlC,EAsMnBI,kBAAoB,WAClB,EAAKnN,SAAS,CACZ8H,MAAO,GACPE,cAAc,EACde,qBAAqB,EACrBoB,eAAgB,0BAChBwB,YAAa,GACbC,oBAAoB,EACpBC,2BAA2B,EAC3BC,qBAAsB,iCACtBC,0BAA0B,EAC1BC,YAAa,GACbC,oBAAoB,EACpBC,2BAA2B,EAC3BC,qBAAsB,iCACtBC,0BAA0B,EAC1BjD,QAAS,GACTC,gBAAgB,EAChBC,uBAAuB,EACvBe,iBAAkB,+BAClBd,sBAAsB,EACtBC,mBAAmB,KAzNrB,EAAKzK,MAAQ,CACXyM,YAAY,EACZC,cAAe,KAEf1D,MAAO,GACPE,cAAc,EACde,qBAAqB,EACrBoB,eAAgB,0BAEhBwB,YAAa,GACbC,oBAAoB,EACpBC,2BAA2B,EAC3BC,qBAAsB,iCACtBC,0BAA0B,EAE1BC,YAAa,GACbC,oBAAoB,EACpBC,2BAA2B,EAC3BC,qBAAsB,iCACtBC,0BAA0B,EAE1BjD,QAAS,GACTC,gBAAgB,EAChBC,uBAAuB,EACvBe,iBAAkB,+BAClBd,sBAAsB,EACtBC,mBAAmB,GA5BJ,E,sEA+NT,IAAD,SAOH7I,KAAK/B,MAJP2I,EAHK,EAGLA,MACA8F,EAJK,EAILA,iBACA7F,EALK,EAKLA,MACAmF,EANK,EAMLA,aANK,EAgBHhM,KAAK5B,MANPyM,EAVK,EAULA,WACAC,EAXK,EAWLA,cACAxD,EAZK,EAYLA,aACA4D,EAbK,EAaLA,mBACAK,EAdK,EAcLA,mBACA7C,EAfK,EAeLA,eAfK,EAkBkB7B,EAAMmF,GAAvB5E,EAlBD,EAkBCA,MAAOuF,EAlBR,EAkBQA,MAGTC,EAAiB,CACrB,oBACA,uBACA,sBACA,uBAIIC,EAAc,CAClBC,cAAe,kBACfC,YAAa,qBACbC,aAAc,sBACdC,eAAgB,yBAChBC,YAAa,uBAETC,EAAkBpG,OAAOqG,KAAKP,GAI9BQ,EAAejN,IAAW,UAAW,CACzC,mBAAoBsM,IAGhBY,EAAmBlN,IAAW,cAAe,oBAAqB,CACtE,wBAAyByK,IAGrB0C,EAAsBnN,IAAW,cAAe,uBAAwB,CAC5E,uBAAwByK,IAK1B,OACE,6BAAStK,UAAW8M,GAElB,wBAAI9M,UAAU,sBACX6G,GAGH,kBAAC,EAAD,CACE5F,WAAYoF,EACZxI,MAAO4B,KAAK5B,MACZyM,WAAYA,EACZC,cAAeA,EACf9I,oBAAqBhC,KAAKgJ,sBAC1B/G,YAAajC,KAAK2H,YAClBQ,sBAAuBnI,KAAKmI,sBAC5B4C,4BAA6B/K,KAAK+K,4BAClCC,4BAA6BhL,KAAKgL,4BAClClC,wBAAyB9I,KAAK8I,0BAIhC,yBAAKvI,UAAU,oBAGb,yBAAKA,UAAW+M,GA1DE,CAAC,QAAS,WAAY,SAAU,UA4DhCpF,KAAI,SAACsF,EAAQC,GAE3B,IAAMC,EAActN,IACpB,sBAD8B,+BAENoN,GAAU,CAChC,gCAAiC3C,IAE7B8C,EAAcjB,IAAqB7B,EAAa,IAAM,KAE5D,OACE,4BACEtK,UAAWmN,EACXE,IAAKJ,EACL5D,MAAOgD,EAAea,GACtBpK,QAAS,kBAAM,EAAK+I,eAAeoB,IACnCK,SAAUF,GAEV,yBAAKpN,UAAU,mBAAmBC,QAAQ,eACxC,yBAAK8C,KAAI,UAAKC,IAAL,YAAciK,EAAd,gBASnB,yBAAKjN,UAAWgN,GAhFK,CAAC,UAAW,UAkFZrF,KAAI,SAAAsF,GAErB,IAKMM,GALqC,UAAlBhD,GACtBxD,EACiB,aAAlBwD,KACCI,IAAuBK,IAAuB7C,KAEc,YAAX8E,EAE9CE,EAActN,IACpB,sBAD8B,+BAENoN,GAAU,CAChC,+BAAgC3C,EAChC,gCAAiCiD,IAE7BH,EAAcjB,GAAoB7B,EAAa,IAAM,KAE3D,OACE,4BACEtK,UAAWmN,EACXE,IAAKJ,EACLnK,QAAS,kBAAM,EAAK+I,eAAeoB,IACnCzK,SAAU+K,EACVD,SAAUF,GAEV,yBAAKpN,UAAU,mBAAmBC,QAAQ,eACxC,yBAAK8C,KAAI,UAAKC,IAAL,YAAciK,EAAd,iBAUrB,6BAASjN,UAAU,oBACjB,wBAAIA,UAAU,oBAAd,SACA,2BAAOA,UAAU,SACf,6BAASA,UAAU,iCAAnB,SACA,2BAAOA,UAAU,gCACf,wBAAIA,UAAU,cACZ,wBAAIA,UAAU,eAAd,QACA,wBAAIA,UAAU,eAAd,WAGJ,2BAAOA,UAAU,eAEf,YAAI4M,GAAiBjF,KAAI,SAAA0F,GAAG,OAE1B,wBAAIrN,UAAU,aAAaqN,IAAKA,GAC9B,wBAAIrN,UAAU,gCAAgCwN,MAAM,OACjDlB,EAAYe,IAEf,wBAAIrN,UAAU,kCACXoM,EAAMiB,WAUnB,6BAASrN,UAAU,oBACjB,wBAAIA,UAAU,oBAAd,eACA,uBAAGA,UAAU,iBAAb,6B,GAhZYa,cCmGP4M,G,MApGM,SAAC/P,GAAW,IAAD,EAG5BgQ,EAcEhQ,EAdFgQ,UACAC,EAaEjQ,EAbFiQ,QACAC,EAYElQ,EAZFkQ,SACAvE,EAWE3L,EAXF2L,MACAlI,EAUEzD,EAVFyD,MACA8C,EASEvG,EATFuG,QACAC,EAQExG,EARFwG,QACA2J,EAOEnQ,EAPFmQ,YACAC,EAMEpQ,EANFoQ,eACAC,EAKErQ,EALFqQ,eACAC,EAIEtQ,EAJFsQ,iBACAC,EAGEvQ,EAHFuQ,gBACAC,EAEExQ,EAFFwQ,gBACAC,EACEzQ,EADFyQ,UAGIC,EAAoBvO,IAAW,gBAAD,2CAChB+N,GAAaF,GADG,cAElC,gBAAiBA,GAAgC,YAAnBI,GAFI,cAGlC,cAAeJ,GAAgC,YAAnBI,GAHM,cAIlC,eAAgBJ,GAAgC,WAAnBI,GAJK,cAKlC,eAAgBJ,GAAgC,WAAnBI,GALK,IAQ9BO,EAAiBxO,IAAW,qBAAsB,CACtD,+BAAgC8N,GAAWQ,IAGvCG,EAAkBzO,IAAW,uBAAwB,CACzD,iCAAkC8N,GAAWQ,IAGzCI,EAAoB1O,IAAW,sBACnC,+BAAgC,CAC9B,gCAAiC8N,GAAWQ,IAG1CK,EAAoB3O,IAAW,sBACnC,+BAAgC,CAC9B,gCAAiC8N,GAAWQ,IAGhD,OACE,yBAAKnO,UAAWoO,GAGd,2BACEjM,QAASyL,EACT5N,UAAU,uBAETmB,GAIY,aAAbyM,EAEA,yBAAK5N,UAAU,+BACb,8BACEE,GAAI0N,EACJ5N,UAAWqO,EACXR,YAAaA,EACbvL,WAAW,QACXC,UNtEqB,GMuErBrB,MAAOmI,EACPxG,SAAU,SAACH,GAAD,OAAOsL,EAAiBtL,EAAEE,OAAO1B,UAE7C,yBACElB,UAAU,yBACVY,MAAOyE,EAAsB0I,MAKjC,yBAAK/N,UAAWsO,GACd,2BACEpO,GAAI0N,EACJxL,KAAI,UAAKwL,EAAL,WACJ5N,UAAWuO,EACXV,YAAY,MACZtL,UAAU,IACVrB,MAAO+C,EACPpB,SAAU,SAACH,GAAD,OAAOuL,EAAgBvL,EAAEE,OAAO1B,UAE5C,0BAAMlB,UAAU,uBAAhB,KACA,2BACEoC,KAAI,UAAKwL,EAAL,WACJ5N,UAAWwO,EACXX,YAAY,MACZtL,UAAU,IACVrB,MAAOgD,EACPrB,SAAU,SAACH,GAAD,OAAOwL,EAAgBxL,EAAEE,OAAO1B,cC4QvCuN,G,kBAtWb,WAAY/Q,GAAQ,IAAD,8BACjB,4CAAMA,KA6BRgR,qBAAuB,WACrB/O,aAAa,EAAKgP,iBA/BD,EAkCnBpD,kBAAoB,SAACC,GAAD,OAAY,EAAKzM,SAASyM,IAlC3B,EAoCnBoD,eAAiB,SAAC1N,GAChB,EAAKnC,SAAS,CACZ8P,gBAAiB3N,EACjB6M,eAAgB7M,EAAMmC,OACtByL,gBAAiB1L,EAAiBlC,GAClCiN,WAAW,KAzCI,EA6CnBY,WAAa,WAAO,IAAD,EAC0B,EAAKrR,MAAxCsR,EADS,EACTA,mBAAoBC,EADX,EACWA,WADX,EAYb,EAAKpR,MAIHqR,EAAU,CACdC,SAjBe,EAGfN,gBAeAnK,YAlBe,EAIf0K,mBAeAvK,YAnBe,EAKfwK,mBAeAtK,aApBe,EAMfuK,oBAeApK,aArBe,EAOfqK,oBAeA9K,cAtBe,EAQf+K,qBAeA1K,eAvBe,EASf2K,sBAeA9K,mBAxBe,EAUf+K,qBAeA1K,oBAzBe,EAWf2K,sBAeAzP,GAZWuF,KAAKmK,OAelBZ,EAAmB,CAAEa,kBAAkB,IACvCZ,EAAWC,EAAS,QA3EH,EA2FnB3K,iBAAmB,SAACN,EAASC,EAASM,EAAOnC,GAC3C,IAAMyN,EAAUvL,EAAiBN,EAASC,EAASM,EAAOnC,GAE1D,GAAa,SAATA,GACF,GAAc,YAAVmC,EAAqB,CAAC,IAChBE,EAAoEoL,EAApEpL,YAAaD,EAAuDqL,EAAvDrL,cAAeE,EAAwCmL,EAAxCnL,mBAAoBC,EAAoBkL,EAApBlL,gBACxD,EAAK7F,SAAS,CACZqQ,mBAAoB1K,EACpB8K,qBAAsB/K,EACtBiL,qBAAsB/K,EACtBC,kBACAuJ,WAAW,SAER,GAAc,YAAV3J,EAAqB,CAAC,IACvBK,EAAoEiL,EAApEjL,YAAaJ,EAAuDqL,EAAvDrL,cAAeE,EAAwCmL,EAAxCnL,mBAAoBC,EAAoBkL,EAApBlL,gBACxD,EAAK7F,SAAS,CACZsQ,mBAAoBxK,EACpB2K,qBAAsB/K,EACtBiL,qBAAsB/K,EACtBC,kBACAuJ,WAAW,UAGV,GAAa,UAAT9L,EACT,GAAc,YAAVmC,EAAqB,CAAC,IAChBO,EAAwE+K,EAAxE/K,aAAcD,EAA0DgL,EAA1DhL,eAAgBE,EAA0C8K,EAA1C9K,oBAAqBC,EAAqB6K,EAArB7K,iBAC3D,EAAKlG,SAAS,CACZuQ,oBAAqBvK,EACrB0K,sBAAuB3K,EACvB6K,sBAAuB3K,EACvBC,mBACAkJ,WAAW,SAER,GAAc,YAAV3J,EAAqB,CAAC,IACvBU,EAAwE4K,EAAxE5K,aAAcJ,EAA0DgL,EAA1DhL,eAAgBE,EAA0C8K,EAA1C9K,oBAAqBC,EAAqB6K,EAArB7K,iBAC3D,EAAKlG,SAAS,CACZwQ,oBAAqBrK,EACrBuK,sBAAuB3K,EACvB6K,sBAAuB3K,EACvBC,mBACAkJ,WAAW,MAnIA,EAyInB4B,iBAAmB,SAACrN,GAClBA,EAAEmG,iBADsB,MAKpB,EAAKhL,MAFPmS,EAHsB,EAGtBA,kBACAC,EAJsB,EAItBA,mBAGED,GACF,EAAKjR,SAAS,CACZmR,mBAAmB,EACnBF,mBAAmB,EACnBlC,eAAgB,WAIhBmC,GACF,EAAKlR,SAAS,CACZiR,mBAAmB,EACnBC,oBAAoB,EACpBnC,eAAgB,YA5JH,EAiKnBqC,iBAAmB,SAACzN,GAClBA,EAAEmG,iBADsB,MAUpB,EAAKhL,MANPqS,EAJsB,EAItBA,kBACAF,EALsB,EAKtBA,kBACAC,EANsB,EAMtBA,mBACAnB,EAPsB,EAOtBA,gBACAlK,EARsB,EAQtBA,gBACAK,EATsB,EAStBA,iBAGEiL,GAAqBpB,GACvB,EAAK/P,SAAS,CACZmR,mBAAmB,EACnBF,mBAAmB,EACnB7B,WAAW,EACXL,eAAgB,YAIhBkC,GAAqBpL,GACvB,EAAK7F,SAAS,CACZiR,mBAAmB,EACnBC,oBAAoB,EACpB9B,WAAW,EACXL,eAAgB,YAIhBmC,GAAsBhL,IACxB,EAAKlG,SAAS,CACZqR,gBAAgB,EAChBjC,WAAW,EACXkC,sBAAsB,EACtBvC,eAAgB,YAElB,EAAKa,eAAiBnP,YAAW,kBAAM,EAAKuP,eAC5C9L,KAvMe,EA2MnBqN,mBAAqB,SAAC5N,GACpBA,EAAEmG,kBAEFmG,EAD+B,EAAKtR,MAA5BsR,oBACW,CAAEa,kBAAkB,KA5MvC,EAAKhS,MAAQ,CAEXwS,sBAAsB,EACtBH,mBAAmB,EACnBF,mBAAmB,EACnBC,oBAAoB,EAEpBpB,gBAAiB,GACjBO,mBAAoB,GACpBC,mBAAoB,GACpBC,oBAAqB,GACrBC,oBAAqB,GACrBC,qBAAsB,EACtBC,sBAAuB,EACvB1B,eAAgB,EAChB2B,qBAAsB,CAAC,KAAK,MAC5BC,sBAAuB,CAAC,KAAK,MAE7Bb,iBAAiB,EACjBlK,iBAAiB,EACjBK,kBAAkB,EAClBmL,gBAAgB,EAChBjC,WAAW,EAEXL,eAAgB,MA1BD,E,sEAiNT,IAAD,SAuBHrO,KAAK5B,MAnBPwS,EAJK,EAILA,qBACAH,EALK,EAKLA,kBACAF,EANK,EAMLA,kBACAC,EAPK,EAOLA,mBAEApB,EATK,EASLA,gBACAO,EAVK,EAULA,mBACAC,EAXK,EAWLA,mBACAC,EAZK,EAYLA,oBACAC,EAbK,EAaLA,oBACAxB,EAdK,EAcLA,eAEAe,EAhBK,EAgBLA,gBACAlK,EAjBK,EAiBLA,gBACAK,EAlBK,EAkBLA,iBACAmL,EAnBK,EAmBLA,eACAjC,EApBK,EAoBLA,UAEAL,EAtBK,EAsBLA,eAGIyC,EACLL,GAAqBpB,GACrBkB,GAAqBpL,GACrBqL,GAAsBhL,EAEjBuL,EAAe3Q,IAAW,UAAW,CACzC,qBAAsBwQ,IAGlBI,EAAkB5Q,IAAW,kBACjC,wBAAyB,CACzB,4BAA6BqQ,IAGzBQ,EAAkB7Q,IAAW,kBACjC,wBAAyB,CACzB,2BAA4B0Q,IAKxBI,EAAyB,CAC7BxQ,MAAO6P,EAAiB,UAAM,EAAE,EAAI,IAAZ,KACtBC,EACAG,EAAiB,OAAH,UAAe,EAAE,EAAI,IAArB,KACd,GAGJ,OACE,0BACEpQ,UAAWwQ,EACX5P,MAAOsC,GAKP,kBAAC,EAAD,CACEwK,UAAWwC,EACXvC,QAASmB,EACTlB,SAAS,WACTvE,MAAOwF,EACP1N,MAAM,kBACN0M,YAAY,gCACZM,UAAWA,EACXH,iBAAkBvO,KAAKmP,eACvBd,eAAgBA,EAChBC,eAAgBA,IAIlB,kBAAC,EAAD,CACEL,UAAWsC,EACXrC,QAAS/I,EACTgJ,SAAS,WACTzM,MAAM,kBACN0M,YAAY,qBACZ5J,QAASmL,EACTlL,QAASmL,EACTlB,UAAWA,EACXL,eAAgBA,EAChBG,gBAAiB,SAAC/M,GAAD,OACf,EAAKqD,iBAAiBrD,EAAOmO,EAAoB,UAAW,SAC9DnB,gBAAiB,SAAChN,GAAD,OACf,EAAKqD,iBAAiB6K,EAAoBlO,EAAO,UAAW,WAIhE,kBAAC,EAAD,CACEwM,UAAWuC,EACXtC,QAAS1I,EACT2I,SAAS,YACTzM,MAAM,uBACN0M,YAAY,qBACZ5J,QAASqL,EACTpL,QAASqL,EACTpB,UAAWA,EACXL,eAAgBA,EAChBG,gBAAiB,SAAC/M,GAAD,OACf,EAAKqD,iBAAiBrD,EAAOqO,EAAqB,UAAW,UAC/DrB,gBAAiB,SAAChN,GAAD,OACf,EAAKqD,iBAAiB+K,EAAqBpO,EAAO,UAAW,YAIjE,4BACElB,UAAWyQ,EACX3N,QAASrD,KAAKsQ,kBAEd,yBAAK/P,UAAU,eAAeC,QAAQ,eACpC,yBAAK8C,KAAI,UAAKC,IAAL,mBAKb,4BACEhD,UAAW0Q,EACX5N,QAASrD,KAAK0Q,kBAEd,yBAAKnQ,UAAU,eAAeC,QAAQ,eACpC,yBAAK8C,KAAI,UAAKC,IAAL,oBAKb,4BACEhD,UAtFmB,kEAuFnB8C,QAASrD,KAAK6Q,oBAEd,yBAAKtQ,UAAU,eAAeC,QAAQ,eACpC,yBAAK8C,KAAI,UAAKC,IAAL,eAKb,yBAAKhD,UAAU,eACb,yBACEA,UAAU,sBACVY,MAAO+P,U,GAhWG9P,cC0DP+P,G,MA5DM,SAAClT,GAAW,IAG7BmT,EAQEnT,EARFmT,OACAlD,EAOEjQ,EAPFiQ,QACAmD,EAMEpT,EANFoT,YACA/C,EAKErQ,EALFqQ,eACAxM,EAIE7D,EAJF6D,WACA+I,EAGE5M,EAHF4M,WACA0D,EAEEtQ,EAFFsQ,iBACA+C,EACErT,EADFqT,iBAGIC,EAAoBnR,IAAW,WAAY,CAC/C,qBAAsB0B,EACtB,sBAAuBuP,IAGnBG,EAAYpR,IAAW,iBAAkB,CAC7C,2BAA4ByK,IAGxB4G,EAAsBrR,IAAW,2BAA4B,CACjE,oCAAqCyK,IAGjCxI,EAAajC,IAAW,kBAAmB,CAC/C,8BAA+B8N,IAG3BwD,EAAgBtR,IAAW,qBAAsB,CACrD,8BAA+ByK,IAGjC,OACE,yBAAKtK,UAAWgR,GAEd,wBAAIhR,UAAWiR,EAAWnO,QAASiO,GAAnC,WACOF,EADP,MAIA,yBAAK7Q,UAAWkR,GAEd,8BACElR,UAAW8B,EACXZ,MAAO2P,EACPvO,WAAW,QACXC,URpDuB,GQqDvBM,SAAU,SAACH,GAAD,OAAOsL,EAAiBtL,EAAEE,OAAO1B,UAG7C,yBACElB,UAAWmR,EACXvQ,MAAOyE,EAAsB0I,SCfxBqD,EAzCM,SAAC1T,GAAW,IAE7BwC,EAOExC,EAPFwC,GACAkC,EAME1E,EANF0E,KACAiP,EAKE3T,EALF2T,KACA9N,EAIE7F,EAJF6F,KACA+G,EAGE5M,EAHF4M,WACAgH,EAEE5T,EAFF4T,aACAP,EACErT,EADFqT,iBAGIE,EAAYpR,IAAW,kBAAmB,CAC9C,4BAA6ByK,IAGzBiH,EAAY1R,IAAW,mBAAD,4BACLwR,GAAQ,CAC7B,4BAA6B/G,IAGzBuD,EAAcwD,EAAK1L,MAAM,EAAE,GAEjC,OACE,yBAAK3F,UAAS,2CAAsCqR,IAElD,uBAAGrR,UAAWiR,EAAWnO,QAASiO,GAC/BxN,GAGH,2BACErD,GAAIA,EACJkC,KAAMA,EACNpC,UAAWuR,EACX1D,YAAaA,EACbtL,UAAU,IACVrB,MAAOqC,EACPV,SAAU,SAACH,GAAD,OAAO4O,EAAa5O,EAAEE,OAAO1B,YCahCsQ,G,MA9CE,SAAC9T,GAAW,IAGzBkQ,EAKElQ,EALFkQ,SACA1M,EAIExD,EAJFwD,MACAyM,EAGEjQ,EAHFiQ,QACArD,EAEE5M,EAFF4M,WACAgH,EACE5T,EADF4T,aAGIG,EAAoB,SAACvQ,EAAOwQ,GAEhC,IAAMC,ETCqB,SAACzQ,EAAOwQ,EAAWE,EAAYC,GAC5D,IAAMF,EAAyB,aAAdD,EACfvN,SAASjD,GAAS,EAAIiD,SAASjD,GAAS,EAE1C,OACEkD,EADKuN,GAAYC,GAAcD,GAAYE,EAC7BF,EACdA,EAAWC,EACKA,EACAC,GSTCC,CADjB5Q,EAAkB,KAAVA,EAAe,EAAIA,EACawQ,EAAW,EAAG,IACtDJ,EAAaK,IAGTI,EAAgBlS,IAAW,WAAY,CAAC,aAAD,OAAc+N,IAAa,CACtE,oBAAqBtD,EACrB,sBAAuBqD,IAGzB,OACE,yBAAK3N,UAAW+R,GAEd,4BACE/R,UAAU,8CACV8C,QAAS,kBAAM2O,EAAkBvQ,EAAO,aACxCsB,UAAWmL,GAEX,yBAAK3N,UAAU,gBAAgBC,QAAQ,eACrC,yBAAK8C,KAAI,UAAKC,IAAL,iBAIb,4BACEhD,UAAU,8CACV8C,QAAS,kBAAM2O,EAAkBvQ,EAAO,aACxCsB,UAAWmL,GAEX,yBAAK3N,UAAU,gBAAgBC,QAAQ,eACrC,yBAAK8C,KAAI,UAAKC,IAAL,sBC+CJgP,G,MAvFG,SAACtU,GAAW,IAG1BuU,EAcEvU,EAdFuU,UACArE,EAaElQ,EAbFkQ,SACA1N,EAYExC,EAZFwC,GACA4Q,EAWEpT,EAXFoT,YACA7M,EAUEvG,EAVFuG,QACAC,EASExG,EATFwG,QACAyJ,EAQEjQ,EARFiQ,QACApM,EAOE7D,EAPF6D,WACA+I,EAME5M,EANF4M,WACA4H,EAKExU,EALFwU,eACAnB,EAIErT,EAJFqT,iBACA9C,EAGEvQ,EAHFuQ,gBACAC,EAEExQ,EAFFwQ,gBACAiE,EACEzU,EADFyU,WAGIC,EAAiBvS,IAAW,wBAAD,OAAyB+N,GAAY,CACpE,uBAAwBkD,EACxB,sBAAuBvP,EACvB,mBAAoB2Q,GAA+B,aAAbtE,IAGlC/L,EAAahC,IAAW,mBAAoB,CAChD,6BAA8ByK,IAG1B+H,EAAexS,IAAW,qBAAsB,CACpD,+BAAgCyK,EAChC,iCAAkCqD,IAGpC,OACE,yBAAK3N,UAAWoS,GAEd,2BACEpS,UAAW6B,EACXM,QAAO,UAAKyL,EAAL,YAAiB1N,GACxB4C,QAASiO,GAERkB,GAEH,yBACEjS,UAAWqS,EACXC,UAAW,SAAC5P,GAAD,OAAOyP,EAAWzP,EAAE2K,OAE/B,kBAAC,EAAD,CACEO,SAAS,UACT1M,MAAO+C,EACP0J,QAASA,EACTrD,WAAYA,EACZgH,aAAc,SAACpQ,GAAD,OAAW+M,EAAgB/M,MAG3C,kBAAC,EAAD,CACEhB,GAAE,UAAK0N,EAAL,YAAiB1N,GACnBkC,KAAI,UAAKwL,EAAL,WACJyD,KAAK,UACL9N,KAAMU,EACNqG,WAAYA,EACZgH,aAAc,SAACpQ,GAAD,OAAW+M,EAAgB/M,IACzC6P,iBAAkBA,IAGpB,0BAAM/Q,UAAU,oBAAhB,OAEA,kBAAC,EAAD,CACEoC,KAAI,UAAKwL,EAAL,WACJyD,KAAK,UACL9N,KAAMW,EACNoG,WAAYA,EACZgH,aAAc,SAACpQ,GAAD,OAAWgN,EAAgBhN,IACzC6P,iBAAkBA,IAEpB,kBAAC,EAAD,CACEnD,SAAS,UACT1M,MAAOgD,EACPyJ,QAASA,EACTrD,WAAYA,EACZgH,aAAc,SAACpQ,GAAD,OAAWgN,EAAgBhN,UCCpCqR,G,MAnFK,SAAC7U,GAAW,IAG5BoT,EASEpT,EATFoT,YACA0B,EAQE9U,EARF8U,eACAC,EAOE/U,EAPF+U,aACAC,EAMEhV,EANFgV,iBACAC,EAKEjV,EALFiV,oBACAC,EAIElV,EAJFkV,oBACAC,EAGEnV,EAHFmV,kBACA7D,EAEEtR,EAFFsR,mBACA8D,EACEpV,EADFoV,OAUIC,EAAmBlT,IAAW,cAAe,CACjD,yBAA0BiR,IAGtBkC,EAAoBnT,IAAW,sBACrC,8BAA+B,CAC7B,+BAAgC2S,EAChC,gCAAiCC,GAAgBC,IAG7CvF,EAActN,IAAW,sBAAuB,CACpD,gCAAiC2S,GAAkBE,EACnD,+BAAgC5B,IAGlC,OACE,yBAAK9Q,UAAW+S,GAEd,4BACE/S,UAAWgT,EACXlQ,QAAS6P,GAET,yBAAK3S,UAAU,mBAAmBC,QAAQ,eACxC,yBAAK8C,KAAI,UAAKC,IAAL,aAKb,4BACEhD,UAAWmN,EACXrK,QArCiB,WACrB+P,GAAkB,SAAA7T,GAAS,MAAK,CAC9B8R,aAAc9R,EAAU8R,gBAE1B9B,EAAmB,CAAEiE,sBAAsB,KAkCvCzQ,SAAUgQ,GAAkBE,GAE5B,yBAAK1S,UAAU,mBAAmBC,QAAQ,eACxC,yBAAK8C,KAAI,UAAKC,IAAL,iBAKb,4BACEhD,UAAWmN,EACX+F,YAAaJ,EACbtQ,SAAUgQ,GAAkBE,GAE5B,yBAAK1S,UAAU,mBAAmBC,QAAQ,eACxC,yBAAK8C,KAAI,UAAKC,IAAL,aAKb,4BACEhD,UAAWmN,EACXrK,QAAS8P,EACTpQ,SAAUgQ,GAAkBE,GAE5B,yBAAK1S,UAAU,mBAAmBC,QAAQ,eACxC,yBAAK8C,KAAI,UAAKC,IAAL,kBC1CJmQ,G,MApCG,SAACzV,GAAW,IAE1B4D,EAIE5D,EAJF4D,UACA8R,EAGE1V,EAHF0V,mBACAC,EAEE3V,EAFF2V,aACAC,EACE5V,EADF4V,cAGIC,EAAiB1T,IAAW,YAAa,CAC7C,qBAAsBuT,IAGlBI,EAAiB3T,IAAW,uBAAwB,CACxD,gCAAiCuT,IAGnC,OACE,6BAASpT,UAAWuT,GAClB,yBAAKvT,UAAWwT,GACd,wBAAIxT,UAAU,sBAAsBsB,GACpC,4BACEtB,UAAU,4CACV8C,QAASwQ,GAFX,OAMA,4BACEtT,UAAU,8CACV8C,QAASuQ,GAFX,cCWOI,G,MArCK,SAAC/V,GAAW,IAE5B2E,EAIE3E,EAJF2E,KACAqR,EAGEhW,EAHFgW,iBACAC,EAEEjW,EAFFiW,mBACAC,EACElW,EADFkW,cAGIC,EAA6B,aAATxR,EACtBqR,EAAiBI,KAAK,OACtBJ,EAAiB/N,MAAM,EAAE,GAAGmO,KAAK,OAE/BC,EAA+B,aAAT1R,EACxBsR,EAAmBG,KAAK,OACxBH,EAAmBhO,MAAM,EAAE,GAAGmO,KAAK,OAEjCE,EAAmBnU,IAAW,oBAClC,6BAA8B,CAC9B,6BAA8B+T,EAC9B,4BAA8BA,EAC9B,6BAA+BA,IAG3BK,EAAqBpU,IAAW,oBACpC,+BAAgC,CAChC,8BAA+B+T,EAC/B,6BAA+BA,EAC/B,4BAA8BA,IAGhC,OACE,yBAAK5T,UAAU,eACb,yBAAKA,UAAWgU,GAAmBH,GACnC,yBAAK7T,UAAWiU,GAAqBF,MCQ5BG,G,MAxCG,SAACxW,GAAW,IAG1BkQ,EAMElQ,EANFkQ,SACAgG,EAKElW,EALFkW,cACAF,EAIEhW,EAJFgW,iBACAC,EAGEjW,EAHFiW,mBACAQ,EAEEzW,EAFFyW,mBACAC,EACE1W,EADF0W,YAGIC,EAAiBxU,IAAW,wBAAD,OAAyB+N,GAAY,CACpE,qBAAsBuG,EACtB,cAAiBA,GAAsBC,EAAc,EACrD,YAAeD,IAGjB,OACE,yBAAKnU,UAAWqU,GAGC,aAAbzG,EACE,wBAAI5N,UAAU,sBAAd,gBACA,wBAAIA,UAAU,sBAAd,cAGF4T,EACE,uBAAG5T,UAAU,uBAAb,gBACA,uBAAGA,UAAU,uBAAb,kBAGJ,kBAAC,EAAD,CACEqC,KAAMuL,EACNgG,cAAeA,EACfF,iBAAkBA,EAClBC,mBAAoBA,OCwBbW,G,MA5DE,SAAC5W,GAAW,IAEzBkQ,EAKElQ,EALFkQ,SACAF,EAIEhQ,EAJFgQ,UACAkG,EAGElW,EAHFkW,cACAW,EAEE7W,EAFF6W,eACAC,EACE9W,EADF8W,iBAGIrD,EAAgBtR,IAAW,WAAD,oBACnB+N,GAAY,CACvB,oBAAqBF,IAGjB+G,EAAsB5U,IAAW,oBAAD,6BAChB+N,GAAY,CAChC,6BAA8BgG,IAE1Bc,EAAwB7U,IAAW,oBAAD,6BAChB+N,GAAY,CAClC,8BAA+BgG,IAE3Be,EAAY,uEACyC/G,EADzC,QAGZgH,EAAc,yEACyChH,EADzC,QAKdiH,EAAqB,UAAMtW,KAAKuW,MAAMP,GAAjB,KACrBQ,EAAuB,UAAMxW,KAAKuW,MAAMN,GAAjB,KACvBQ,EAAe,CACnB7U,MAAM,GAAD,OAAKyT,EAAgBW,EAAiBC,EAAtC,MAEDS,EAAiB,CACrB9U,MAAM,GAAD,OAAKyT,EAAgBY,EAAmBD,EAAxC,MAGP,OACE,6BAASvU,UAAWmR,GAElB,4BAAQnR,UAAU,oBAChB,uBAAGA,UAAWyU,GAAsBI,GACpC,uBAAG7U,UAAW0U,GAAwBK,IAGxC,yBAAK/U,UAAU,iBACb,yBACEA,UAAW2U,EACX/T,MAAOoU,IAET,yBACEhV,UAAW4U,EACXhU,MAAOqU,QC2CFC,G,iNA9FbC,sBAAwB,WAAO,IAAD,EAMxB,EAAKzX,MAJP0X,EAF0B,EAE1BA,iBACAC,EAH0B,EAG1BA,kBACAC,EAJ0B,EAI1BA,mBACAC,EAL0B,EAK1BA,mBAGEH,GAAoBC,KACtBE,GAAkB,SAAAvW,GAAS,MAAK,CAC9BoW,kBAAmBpW,EAAUoW,iBAC7BC,mBAAoBrW,EAAUqW,sBAEhCC,EAAmB,CAAEE,aAAc/P,KAAKmK,SAEtCwF,GACFE,GAAmB,SAAAtW,GAAS,MAAK,CAC/BoV,YAAapV,EAAUoV,YAAc,O,wEAKjC,IAAD,EAOH3U,KAAK/B,MAJP0X,EAHK,EAGLA,iBACAK,EAJK,EAILA,kBACA/C,EALK,EAKLA,iBACAgD,EANK,EAMLA,oBAGIC,EAAe9V,IAAW,gBAAiB,CAC/C,wBAAyBuV,IAErBQ,EAAgB/V,IAAW,gBAAiB,CAChD,yBAA0BuV,IAGtBS,EAAuBhW,IAAW,mBACxC,8BAA+B,CAC7B,6BAA8B6S,IAG1BoD,EAAkBjW,IAAW,mBACnC,yBAA0B,CACxB,6BAA8B6S,IAG1BqD,EAAoBlW,IAAW,mBACrC,2BAA4B,CAC1B,6BAA8B6S,IAGhC,OACE,yBAAK1S,UAAU,YAEb,4BACEA,UAAW6V,EACX/S,QAASrD,KAAK0V,sBACd3S,SAAUkQ,GAEV,yBAAK1S,UAAW2V,EAAc1V,QAAQ,eACpC,yBAAK8C,KAAI,UAAKC,IAAL,YAEX,yBAAKhD,UAAW4V,EAAe3V,QAAQ,eACrC,yBAAK8C,KAAI,UAAKC,IAAL,cAKb,4BACEhD,UAAW8V,EACXhT,QAAS2S,EACTjT,SAAUkQ,GAEV,yBAAK1S,UAAU,gBAAgBC,QAAQ,eACrC,yBAAK8C,KAAI,UAAKC,IAAL,aAKb,4BACEhD,UAAW+V,EACXjT,QAAS4S,EACTlT,SAAUkQ,GAEV,yBAAK1S,UAAU,gBAAgBC,QAAQ,eACrC,yBAAK8C,KAAI,UAAKC,IAAL,oB,GAzFEnC,cCiHRmV,G,uLA9GH,IAAD,IAQHvW,KAAK/B,MALPyR,EAHK,EAGLA,SACA8G,EAJK,EAILA,eACAC,EALK,EAKLA,aACAC,EANK,EAMLA,eACAjW,EAPK,EAOLA,GAPK,EAgBHT,KAAK/B,MAAMG,MANbiH,EAVK,EAULA,eACAsP,EAXK,EAWLA,YACAhP,EAZK,EAYLA,iBACAgR,EAbK,EAaLA,sBACAC,EAdK,EAcLA,YACAC,EAfK,EAeLA,iBAGIC,EAAenC,EAAc,EAAd,WACbA,EADa,YAED,IAAhBA,EAAA,WAAwBA,EAAxB,WAA+C,cAE7CoC,EAAepC,EAAW,WACxB7V,KAAKuW,MAAM1P,EAAmBiR,EAAc,KADpB,KAE5B,GAEEI,EAAoBtR,EAAiBmR,GACrCI,EAAkBvR,EAAiBiR,EAAuBhR,GAC1DuR,EAAc9W,IAAW,UAAD,qCACPoW,GADO,iCAENA,GAFM,IAK9B,OACE,6BAASjW,UAAW2W,GAGhBV,EAEA,wBAAIjW,UAAU,mBAAd,eAImB,IAAnB8E,EAEE,wBAAI9E,UAAU,mBAAd,sBAIA,wBAAIA,UAAU,mBAAd,mBAKFiW,EAEA,uBAAGjW,UAAU,mBAAb,gCAC+B,6BAC7B,0BAAMA,UAAU,kBAAhB,WAAsCmP,EAAtC,MAAyD,6BAF3D,KAIE,0BAAMnP,UAAU,kBAAkByW,GAJpC,UAKMrR,EAAmB,EAAI,yBAA2B,KALxD,IAK+D,6BAL/D,UAOE,0BAAMpF,UAAU,kBAAkBuW,GAPpC,mBASE,0BAAMvW,UAAU,kBAAkB0W,GACjCtC,EAAc,8BAAgC,GAC/C,0BAAMpU,UAAU,kBAAkBwW,GACjCpC,EAAc,gBAAkB,KAGhB,IAAnBtP,EACE,uBAAG9E,UAAU,mBAAb,4DAIA,uBAAGA,UAAU,mBAAb,sCACqC,6BADrC,UAGE,0BAAMA,UAAU,kBAAkBuW,GAHpC,mBAKE,0BAAMvW,UAAU,kBAAkB0W,GACjCtC,EAAc,8BAAgC,GAC/C,0BAAMpU,UAAU,kBAAkBwW,GACjCpC,EAAc,gBAAkB,KAIvC,4BACEpU,UAAU,yCACV8C,QAASqT,GAET,yBAAKnW,UAAU,cAAcC,QAAQ,eACnC,yBAAK8C,KAAI,UAAKC,IAAL,cAKb,4BACEhD,UAAU,wCACV8C,QAAS,kBAAMoT,EAAahW,KAE5B,yBAAKF,UAAU,YAAYC,QAAQ,eACjC,yBAAK8C,KAAI,UAAKC,IAAL,oB,GAzGAnC,cC8TN+V,G,kBAxTb,WAAYlZ,GAAQ,IAAD,uBACjB,4CAAMA,KAwERmZ,qBAAuB,WAAO,IACpBtB,EAAsB,EAAK7X,MAA3B6X,kBACR/V,YAAW,WACT+V,EAAkB,CAChBuB,kBAAkB,EAClBC,mBAAmB,MAEpB9T,GAEHzD,YAAW,WACT+V,EAAkB,CAChBuB,kBAAkB,MAEJ,EAAf7T,IAtFc,EAyFnB+T,gBAAkB,WAAO,IACfzB,EAAsB,EAAK7X,MAA3B6X,kBAERA,EAAkB,CAChBwB,mBAAmB,EACnBE,gBAAgB,IAGlB,EAAKlY,SAAS,CAAEqU,oBAAoB,IAEpC,EAAK7T,UAAYC,YAAW,WAC1B+V,EAAkB,CAAE2B,gBAAgB,IACpCvX,aAAa,EAAKJ,aACjB0D,GAEH,EAAK4T,wBAxGY,EA2GnBtL,kBAAoB,SAACC,GAAD,OAAY,EAAKzM,SAASyM,IA3G3B,EA6GnB2L,sBAAwB,WAAO,IAEvB9U,EADuB,EAAK3E,MAAMG,MAAhCuX,iBACwB,OAAS,QACzC,EAAKrW,UAAS,SAAAC,GAAS,kCACfqD,EADe,oBACUrD,EAAU,KAAD,OAAMqD,EAAN,yBAjHzB,EAqHnB+U,sBAAwB,WACtB,EAAKrY,UAAS,SAAAC,GAAS,MAAK,CAC1BoU,oBAAqBpU,EAAUoU,wBAvHhB,EA2HnBiE,eAAiB,SAAChV,GAEhB,GAAI,EAAK3E,MAAMG,MAAX,YAAsBwE,EAAtB,gBAA2C,EAAK3E,MAAMG,MAAMoZ,eAAgB,CAAC,IAkBjD,EAmBvB,EArCuE,EAElB,EAAKpZ,MAAzD2X,EAFsE,EAEtEA,aAAc8B,EAFwD,EAExDA,gBAAiBlS,EAFuC,EAEvCA,iBAFuC,EAGlC,EAAK1H,MAAzC6Z,EAHsE,EAGtEA,aAAchC,EAHwD,EAGxDA,kBAChBzX,EAAY,EAAKD,MAAL,eAAmBwE,EAAnB,SACZrE,EAAc,EAAKH,MAAL,iBAAqBwE,EAArB,SACdmV,EAAgB,EAAK3Z,MAAL,mBAAuBwE,EAAvB,SAChBgU,EAAciB,EAAkBlS,EAEhCwK,EAAMnK,KAAKmK,MACX8D,EAAqBrP,EAAarG,GAClCyZ,EAAqBpT,EAAavG,GAClC6V,EAAqBtP,EAAamT,GAClClB,EAAqBjS,EAAagS,GAClC9B,EAAmBvW,EAAcF,EAAY,IAC7C0W,EAAmBgD,EAAgB1Z,EAAY,IAGrD,GAAIE,GAAeF,EACjB,EAAKiB,UAAL,+BACQsD,EADR,eAC2B,GAD3B,+BAEaA,EAFb,QAE0BvE,GAF1B,+BAGauE,EAHb,aAG+BoV,GAH/B,iCAIepV,EAJf,aAIiC,CAAC,KAAK,KAAK,OAJ5C,+BAKaA,EALb,WAK6B,KAL7B,iCAMeA,EANf,QAM4B,GAN5B,iCAOeA,EAPf,WAO+B,GAP/B,0BAQQA,EARR,aAQyB,GARzB,oCASsB,GATtB,iCAUmB,GAVnB,4BAWEgU,GAXF,iCAYEC,GAZF,IAcAf,EAAkB,2BAAQlT,EAAT,eAA4B,IAE7CkV,EAAa,CAAED,kBAAiBlS,0BAGhC,EAAKrG,UAAL,GACEyW,aAAc5F,GADhB,+BAEavN,EAFb,QAE0BrE,GAAe4R,EAAM4F,IAF/C,+BAGanT,EAHb,aAG+BqR,GAH/B,iCAIerR,EAJf,QAI4BvE,EAAYE,GAJxC,iCAKeqE,EALf,aAKiCsR,GALjC,+BAMatR,EANb,WAM6BkS,GAN7B,iCAOelS,EAPf,WAO+BmS,GAP/B,MAnKa,MAQb,EAAK9W,MAAMG,MALb6Z,EAHe,EAGfA,UACAjT,EAJe,EAIfA,cACAK,EALe,EAKfA,eACAH,EANe,EAMfA,mBACAK,EAPe,EAOfA,oBAPe,OAUjB,EAAKnH,MAAQ,CAEXuV,oBAAoB,EACpBuE,gBAAgB,EAEhBC,uBAAuB,EACvBC,wBAAwB,EACxB5B,gBAAgB,EAChB6B,iBAAiB,EAEjBrT,gBACAK,iBACAsP,YAAa,EAEbkD,gBAAiB,EACjBS,mBAAoB,EACpBC,qBAAsB,CAAC,KAAK,KAAK,MACjC5S,iBAAkB,EAClB6S,oBAAqB,EACrB7B,sBAAuB,CAAC,KAAK,KAAK,MAElC8B,kBAAmB,EACnBC,qBAAsB,IACtBC,uBAAwBzT,EACxB0T,mBAAoB,EACpBC,sBAAuB,IACvBC,wBAAyBvT,EAEzBwQ,aAAckC,EACdrB,YAAa,EACbC,iBAAkB,CAAC,KAAK,KAAK,OAxCd,E,iFA4CE,IAAD,OACVf,EAAsB9V,KAAK/B,MAA3B6X,kBAERA,EAAkB,CAAEH,kBAAkB,IAEtC3V,KAAK+Y,eAAiB9Y,aAAY,kBAAM,EAAK2X,eAAe,UAAS,IACrE5X,KAAKgZ,gBAAkB/Y,aAAY,kBAAM,EAAK2X,eAAe,WAAU,IAEvE5X,KAAKF,UAAYC,YAAW,WAC1B,EAAKT,SAAS,CACZ4Y,gBAAgB,EAChBnC,aAAc/P,KAAKmK,QAErB2F,EAAkB,CAAE0B,gBAAgB,MACnChU,GAEHxD,KAAKoX,yB,6CAILxX,cAAcI,KAAK+Y,gBACnBnZ,cAAcI,KAAKgZ,iBACnB9Y,aAAaF,KAAKF,WAClBE,KAAK/B,MAAM6X,kBAAkB,CAC3BH,kBAAkB,EAClBC,mBAAmB,M,+BA2Gb,IAAD,EAMH5V,KAAK/B,MAAMG,MAHbsR,EAHK,EAGLA,SACAiG,EAJK,EAILA,iBACAC,EALK,EAKLA,kBALK,EAwBH5V,KAAK5B,MAfP8Z,EATK,EASLA,eACAvE,EAVK,EAULA,mBACAwE,EAXK,EAWLA,sBACAC,EAZK,EAYLA,uBACA5B,EAbK,EAaLA,eACA6B,EAdK,EAcLA,gBACAC,EAfK,EAeLA,mBACAC,EAhBK,EAgBLA,qBACAC,EAjBK,EAiBLA,oBACA7B,EAlBK,EAkBLA,sBACA+B,EAnBK,EAmBLA,qBACAC,EApBK,EAoBLA,uBACAE,EArBK,EAqBLA,sBACAC,EAtBK,EAsBLA,wBACAnE,EAvBK,EAuBLA,YAvBK,EA+BH3U,KAAK/B,MAJPwC,EA3BK,EA2BLA,GACAgW,EA5BK,EA4BLA,aACAxD,EA7BK,EA6BLA,iBACA6C,EA9BK,EA8BLA,kBAGImD,EAAa7Y,IAAW,QAAS,CACrC,iBAAkB8X,EAClB,kBAAmBvC,GAAoBa,EACvC,mBAAoBZ,GAAqByC,IAG3C,OACE,6BAAS9X,UAAW0Y,GAClB,wBAAI1Y,UAAU,kBAAd,WAAoCmP,EAApC,MACA,yBAAKnP,UAAU,oBAEb,kBAAC,EAAD,CACE4N,SAAS,WACTgG,cAAegE,EACflE,iBAAkBsE,EAClBrE,mBAAoByE,EACpBL,mBAAoBA,EACpBI,qBAAsBA,EACtBhE,mBAAoBiB,GAAoBa,EACxC7B,YAAaA,IAGf,kBAAC,EAAD,CACExG,SAAS,YACTgG,cAAeiE,EACfnE,iBAAkB0C,EAClBzC,mBAAoB4E,EACpBR,mBAAoBE,EACpBE,qBAAsBG,EACtBnE,mBAAoBkB,GAAqByC,EACzC1D,YAAaA,KAIjB,uBAAGpU,UAAU,iBlB9JO,SAACoU,GAAD,gBAAoBA,EAApB,aACV,IAAhBA,EAAoB,QAAU,SADJ,WkB+JjBmC,CAAanC,IAGhB,kBAAC,EAAD,CACEgB,iBAAkBA,EAClBC,kBAAmBA,EACnB3C,iBAAkBA,EAClB6C,kBAAmBA,EACnBG,oBAAqBjW,KAAK0X,sBAC1B7B,mBAAoB7V,KAAK8L,kBACzBkK,kBAAmBhW,KAAK2X,wBAG1B,yBAAKpX,UAAU,mBACb,kBAAC,EAAD,CACE4N,SAAS,WACTF,UAAW0H,GAAoBa,EAC/BrC,cAAegE,EACfrD,eAAgBwD,EAChBvD,iBAAkB2D,IAEpB,kBAAC,EAAD,CACEvK,SAAS,YACTF,UAAW2H,GAAqByC,EAChClE,cAAeiE,EACftD,eAAgB0D,EAChBzD,iBAAkB8D,KAItB,kBAAC,EAAD,CACEhX,UAAU,wCACV8R,mBAAoBA,EACpBC,aAAc5T,KAAK2X,sBACnB9D,cAAe7T,KAAKuX,kBAIpBf,EACE,kBAAC,EAAD,CACAA,eAAgBA,EAChB9G,SAAUA,EACVtR,MAAO4B,KAAK5B,MACZyX,mBAAoB7V,KAAK8L,kBACzB2K,aAAcA,EACdC,eAAgB1W,KAAKuX,gBACrB9W,GAAIA,IAEJ,8BAIF4X,EACE,kBAAC,EAAD,CACA7B,eAAgBA,EAChB9G,SAAUA,EACVtR,MAAO4B,KAAK5B,MACZyX,mBAAoB7V,KAAK8L,kBACzB2K,aAAcA,EACdC,eAAgB1W,KAAKuX,gBACrB9W,GAAIA,IAEJ,mC,GAnTQW,cCwjBL8X,G,kBAtjBb,WAAYjb,GAAQ,IAAD,uBACjB,4CAAMA,KAiDR0I,kBAAoB,WAClB,EAAKrH,SAAS,CACZ6Z,eAAe,IAEjB,EAAKrZ,UAAYC,YAAW,kBAAM,EAAKT,SAAS,CAC9C+X,kBAAkB,MAChB7T,IAxDa,EAiEnBsI,kBAAoB,SAACC,GAAD,OAAY,EAAKzM,SAASyM,IAjE3B,EAmEnBqN,oBAAsB,SAAC3L,GAAW,IAAD,EACE,EAAKxP,MAA/Bob,EADwB,EACxBA,UAAWC,EADa,EACbA,WAClB,OAAO7L,GAAS,GACdA,IAAU4L,EACRC,EAAW7L,GAEb,MAzEe,EA4EnB8L,iBAAmB,WAAO,IAChBhK,EAAuB,EAAKtR,MAA5BsR,mBACFiK,EAAW,EAAKC,KAAKC,QAAQC,WAAWC,SAc9CrK,EAAmB,CAAE+J,WAZF,YAAIE,GACtBK,QAAO,SAAAC,GAAI,OAAIA,EAAKC,UAAUC,SAAS,WACvC9R,KAAI,SAAAuR,GAAS,IACJQ,EAAqDR,EAArDQ,aAAcC,EAAuCT,EAAvCS,WAAYC,EAA2BV,EAA3BU,UAClC,MAAO,CACLxZ,OAAQsZ,EACNvZ,MAHyD+Y,EAAhBW,YAIzCC,KAAMH,EACNI,IAAKH,SAxFM,EA+FnBI,eAAiB,SAACtX,GACQ,EAAK7E,MAArBiT,aAEN,EAAKmJ,gBAAgBvX,IAlGN,EAwGnBuX,gBAAkB,YAA2B,IAAxBC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,QACpBnL,EAAuB,EAAKtR,MAA5BsR,mBAERoL,OAAOC,iBAAiB,YAAa,EAAKC,iBAC1CF,OAAOC,iBAAiB,UAAW,EAAKE,eAExC,EAAKxb,SAAS,CACZyb,UAAWN,EAAUE,OAAOK,QAC5BC,UAAWP,EAAUC,OAAOO,UAE9B,EAAK3B,mBAELhK,EAAmB,CACjBiE,sBAAsB,KArHP,EAyHnBqH,gBAAkB,YAA2B,IAAxBJ,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,QAAc,EAEY,EAAKzc,MAAnDsR,EAFkC,EAElCA,mBAAoB8J,EAFc,EAEdA,UAAWC,EAFG,EAEHA,WACjC6B,EAAYV,EAAUE,OAAOK,QAC7BI,EAAYV,EAAUC,OAAOO,QAC7BG,EAAmB/B,EAAWD,GAG9BiC,EAAmB,YAAIhC,GAAYiC,WAAU,SAAA9B,GAAS,IAClDY,EAA6BZ,EAA7BY,KAAMC,EAAuBb,EAAvBa,IAAK5Z,EAAkB+Y,EAAlB/Y,MAAOC,EAAW8Y,EAAX9Y,OAI1B,OAH6Bwa,GAAad,GAAQc,GAAad,EAAO3Z,IAC3C0a,GAAad,GAAOc,GAAad,EAAM3Z,MAI9D6a,EAAmB,EAAKpC,oBAAoBkC,IAGlD,EAAKhc,UAAS,SAAAC,GAAS,MAAK,CAC1Bkc,WAAYN,EAAY5b,EAAUwb,UAClCW,WAAYN,EAAY7b,EAAU0b,UAClCU,YAAY,MAIVH,IAIFjM,EAAmB,CACjBqM,eAJcP,EAAiBhB,KAAOmB,EAAiBnB,KAKvDwB,eAJcR,EAAiBf,IAAMkB,EAAiBlB,MAQ1D/K,EAAmB,CACjBuM,gBAAgB,EAChBC,iBAAkB1C,EAClBiC,iBAAkBjC,IAAciC,EAAmBA,GAAoB,KA/JxD,EAmKnBR,cAAgB,WAAO,IAAD,EAMH,EAAK7c,MAHpBsR,EAHkB,EAGlBA,mBACAwM,EAJkB,EAIlBA,iBACAT,EALkB,EAKlBA,iBAGID,EARc,EAMlB/B,WAEkCyC,GAC9BP,EAAmB,EAAKpC,oBAAoBkC,GAMlD,GAJAX,OAAOqB,oBAAoB,YAAa,EAAKnB,iBAC7CF,OAAOqB,oBAAoB,UAAW,EAAKlB,eAGvCQ,EAAmB,EACrB,EAAKhc,SAAS,CACZyb,UAAW,EACXE,UAAW,EACXQ,WAAY,EACZC,WAAY,EACZC,YAAY,QAGT,CAAC,IAEEM,EAAsB,EAAKhe,MAA3Bge,kBAER,GAAIT,EAAkB,CACpB,IAAMU,EAAUV,EAAiBnB,KAAOgB,EAAiBhB,KACnD8B,EAAUX,EAAiBlB,IAAMe,EAAiBf,IAElD8B,GAAmB,GAAKF,EAAU,EAAK9d,MAAMqd,YAC7CY,GAAkB,GAAKF,EAAU,EAAK/d,MAAMsd,YAElD,EAAKpc,SAAS,CACZyb,UAAW,EACXE,UAAW,EACXQ,WAAYW,EACZV,WAAYW,IAIhB,IAAMvc,EAAYC,YAAW,WAC3B,EAAKT,SAAS,CACZmc,WAAY,EACZC,WAAY,EACZC,YAAY,IAEd,EAAKpC,mBACLrZ,aAAaJ,KA3CH,IA8CZmc,EAAkBF,EAAkBT,GAGtC/L,EAAmB,CACjBuM,gBAAgB,IAGlB,IAAMhc,EAAYC,YAAW,WAC3BwP,EAAmB,CACjBwM,kBAAmB,EACnBT,kBAAmB,IAErBpb,aAAaJ,KA1DD,KA1KG,EA0OnBwc,eAAiB,SAAC1O,GAAS,IAAD,EAKpB,EAAKxP,MAHPme,EAFsB,EAEtBA,mBACAC,EAHsB,EAGtBA,mBACAC,EAJsB,EAItBA,oBAIU,UAAR7O,IAFmB2O,GAAsBC,GAAsBC,IAE5B,EAAKC,oBAlP3B,EAqPnBC,mBAAqB,WAAO,IAClBpN,EAAuB,EAAKtR,MAA5BsR,mBACgB,EAAKnR,MAArBiT,cAEN,EAAK/R,SAAS,CAAE+R,aAAa,IAC7B9B,EAAmB,CAAEiE,sBAAsB,MA1P5B,EA8PnBoJ,qBAAuB,SAACnb,GACtB,EAAKnC,SAAS,CACZoQ,SAAUjO,EACV6M,eAAgB7M,EAAMmC,OACtByL,gBAAiB1L,EAAiBlC,MAlQnB,EAsQnBqD,iBAAmB,SAACN,EAASC,EAASM,EAAOnC,GAC3C,IAAMmJ,EAASjH,EAAiBN,EAASC,EAASM,EAAOnC,GAEzD,GAAa,SAATA,GACF,GAAc,YAAVmC,EAAqB,CAAC,IAEtBE,EACE8G,EADF9G,YAAaD,EACX+G,EADW/G,cAAeE,EAC1B6G,EAD0B7G,mBAAoBC,EAC9C4G,EAD8C5G,gBAElD,EAAK7F,SAAS,CACZ2F,cAAaD,gBAAeE,qBAAoBC,yBAE7C,GAAc,YAAVJ,EAAqB,CAAC,IAE7BK,EACE2G,EADF3G,YAAaJ,EACX+G,EADW/G,cAAeE,EAC1B6G,EAD0B7G,mBAAoBC,EAC9C4G,EAD8C5G,gBAElD,EAAK7F,SAAS,CACZ8F,cAAaJ,gBAAeE,qBAAoBC,0BAG/C,GAAa,UAATvC,EACT,GAAc,YAAVmC,EAAqB,CAAC,IAEtBO,EACEyG,EADFzG,aAAcD,EACZ0G,EADY1G,eAAgBE,EAC5BwG,EAD4BxG,oBAAqBC,EACjDuG,EADiDvG,iBAErD,EAAKlG,SAAS,CACZgG,eAAcD,iBAAgBE,sBAAqBC,0BAEhD,GAAc,YAAVT,EAAqB,CAAC,IAE7BU,EACEsG,EADFtG,aAAcJ,EACZ0G,EADY1G,eAAgBE,EAC5BwG,EAD4BxG,oBAAqBC,EACjDuG,EADiDvG,iBAErD,EAAKlG,SAAS,CACZmG,eAAcJ,iBAAgBE,sBAAqBC,uBAtSxC,EA6SnBqX,eAAiB,SAACjV,GACQ,EAAKxJ,MAArBiT,aAEN,EAAK/R,SAAL,2BAAsBsI,EAAtB,aAAwC,KAhTzB,EAoTnB8U,iBAAmB,WAAO,IAAD,EAUnB,EAAKte,MARPsR,EAFqB,EAErBA,SACA1K,EAHqB,EAGrBA,cACAK,EAJqB,EAIrBA,eACAH,EALqB,EAKrBA,mBACAK,EANqB,EAMrBA,oBACA8J,EAPqB,EAOrBA,gBACAlK,EARqB,EAQrBA,gBACAK,EATqB,EASrBA,iBAGM/E,EAAO,EAAKxC,MAAM6e,KAAlBrc,GACA+O,EAAe,EAAKvR,MAApBuR,WAbe,cAcctK,EAdd,GAcfD,EAde,KAcFG,EAdE,mBAegBG,EAfhB,GAefD,EAfe,KAeDG,EAfC,KAiBnB4J,GAAmBlK,GAAmBK,IACxC,EAAKlG,SAAS,CACZid,oBAAoB,EACpBC,oBAAoB,EACpBC,qBAAqB,EACrBxX,cACAG,cACAE,eACAG,iBAcF+J,EAZmB,CACjBE,WACAzK,cACAG,cACAE,eACAG,eACAT,gBACAK,iBACAH,qBACAK,sBACA9E,MAEqB,UA3VR,EA+VnBkX,sBAAwB,WACtB,EAAKrY,UAAS,SAAAC,GAAS,MAAK,CAC1BoU,oBAAqBpU,EAAUoU,wBAjWhB,EAqWnBoJ,iBAAmB,WAAO,IAChBtc,EAAO,EAAKxC,MAAM6e,KAAlBrc,IAERgW,EADyB,EAAKxY,MAAtBwY,cACKhW,IAxWI,EA2WnBuc,kBAAoB,WAClB,EAAK1d,SAAS,CACZgY,mBAAmB,EACnBG,gBAAgB,KA5WlB,EAAKgC,KAAOwD,IAAMC,YAClB,EAAKC,eAAiB,IAHL,MAUb,EAAKlf,MAAM6e,KALbpN,EALe,EAKfA,SACA1K,EANe,EAMfA,cACAK,EAPe,EAOfA,eACAH,EARe,EAQfA,mBACAK,EATe,EASfA,oBATe,cAYkBL,EAZlB,GAYVD,EAZU,KAYGG,EAZH,mBAaoBG,EAbpB,GAaVD,EAbU,KAaIG,EAbJ,YAejB,EAAKrH,MAAQ,CACXud,YAAY,EACZtK,aAAa,EACbgG,kBAAkB,EAClBC,mBAAmB,EACnB6B,eAAe,EAEf1B,gBAAgB,EAChBD,gBAAgB,EAChB7B,kBAAkB,EAClBC,mBAAmB,EACnBjC,oBAAoB,EACpBoH,UAAW,EACXE,UAAW,EACXQ,WAAY,EACZC,WAAY,EACZhM,WACApB,eAAgBoB,EAAS9L,OACzBqB,cACAG,cACAE,eACAG,eACAT,gBACAK,iBACAH,qBACAK,sBACAgX,oBAAoB,EACpBC,oBAAoB,EACpBC,qBAAqB,EACrBpN,iBAAiB,EACjBlK,iBAAiB,EACjBK,kBAAkB,GA9CH,E,oFA4DjBmV,OAAOqB,oBAAoB,YAAahc,KAAK6a,iBAC7CF,OAAOqB,oBAAoB,UAAWhc,KAAK8a,eAC3C5a,aAAaF,KAAKF,a,+BAoTV,IAAD,SAYHE,KAAK/B,MATCwC,EAHH,EAGLqc,KAAQrc,GACR4Y,EAJK,EAILA,UACAyC,EALK,EAKLA,eACAC,EANK,EAMLA,iBACAT,EAPK,EAOLA,iBACAM,EARK,EAQLA,eACAC,EATK,EASLA,eACAtM,EAVK,EAULA,mBACAuI,EAXK,EAWLA,aAXK,EAsCH9X,KAAK5B,MAtBPud,EAhBK,EAgBLA,WACAF,EAjBK,EAiBLA,WACAC,EAlBK,EAkBLA,WACArK,EAnBK,EAmBLA,YACA8H,EApBK,EAoBLA,cACA3B,EArBK,EAqBLA,eACA7B,EAtBK,EAsBLA,iBACA0B,EAvBK,EAuBLA,iBACAC,EAxBK,EAwBLA,kBACA3D,EAzBK,EAyBLA,mBACAjE,EA1BK,EA0BLA,SACApB,EA3BK,EA2BLA,eACArJ,EA5BK,EA4BLA,YACAG,EA7BK,EA6BLA,YACAE,EA9BK,EA8BLA,aACAG,EA/BK,EA+BLA,aACA8W,EAhCK,EAgCLA,mBACAC,EAjCK,EAiCLA,mBACAC,EAlCK,EAkCLA,oBACApN,EAnCK,EAmCLA,gBACAlK,EApCK,EAoCLA,gBACAK,EArCK,EAqCLA,iBAGIuN,EAAiBwJ,GACpBC,GACAC,EACGzJ,GAAgB3D,IAClBlK,IACAK,EACEyN,EAAmBoE,GAAoBC,EACvC8F,EAAmBZ,GACtBC,GACAxJ,EACGoK,EAAmBd,GACtBE,GACAxJ,EACGqK,EAAoBf,GACvBC,GACAvJ,EAEGsK,EAAYlE,IAAciC,GAAoBQ,EAChD,CAAExb,UAAU,aAAD,OAAesb,EAAf,eAAoCC,EAApC,QACX,CAAEvb,UAAU,aAAD,OAAemb,EAAf,eAAgCC,EAAhC,QAET8B,EAAYpd,IAAW,OAAQ,CACnC,gBAAiBub,EACjB,gBAAiBtC,IAAciC,GAAoBQ,EACnD,qBAAsBH,GACrBtC,IAAc0C,IAA0C,IAAtBT,IAG/BmC,EAAYrd,IAAW,OAAQ,CACnC,gBAAiB+Y,EACjB,kBAAmB9H,EACnB,iBAAkB0B,EAClB,mBAAoB4C,GAAoB6B,EACxC,iBAAkBH,GAAoB8B,EACtC,kBAAmB7B,GAAqB6B,IAGpCuE,EAAmBtd,IAAW,oBAAqB,CACvD,+BAAgCiR,EAChC,8BAA+B0B,GAAkBE,IAGnD,OACE,yBACE1S,UAAWid,EACXrc,MAAOoc,EACP9J,YAAazT,KAAKua,eAClBoD,IAAK3d,KAAKyZ,MAEV,yBACElZ,UAAWkd,EACXtc,MAAOsC,EACPJ,QAASrD,KAAK2c,oBAGd,kBAAC,EAAD,CACEvL,OAAQ1B,EACRxB,QAASmB,EACTgC,YAAaA,EACb/C,eAAgBA,EAChBxM,WAAYsb,EACZvS,WAAY0R,EACZjL,iBAAkB,kBAAM,EAAKuL,eAAe,aAC5CtO,iBAAkBvO,KAAK4c,uBAIzB,kBAAC,EAAD,CACEnc,GAAIA,EACJ+R,UAAU,YACVrE,SAAS,WACTkD,YAAaA,EACb7M,QAASS,EACTR,QAASW,EACT8I,QAAS/I,EACTrD,WAAYub,EACZ/L,iBAAkB,kBAAM,EAAKuL,eAAe,aAC5ChS,WAAY2R,EACZ/J,eAAgBM,EAChBL,WAAY1S,KAAKsc,eACjB9N,gBAAiB,SAAC/M,GAAD,OACf,EAAKqD,iBAAiBrD,EAAO2D,EAAa,UAAW,SACvDqJ,gBAAiB,SAAChN,GAAD,OACf,EAAKqD,iBAAiBG,EAAaxD,EAAO,UAAW,WAIzD,kBAAC,EAAD,CACEhB,GAAIA,EACJ+R,UAAU,aACVrE,SAAS,YACTkD,YAAaA,EACb7M,QAASc,EACTb,QAASgB,EACTyI,QAAS1I,EACT1D,WAAYwb,EACZhM,iBAAkB,kBAAM,EAAKuL,eAAe,cAC5ChS,WAAY4R,EACZhK,eAAgBM,EAChBL,WAAY1S,KAAKsc,eACjB9N,gBAAiB,SAAC/M,GAAD,OACf,EAAKqD,iBAAiBrD,EAAOgE,EAAc,UAAW,UACxDgJ,gBAAiB,SAAChN,GAAD,OACf,EAAKqD,iBAAiBQ,EAAc7D,EAAO,UAAW,YAI1D,kBAAC,EAAD,CACE4P,YAAaA,EACb0B,eAAgBA,EAChBC,aAAcA,EACdC,iBAAkBA,EAClBC,oBAAqBlT,KAAK0c,iBAC1BvJ,oBAAqBnT,KAAK2X,sBAC1BvE,kBAAmBpT,KAAK8L,kBACxByD,mBAAoBA,EACpB8D,OAAQrT,KAAKwa,kBAIf,4BACEja,UAAWmd,EACX3a,SAAUgQ,GAAkBE,EAC5B5P,QAASrD,KAAKgd,mBAEd,yBAAKzc,UAAU,YAAYC,QAAQ,eACjC,yBAAK8C,KAAI,UAAKC,IAAL,aAMXvD,KAAK5B,MAAMqZ,eACT,kBAAC,EAAD,CACErZ,MAAO4B,KAAK5B,MACZqC,GAAIA,EACJgW,aAAczW,KAAK+c,iBACnB9J,iBAAkBA,EAClB6C,kBAAmB9V,KAAK8L,kBACxBgM,aAAcA,IAEhB,yBAAKvX,UAAU,UAInB,kBAAC,EAAD,CACEsB,UAAU,0CACV8R,mBAAoBA,EACpBC,aAAc5T,KAAK2X,sBACnB9D,cAAe,SAACpT,GAAD,OAAQ,EAAKsc,iBAAiBtc,Y,GAhjBtCW,cCiBJwc,G,MAzBS,SAAC3f,GAAW,IAE1B4f,EAAuD5f,EAAvD4f,iBAAkBvE,EAAqCrb,EAArCqb,WAAY9F,EAAyBvV,EAAzBuV,qBAChCpF,EAAckL,EAAWuE,GAC3BC,EAAmB,GAEnB1P,IAEF0P,EAAmB,CACjBxD,IAFmClM,EAA7BkM,IAGND,KAHmCjM,EAAxBiM,KAIX3Z,MAJmC0N,EAAlB1N,MAKjBC,OALmCyN,EAAXzN,SAS5B,IAAMod,EAAmB3d,IAAW,kBAAmB,CACrD,2BAA4BoT,IAG9B,OAEE,yBAAKjT,UAAWwd,EAAkB5c,MAAO2c,MCuK9BE,I,kBAvLb,WAAY/f,GAAQ,IAAD,8BACjB,4CAAMA,KAeR0I,kBAAoB,WAClBgU,OAAOC,iBAAiB,SAAU,EAAKqD,qBAjBtB,EAoBnBhP,qBAAuB,WACrB0L,OAAOqB,oBAAoB,SAAU,EAAKiC,qBArBzB,EAwBnBA,mBAAqB,WACnB,EAAK3e,SAAS,CACZkU,sBAAsB,KA1BP,EA8BnB1H,kBAAoB,SAACC,GAAD,OAAY,EAAKzM,SAASyM,IA9B3B,EAgCnBmS,cAAgB,SAACjb,GACf,EAAK3D,UAAS,SAAAC,GAAS,MAAK,CAC1BmN,kBAAmBnN,EAAUmN,sBAlCd,EAsCnByR,kBAAoB,YAAe,IAAbhb,EAAY,EAAZA,OAChB,qBAAqBa,KAAKb,EAAO5C,YAAY,EAAK2d,iBAvCrC,EA0CnBnB,iBAAmB,SAACtc,IAElBgW,EADyB,EAAKxY,MAAtBwY,cACKhW,GACb,EAAKnB,SAAS,CACZkU,sBAAsB,KA9CP,EAkDnB4K,oBAAsB,WACpB,EAAK9e,SAAS,CACZ8Q,kBAAkB,EAClBoD,sBAAsB,KAnDxB,EAAKpV,MAAQ,CACXgS,kBAAkB,EAClBoD,sBAAsB,EACtB9G,kBAAkB,EAElBoP,gBAAgB,EAChBxC,WAAY,GACZyC,kBAAmB,EACnBT,kBAAmB,EACnBM,eAAgB,EAChBC,eAAgB,GAZD,E,sEAyDT,IAAD,SAUH7b,KAAK/B,MARP4I,EAFK,EAELA,MACAmF,EAHK,EAGLA,aACAM,EAJK,EAILA,aACA2P,EALK,EAKLA,kBACA1P,EANK,EAMLA,aACAC,EAPK,EAOLA,aACAsL,EARK,EAQLA,aACAtI,EATK,EASLA,WATK,EAsBHxP,KAAK5B,MATPgS,EAbK,EAaLA,iBACA1D,EAdK,EAcLA,iBACA8G,EAfK,EAeLA,qBACAsI,EAhBK,EAgBLA,eACAR,EAjBK,EAiBLA,iBACAS,EAlBK,EAkBLA,iBACAH,EAnBK,EAmBLA,eACAC,EApBK,EAoBLA,eACAvC,EArBK,EAqBLA,WAGM9P,EAAU3C,EAAMmF,GAAhBxC,MAIF6U,EAAaje,IAAW,QAAS,CACrC,qBAAsBsM,IAGlB4R,EAAqBle,IAAW,uBAAwB,CAC5D,iCAAkCgQ,IAG9BmO,EAAwBne,IAAW,iBAAkB,CACzD,4BAA6BgQ,IAGzBoO,EAAiBpe,IAAW,cAAe,CAC/C,uBAAwBsM,IAK1B,OACE,6BAASnM,UAAW8d,GAClB,4BAAQ9d,UAAU,iBAGhB,wBAAIA,UAAWie,GAAf,OACM,0BAAMje,UAAU,sBAAhB,UAIN,4BAAQA,UAAU,gBAAgB8C,QAASrD,KAAKke,eAC9C,yBAAK3d,UAAU,mBAAmBC,QAAQ,eACxC,yBAAK8C,KAAI,UAAKC,IAAL,gBAMf,kBAAC,EAAD,CACEqD,MAAM,WACN8F,iBAAkBA,EAClB7F,MAAOA,EACPmF,aAAcA,EACdM,aAAcA,EACdC,aAAcA,EACdC,aAAcA,IAIfhD,EAAMtB,KAAI,SAAC4U,EAAMrP,GAAP,OACT,kBAAC,EAAD,CACEG,IAAG,eAAUkP,EAAKrc,IAClBqc,KAAMA,EACNzD,UAAW5L,EACXwO,kBAAmBA,EACnB1M,mBAAoB,EAAKzD,kBACzB2K,aAAc,EAAKsG,iBACnBjB,eAAgBA,EAChBR,iBAAkBA,EAClBS,iBAAkBA,EAClBH,eAAgBA,EAChBC,eAAgBA,EAChBvC,WAAYA,EACZxB,aAAcA,EACdtI,WAAYA,OAKfhG,EAAMtB,KAAI,SAAC4U,EAAMrP,GAAP,OACT,kBAAC,EAAD,CACEG,IAAG,sBAAiBH,GACpBoQ,iBAAkBpQ,EAClB6L,WAAYA,EACZ9F,qBAAsBA,OAK1B,6BAASjT,UAAWge,GAClB,4BACEhe,UAAW+d,EACXjb,QAASrD,KAAKoe,qBAFhB,gBAOEhO,EACE,kBAAC,EAAD,CACEnC,UAAWmC,EACXb,mBAAoBvP,KAAK8L,kBACzB0D,WAAYA,IAEd,yBAAKjP,UAAU,gB,GAjLTa,c,oBCaLqd,I,MAlBF,WACX,OACE,yBAAKle,UAAU,QACb,yBAAKA,UAAU,aAAaC,QAAQ,eAClC,yBAAK8C,KAAI,UAAKC,KAAL,gBAEX,yBAAKhD,UAAU,eAAeC,QAAQ,eACpC,yBAAK8C,KAAI,UAAKC,KAAL,kBAEX,yBAAKhD,UAAU,kCAAkCC,QAAQ,eACvD,yBAAK8C,KAAI,UAAKC,KAAL,sBAEX,yBAAKhD,UAAU,oCAAoCC,QAAQ,eACzD,yBAAK8C,KAAI,UAAKC,KAAL,2BCjBF,IACb,CACE,MAAS,QACT,SAAY,WACZ,KAAQ,CAAC,GAAG,EAAE,KAAK,GAAG,GACtB,YAAc,EACd,MAAS,CACP,cAAiB,IACjB,YAAe,EACf,aAAgB,EAChB,eAAkB,EAClB,YAAe,KACf,cAAiB,UACjB,eAAkB,WAEpB,MAAS,CACP,CACEmM,SAAU,mCACVzK,YAAa,GACbG,YAAa,EACbE,aAAc,EACdG,aAAc,EACdT,cAAe,KACfK,eAAgB,KAChBH,mBAAoB,CAAC,KAAK,KAAK,MAC/BK,oBAAqB,CAAC,KAAK,KAAK,MAChC9E,GAAI,YAEN,CACEiP,SAAU,oBACVzK,YAAa,EACbG,YAAa,GACbE,aAAc,EACdG,aAAc,EACdT,cAAe,KACfK,eAAgB,IAChBH,mBAAoB,CAAC,KAAK,KAAK,MAC/BK,oBAAqB,CAAC,KAAK,KAAK,MAChC9E,GAAI,YAEN,CACEiP,SAAU,8BACVzK,YAAa,EACbG,YAAa,GACbE,aAAc,EACdG,aAAc,GACdT,cAAe,KACfK,eAAgB,IAChBH,mBAAoB,CAAC,KAAK,KAAK,MAC/BK,oBAAqB,CAAC,KAAK,KAAK,MAChC9E,GAAI,YAEN,CACEiP,SAAU,0BACVzK,YAAa,GACbG,YAAa,EACbE,aAAc,GACdG,aAAc,EACdT,cAAe,KACfK,eAAgB,IAChBH,mBAAoB,CAAC,KAAK,KAAK,MAC/BK,oBAAqB,CAAC,KAAK,KAAK,MAChC9E,GAAI,YAEN,CACEiP,SAAU,gBACVzK,YAAa,EACbG,YAAa,EACbE,aAAc,EACdG,aAAc,EACdT,cAAe,IACfK,eAAgB,EAChBH,mBAAoB,CAAC,KAAK,KAAK,MAC/BK,oBAAqB,CAAC,KAAK,KAAK,MAChC9E,GAAI,cAIV,CACE,MAAS,SACT,SAAY,WACZ,KAAQ,CAAC,GAAG,GAAG,KAAK,GAAG,IACvB,YAAc,EACd,MAAS,CACP,cAAiB,KACjB,YAAe,EACf,aAAgB,EAChB,eAAkB,EAClB,YAAe,KACf,cAAiB,WACjB,eAAkB,WAEpB,MAAS,CACP,CACEiP,SAAU,2CACVzK,YAAa,KACbG,YAAa,KACbE,aAAc,IACdG,aAAc,GACdT,cAAe,MACfK,eAAgB,KAChBH,mBAAoB,CAAC,KAAM,KAAM,MACjCK,oBAAqB,CAAC,KAAM,KAAM,MAClC9E,GAAI,YAEN,CACEiP,SAAU,eACVzK,YAAa,KACbG,YAAa,KACbE,aAAc,KACdG,aAAc,KACdT,cAAe,KACfK,eAAgB,EAChBH,mBAAoB,CAAC,KAAM,KAAM,MACjCK,oBAAqB,CAAC,KAAM,KAAM,MAClC9E,GAAI,YAEN,CACEiP,SAAU,kDACVzK,YAAa,KACbG,YAAa,KACbE,aAAc,KACdG,aAAc,KACdT,cAAe,KACfK,eAAgB,KAChBH,mBAAoB,CAAC,KAAM,KAAM,MACjCK,oBAAqB,CAAC,KAAM,KAAM,MAClC9E,GAAI,YAEN,CACEiP,SAAU,gBACVzK,YAAa,KACbG,YAAa,GACbE,aAAc,IACdG,aAAc,GACdT,cAAe,IACfK,eAAgB,KAChBH,mBAAoB,CAAC,KAAM,KAAM,MACjCK,oBAAqB,CAAC,KAAM,KAAM,MAClC9E,GAAI,YAEN,CACEiP,SAAU,mCACVzK,YAAa,KACbG,YAAa,GACbE,aAAc,KACdG,aAAc,GACdT,cAAe,KACfK,eAAgB,KAChBH,mBAAoB,CAAC,KAAM,KAAM,MACjCK,oBAAqB,CAAC,KAAM,KAAM,MAClC9E,GAAI,cAIV,CACE,MAAS,YACT,SAAY,WACZ,KAAQ,CAAC,EAAE,EAAE,KAAK,GAAG,IACrB,YAAc,EACd,MAAS,CACP,cAAiB,GACjB,YAAe,EACf,aAAgB,EAChB,eAAkB,EAClB,YAAe,KACf,cAAiB,UACjB,eAAkB,UAEpB,MAAS,CACP,CACEiP,SAAU,qBACVzK,YAAa,KACbG,YAAa,GACbE,aAAc,IACdG,aAAc,GACdT,cAAe,KACfK,eAAgB,KAChBH,mBAAoB,CAAC,KAAM,KAAM,MACjCK,oBAAqB,CAAC,KAAM,KAAM,MAClC9E,GAAI,YAEN,CACEiP,SAAU,oBACVzK,YAAa,KACbG,YAAa,GACbE,aAAc,KACdG,aAAc,GACdT,cAAe,KACfK,eAAgB,IAChBH,mBAAoB,CAAC,KAAM,KAAM,MACjCK,oBAAqB,CAAC,KAAM,KAAM,MAClC9E,GAAI,YAEN,CACEiP,SAAU,iBACVzK,YAAa,KACbG,YAAa,GACbE,aAAc,IACdG,aAAc,GACdT,cAAe,IACfK,eAAgB,KAChBH,mBAAoB,CAAC,KAAM,KAAM,MACjCK,oBAAqB,CAAC,KAAM,KAAM,MAClC9E,GAAI,cAIV,CACE,MAAS,aACT,SAAY,WACZ,KAAQ,CAAC,GAAG,EAAE,KAAK,GAAG,IACtB,YAAc,EACd,MAAS,CACP,cAAiB,IACjB,YAAe,EACf,aAAgB,EAChB,eAAkB,EAClB,YAAe,KACf,cAAiB,UACjB,eAAkB,WAEpB,MAAS,CACP,CACEiP,SAAU,uCACVzK,YAAa,KACbG,YAAa,KACbE,aAAc,KACdG,aAAc,KACdT,cAAe,KACfK,eAAgB,KAChBH,mBAAoB,CAAC,KAAM,KAAM,MACjCK,oBAAqB,CAAC,KAAM,KAAM,MAClC9E,GAAI,YAEN,CACEiP,SAAU,kBACVzK,YAAa,KACbG,YAAa,KACbE,aAAc,KACdG,aAAc,KACdT,cAAe,KACfK,eAAgB,EAChBH,mBAAoB,CAAC,KAAM,KAAM,MACjCK,oBAAqB,CAAC,KAAM,MAC5B9E,GAAI,YAEN,CACEiP,SAAU,yBACVzK,YAAa,KACbG,YAAa,GACbE,aAAc,IACdG,aAAc,GACdT,cAAe,KACfK,eAAgB,IAChBH,mBAAoB,CAAC,KAAM,KAAM,MACjCK,oBAAqB,CAAC,KAAM,KAAM,MAClC9E,GAAI,YAEN,CACEiP,SAAU,qBACVzK,YAAa,KACbG,YAAa,GACbE,aAAc,IACdG,aAAc,GACdT,cAAe,KACfK,eAAgB,KAChBH,mBAAoB,CAAC,KAAM,KAAM,MACjCK,oBAAqB,CAAC,KAAM,KAAM,MAClC9E,GAAI,e,ukBCWGie,G,YA9Qb,WAAYzgB,GAAQ,IAAD,8BACjB,4CAAMA,KAcR0I,kBAAoB,WAElB,GAAIgY,aAAaC,QAAQ,kBAAmB,CAC1C,IAAMC,EAAiBC,KAAKC,MAAMJ,aAAaC,QAAQ,mBAEvD,EAAKtf,SAAS,CACZ0f,aAAa,EACbnY,MAAOgY,QAIJ,CAEL,IAAIhY,EAAQ,GAFP,uBAIL,YAAiBoY,GAAjB,+CAA+B,CAAC,IAAvB/X,EAAsB,UAKzBA,EAAKyF,MAHPG,EAF2B,EAE3BA,cACA9H,EAH2B,EAG3BA,cACAK,EAJ2B,EAI3BA,eAJ2B,cAQK6B,EAAKpB,KARV,GAQxBoZ,EARwB,KAQnBC,EARmB,KAQZC,EARY,KAQNC,EARM,KAQFC,EARE,KASvBxZ,EAAO,IAAIE,KAAKoZ,EAAMD,EAAOD,EAAKG,EAAIC,GACtCC,EAASzZ,EAAK0Z,UAEpBN,EAAMva,EAAcua,GACpBC,EAAQxa,EAAcwa,EAAQ,GAC9BE,EAAK1a,EAAc0a,GACnBC,EAAM3a,EAAc2a,GAEpB,IAAMhZ,EAAYT,EAAaC,GAC/B2Z,QAAQC,IAAI,YAAapZ,GACzB,IAAM2G,EAAiBnO,KAAKuW,MAAMvI,EAAgBxG,GAC5CyG,EAAcnI,EAAaI,EAAgB8H,GAC3CE,EAAepI,EAAaS,EAAiByH,GArBtB,cAsBAC,EAtBA,GAsBrB4S,EAtBqB,KAsBZC,EAtBY,mBAuBE5S,EAvBF,GAuBrB6S,EAvBqB,KAuBXC,EAvBW,KAwBvBC,EAAoB,UAAMJ,EAAN,gBAAqBC,EAArB,QACpBI,EAAqB,UAAMH,EAAN,gBAAsBC,EAAtB,QAE3B5Y,EAAKyF,MAAMM,eAAiBA,EAC5B/F,EAAKyF,MAAMK,aAAegT,EAC1B9Y,EAAKyF,MAAMI,YAAcgT,EACzB7Y,EAAKyF,MAAMO,YAAX,UAA4BgS,EAA5B,YAAmCC,EAAnC,YAA4CC,EAA5C,YAAoDC,EAApD,YAA0DC,GAC1DpY,EAAK+Y,UAAYna,EAEjBe,EAAK,MAAQA,EAAR,eAAgB0Y,EAASrY,KArC3B,kFAuCL,EAAK5H,SAAS,CAAE0f,aAAa,EAAMnY,UAErC,EAAKqZ,eAnEY,EAsEnBC,mBAAqB,WACnBV,QAAQC,IAAI,eACZ,EAAKQ,eAxEY,EA2EnBjR,qBAAuB,aA3EJ,EA8EnBnD,kBAAoB,SAACC,GAAD,OAAY,EAAKzM,SAASyM,IA9E3B,EAgFnBmU,YAAc,WAAO,IACXrZ,EAAU,EAAKzI,MAAfyI,MACR8X,aAAayB,QAAQ,iBAAkBtB,KAAKuB,UAAUxZ,KAlFrC,EAqFnByZ,gBAAkB,SAACpZ,EAAMqZ,GAAU,IACzB1Z,EAAU,EAAKzI,MAAfyI,MADwB,EAEPE,OACxByZ,QAAQ3Z,GACRI,MAAK,sDAA4BC,KAF1B8E,EAFwB,oBAMhC,EAAK1M,UAAS,SAAAC,GAAS,MAAK,CAC1BkhB,oBAAoB,EACpBC,gBAAgB,EAChB7Z,MAAgB,cAAT0Z,EAAuB,EAAKniB,MAAMyI,MAAlC,sBAA8CtH,EAAUsH,OAAxD,CAA+DK,IACtE8E,oBA/Fe,EAmGnB2U,iBAAmB,WAAO,IAAD,EACS,EAAKviB,MADd,EACfyI,MADe,EACRmF,cAEV7E,YAAa,EAElB,EAAK7H,UAAS,SAAAC,GAAS,MAAK,CAC1BsH,MAAM,GAAD,GAAOtH,EAAUsH,OACtBmF,aAAc,GACdyU,oBAAoB,EACpBC,gBAAgB,OA5GD,EAgHnBE,iBAAmB,WAAO,IAAD,EACS,EAAKxiB,aADd,EACfyI,MADe,EACRmF,cAGf,EAAK1M,UAAS,SAAAC,GAAS,MAAK,CAC1BsH,MAAM,GAAD,GAAOtH,EAAUsH,OACtB6Z,gBAAgB,EAChBD,oBAAoB,OAvHL,EA2HnB1D,iBAAmB,SAACtc,GAAQ,IAAD,EACO,EAAKrC,MAC/B8I,EAFmB,EACjBL,MADiB,EACVmF,cAEf9E,EAAKsC,MAAQtC,EAAKsC,MAAMqQ,QAAO,SAAAiD,GAAI,OAAIA,EAAKrc,KAAOA,KAEnD,EAAKnB,UAAS,SAAAC,GAAS,MAAK,CAC1BsH,MAAM,GAAD,GAAOtH,EAAUsH,YAjIP,EAqInBga,gBAAkB,SAACC,EAAWC,GAAe,IAAD,EACV,EAAK3iB,MAC/B8I,EAFoC,EAClCL,MADkC,EAC3BmF,cAEPxC,EAAUtC,EAAVsC,MACFwX,EAAY,YAAOxX,GACzBwX,EAAaC,OAAOH,EAAW,EAAGtX,EAAMuX,IACxCC,EAAaC,OAAOF,EAAW,EAAGvX,EAAMsX,IACxC5Z,EAAKsC,MAAQwX,EAEb,EAAK1hB,UAAS,SAAAC,GAAS,MAAK,CAC1BsH,MAAM,GAAD,GAAOtH,EAAUsH,YA/IP,EAmJnBqa,iBAAmB,SAACzf,EAAO0f,GAAU,IAAD,EACF,EAAK/iB,MADH,EAC1ByI,MAD0B,EACnBmF,cAEVmV,GAAQ1f,EAEb,EAAKnC,UAAS,SAAAC,GAAS,MAAK,CAC1BsH,MAAM,GAAD,GAAOtH,EAAUsH,YAzJP,EA6JnBua,iBAAmB,SAACC,GAAa,IAAD,EAEE,EAAKjjB,MAA7ByI,EAFsB,EAEtBA,MAAOmF,EAFe,EAEfA,aACP6L,EAAsCwJ,EAAtCxJ,gBAAiBlS,EAAqB0b,EAArB1b,iBACnBuB,EAAOL,EAAMmF,GAJW,EAU1B9E,EAAKyF,MAHPG,EAP4B,EAO5BA,cACA9H,EAR4B,EAQ5BA,cACAK,EAT4B,EAS5BA,eAGIiB,EAAYT,EAAaqB,EAAK+Y,WAC9BqB,EAAuBxU,EAAgB,EACvCyU,EAAuBvc,EAAgB6S,EACvC2J,EAAwBnc,EAAiBM,EACzCsH,EAAiBnO,KAAKuW,MAAMiM,EAAuBhb,GACnDyG,EAAcnI,EAAa2c,EAAuBD,GAClDtU,EAAepI,EAAa4c,EAAwBF,GAlB5B,cAmBDvU,EAnBC,GAmBtB4S,EAnBsB,KAmBbC,EAnBa,mBAoBC5S,EApBD,GAoBtB6S,EApBsB,KAoBZC,EApBY,KAqBxBC,EAAoB,UAAMJ,EAAN,gBAAqBC,EAArB,QACpBI,EAAqB,UAAMH,EAAN,gBAAsBC,EAAtB,QAE3B5Y,EAAKyF,MAAMG,cAAgBwU,EAC3Bpa,EAAKyF,MAAM3H,cAAgBuc,EAC3Bra,EAAKyF,MAAMtH,eAAiBmc,EAC5Bta,EAAKyF,MAAMI,YAAcgT,EACzB7Y,EAAKyF,MAAMK,aAAegT,EAC1B9Y,EAAKyF,MAAMM,eAAiBA,EAE5B,EAAK3N,UAAS,SAAAC,GAAS,MAAK,CAC1BsH,MAAM,GAAD,GAAOtH,EAAUsH,YA7LP,EAiMnB4a,eAAiB,SAAChS,EAASiS,GAAY,IAAD,EACJ,EAAKtjB,MAC/B8I,EAF8B,EAC5BL,MAD4B,EACrBmF,cAGf,GAAe,SAAX0V,EAAmB,CAAC,IACdjhB,EAAOgP,EAAPhP,GAEFkhB,EADWza,EAAKsC,MAAMtB,KAAI,SAAA4U,GAAI,OAAIA,EAAKrc,MAChBmhB,QAAQnhB,GAErCyG,EAAKsC,MAAL,sBACKtC,EAAKsC,MAAMqQ,QAAO,SAACiD,EAAM+E,GAAP,OAAe/E,EAAKrc,KAAOA,GAAMohB,EAAMF,MAD9D,CAEElS,GAFF,YAGKvI,EAAKsC,MAAMqQ,QAAO,SAACiD,EAAM+E,GAAP,OAAe/E,EAAKrc,KAAOA,GAAMohB,EAAMF,WAG1C,QAAXD,IACTxa,EAAKsC,MAAL,sBAAiBtC,EAAKsC,OAAtB,CAA6BiG,KAG/B,EAAKnQ,UAAS,SAAAC,GAAS,MAAK,CAC1BsH,MAAM,GAAD,GAAOtH,EAAUsH,YAnNxB,EAAKzI,MAAQ,CAEX4gB,aAAa,EACb7gB,gBAAgB,EAChBsiB,oBAAoB,EACpBC,gBAAgB,EAEhB7Z,MAAO,KACPmF,aAAc,GACdiU,UAAW,MAXI,E,sEAyNT,IAAD,EAQHjgB,KAAK5B,MANP4gB,EAFK,EAELA,YACA7gB,EAHK,EAGLA,eACAsiB,EAJK,EAILA,mBACAC,EALK,EAKLA,eACA7Z,EANK,EAMLA,MACAmF,EAPK,EAOLA,aAGF,OACE,kBAAC,IAAM8V,WAAP,KACE,yBAAKvhB,UAAU,OACb,wBAAIA,UAAU,+BAAd,kBAEEpC,EAEA,kBAAC,EAAD,CACEA,eAAgBA,EAChBuB,iBAAkBM,KAAK8L,oBAEvB,yBAAKvL,UAAU,UAGjBkgB,GAAsBzB,EACpB,kBAAC,EAAD,CACEnY,MAAOA,EACPwC,YAAarJ,KAAKsgB,kBAEpB,yBAAK/f,UAAU,UAGjBmgB,EAEA,kBAAC,GAAD,CACE7Z,MAAOA,EACPmF,aAAcA,EACdM,aAActM,KAAKkhB,iBACnB3U,aAAcvM,KAAK2gB,iBACnBnU,aAAcxM,KAAK4gB,iBACnBnK,aAAczW,KAAK+c,iBACnBd,kBAAmBjc,KAAK6gB,gBACxB/I,aAAc9X,KAAKohB,iBACnB5R,WAAYxP,KAAKyhB,iBAEjB,yBAAKlhB,UAAU,UAEnB,kBAAC,GAAD,Y,GAzQQa,aCGZ2gB,GAAcC,QACW,cAA7BrH,OAAOsH,SAASC,UAEe,UAA7BvH,OAAOsH,SAASC,UAEhBvH,OAAOsH,SAASC,SAASC,MACvB,2DAsCN,SAASC,GAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBzkB,QACfmkB,UAAUC,cAAcQ,YAI1BvD,QAAQC,IACN,iHAKE4C,GAAUA,EAAOW,UACnBX,EAAOW,SAASN,KAMlBlD,QAAQC,IAAI,sCAGR4C,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUP,WAO5BQ,OAAM,SAAAC,GACL3D,QAAQ2D,MAAM,4CAA6CA,MC1FjEC,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBlB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,cAAwB/I,OAAOsH,SAAS3e,MACpDqgB,SAAWhJ,OAAOsH,SAAS0B,OAIvC,OAGFhJ,OAAOC,iBAAiB,QAAQ,WAC9B,IAAMyH,EAAK,UAAMqB,cAAN,sBAEP3B,KAgEV,SAAiCM,EAAOC,GAEtCsB,MAAMvB,GACHK,MAAK,SAAAmB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYlC,QAAQ,cAG5CW,UAAUC,cAAc0B,MAAMxB,MAAK,SAAAC,GACjCA,EAAawB,aAAazB,MAAK,WAC7B/H,OAAOsH,SAASmC,eAKpBhC,GAAgBC,EAAOC,MAG1Ba,OAAM,WACL1D,QAAQC,IACN,oEArFA2E,CAAwBhC,EAAOC,GAI/BC,UAAUC,cAAc0B,MAAMxB,MAAK,WACjCjD,QAAQC,IACN,iHAMJ0C,GAAgBC,EAAOC,OC1C/BE,K","file":"static/js/main.e1e50a27.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icons.5e951e40.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.84c2435d.svg\";","import React, { Component } from 'react';\r\nimport classNames from 'classnames';\r\nimport '../scss/Intro.scss';\r\n\r\nclass Intro extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      totalTime: 5000,\r\n      timeInterval: 10,\r\n      maxDistance: 4,\r\n      elapsedDistance: 0,\r\n      elapsedAngle: 120,\r\n      elapsedTime: 0,\r\n      xTranslation: 0,\r\n      yTranslation: 0,\r\n      isIntroFadingOut: false\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { timeInterval } = this.state;\r\n    this.intervalId = setInterval(this.handleShadowPostion, timeInterval);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.intervalId);\r\n    clearTimeout(this.timeoutId);\r\n  }\r\n\r\n  handleShadowPostion = () => {\r\n    if (this.props.isIntroVisible) {\r\n      const {\r\n        totalTime,\r\n        timeInterval,\r\n        elapsedTime,\r\n        maxDistance,\r\n        elapsedDistance,\r\n        elapsedAngle\r\n      } = this.state;\r\n\r\n      const totalIntervals = totalTime / timeInterval;\r\n      const distanceIncrement = maxDistance / totalIntervals;\r\n      const factor = 3;\r\n      const easeOut = factor / Math.pow(factor, 2 * (elapsedTime / totalTime));\r\n      const angleIncrement = 360 / totalIntervals * easeOut;\r\n\r\n      const radians = elapsedAngle * (Math.PI / 180);\r\n      const x = Math.sin(radians) * (elapsedDistance);\r\n      const y = Math.cos(radians) * (elapsedDistance);\r\n\r\n      this.setState(prevState => ({\r\n        elapsedTime: elapsedTime + timeInterval,\r\n        elapsedDistance: prevState.elapsedDistance + distanceIncrement,\r\n        elapsedAngle: prevState.elapsedAngle - angleIncrement,\r\n        xTranslation: x,\r\n        yTranslation: y\r\n      }));\r\n\r\n      if ( this.state.elapsedTime >= this.state.totalTime ) {\r\n        const { onAppStateChange } = this.props;\r\n        \r\n        this.setState({ isIntroFadingOut: true });\r\n        clearInterval(this.intervalId);\r\n        this.timeoutId = setTimeout(() => {\r\n          onAppStateChange({ isIntroVisible: false });\r\n        }, 1000);\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { isIntroFadingOut, xTranslation, yTranslation } = this.state;\r\n\r\n    const introClass = classNames(\"Intro\", {\r\n      \"Intro--visible\": !isIntroFadingOut\r\n    });\r\n\r\n    const styleObject = {\r\n      transform: `\r\n        translate(${xTranslation}%, ${yTranslation}%)\r\n        rotate(0.01deg)\r\n      `\r\n    };\r\n\r\n    return (\r\n      <div className={introClass}>\r\n        <svg className=\"logo\" viewBox=\"0 0 600 600\">\r\n          {/* MASK */}\r\n          <mask id=\"mask\" className=\"logo__mask\">\r\n            <rect width=\"600\" height=\"600\" fill=\"#fff\"/>\r\n            <rect\r\n              x=\"200\"\r\n              y=\"50\"\r\n              width=\"200\"\r\n              height=\"35\"\r\n              rx=\"17.5\"\r\n              ry=\"17.5\"\r\n              fill=\"#000\"\r\n            />\r\n            <circle cx=\"300\" cy=\"300\" r=\"180\" fill=\"#000\"/>\r\n            <circle cx=\"300\" cy=\"300\" r=\"145\" fill=\"#fff\"/>\r\n            <rect\r\n              x=\"282.5\"\r\n              y=\"282.5\"\r\n              width=\"35\"\r\n              height=\"125\"\r\n              rx=\"17.5\"\r\n              ry=\"17.5\"\r\n              fill=\"#000\"\r\n              className=\"logo__clockHand\"\r\n            />\r\n          </mask>\r\n          {/* ELEMENTS */}\r\n          <rect width=\"600\" height=\"600\" className=\"logo__background\"/>\r\n          <rect\r\n            x=\"199\"\r\n            y=\"49\"\r\n            width=\"202\"\r\n            height=\"37\"\r\n            className=\"logo__letter logo__letter--top\"\r\n          />\r\n          <circle\r\n            cx=\"300\"\r\n            cy=\"300\"\r\n            r=\"140\"\r\n            className=\"logo__letter logo__letter--circle\"\r\n          />\r\n          <rect\r\n            width=\"600\"\r\n            height=\"600\"\r\n            className=\"logo__shadow\"\r\n            mask=\"url(#mask)\"\r\n            style={styleObject}\r\n          />\r\n          <rect\r\n            width=\"600\"\r\n            height=\"600\"\r\n            className=\"logo__foreground\"\r\n            mask=\"url(#mask)\"\r\n          />\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Intro;","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport icons from '../assets/svg/icons.svg';\r\nimport '../scss/UserInput.scss';\r\n\r\nconst UserInput = (props) => {\r\n  \r\n  const {\r\n    inputId,\r\n    inputName,\r\n    parentName,\r\n    value,\r\n    label,\r\n    isInputValid,\r\n    isAlertVisible,\r\n    alertText,\r\n    isDisabled,\r\n    isPreviewMode,\r\n    onPreviewModeChange,\r\n    onInputBlur,\r\n    onInputChange\r\n  } = props;\r\n\r\n  const handleInputBlur = (value) => {\r\n    if (!isInputValid) onInputBlur(value, inputName);\r\n  }\r\n\r\n  // #region [ Horizon ] CLASS NAMES\r\n\r\n  const userInputClass = `\r\n    UserInput UserInput--${parentName} UserInput--${inputName}\r\n  `;\r\n\r\n  const labelClass = classNames(\r\n    'UserInput__label',\r\n    `UserInput__label--${parentName}`, {\r\n    'UserInput__label--disabled': isDisabled\r\n  });\r\n\r\n  const inputClass = classNames(\r\n    'UserInput__input',\r\n    `UserInput__input--${parentName}`, {\r\n    'UserInput__input--disabled': isDisabled\r\n  });\r\n\r\n  const inputType = inputName === 'login'\r\n  ? 'text'\r\n  : isPreviewMode ? 'text' : 'password'\r\n\r\n  const alertBoxClass = classNames(\r\n    'UserInput__alertBox',\r\n    `UserInput__alertBox--${parentName}`, {\r\n    'UserInput__alertBox--visible': isAlertVisible\r\n  });\r\n\r\n  const passedClass = classNames(\r\n    'inputPassed',\r\n    `inputPassed--${parentName}`, {\r\n    'inputPassed--visible': isInputValid\r\n  });\r\n\r\n  const previewClass = classNames(\r\n    'previewPassword',\r\n    `previewPassword--${parentName}`, {\r\n    'previewPassword--active': isPreviewMode,\r\n    'previewPassword--disabled': isDisabled\r\n  });\r\n\r\n  // #endregion\r\n  \r\n  return (\r\n    <div className={userInputClass}>\r\n      {/* LABEL */}\r\n      <label htmlFor={inputId} className={labelClass}>\r\n        {label}\r\n      </label>\r\n\r\n      {/* INPUT */}\r\n      <input\r\n        id={inputId}\r\n        name={inputId}\r\n        value={value}\r\n        type={inputType}\r\n        className={inputClass}\r\n        spellCheck=\"false\"\r\n        maxLength=\"20\"\r\n        disabled={isDisabled}\r\n        onBlur={(e) => handleInputBlur(e.target.value)}\r\n        onChange={(e) => onInputChange(e.target.value)}\r\n      />\r\n\r\n      {/* ALERT */}\r\n      <div className={alertBoxClass}>\r\n        <p className=\"UserInput__alert\">{alertText}</p>\r\n      </div>\r\n\r\n      {/* INDICATORS */}\r\n      <div className=\"UserInput__icons\">\r\n        {/* PREVIEW PASSWORD */}\r\n        {\r\n        inputName === 'login'\r\n        ? <div className=\"empty\"></div>\r\n        : <button\r\n            type=\"button\"\r\n            className={previewClass}\r\n            onClick={() => onPreviewModeChange(inputName)}\r\n          >\r\n            <svg className=\"previewPassword__svg\" viewBox=\"0 0 100 100\">\r\n              <use href={`${icons}#preview`} />\r\n            </svg>\r\n          </button>\r\n        }\r\n        {/* INPUT CORRECT BADGE */}\r\n        {\r\n        (parentName === 'loginForm' && inputName === 'password') ||\r\n        (parentName === 'userEdit' && inputName === 'oldPassword')\r\n        ? <div className=\"empty\"></div>\r\n        : <div className={passedClass}>\r\n            <svg className=\"inputPassed__svg\" viewBox=\"0 0 100 100\">\r\n              <use href={`${icons}#passed`} />\r\n            </svg>\r\n          </div>\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default UserInput;","export const cardFlipTime = 200;\r\nexport const maxTaskNameLength = 80;\r\n\r\nexport const animationStyle = {\r\n  animationDuration: `${cardFlipTime}ms`\r\n}","import { maxTaskNameLength } from './globalVariables';\r\n\r\nexport const validateTaskName = (name) => name.length > 0 ? true : false;\r\nexport const validateTaskTime = (time, total) => /^\\d*$/.test(time) && total > 0;\r\nexport const validateBreakTime = (time) => /^\\d*$/.test(time);\r\n\r\nexport const getCapitalized = (string) => {\r\n  return string.charAt(0).toUpperCase() + string.substring(1);\r\n}\r\n\r\nconst getTotalTime = (minutes, seconds) => {\r\n  minutes = !minutes ? 0 : parseInt(minutes);\r\n  seconds = !seconds ? 0 : parseInt(seconds);\r\n  return (minutes * 60000) + (seconds * 1000);\r\n}\r\n\r\nexport const makeTwoDigits = (value) => value < 10 ? `0${value}` : `${value}`;\r\n\r\n\r\nexport const getNumFromRange = (value, operation, lowerLimit, upperLimit) => {\r\n  const newValue = operation === \"increase\"\r\n  ? parseInt(value) + 1 : parseInt(value) - 1;\r\n\r\n  return newValue >= lowerLimit && newValue <= upperLimit\r\n  ? makeTwoDigits(newValue)\r\n  : newValue < lowerLimit\r\n    ? makeTwoDigits(lowerLimit)\r\n    : makeTwoDigits(upperLimit);\r\n}\r\n\r\nexport const getTimeArray = (time) => {\r\n  return [\r\n    makeTwoDigits(Math.floor(time / 60000)),\r\n    makeTwoDigits(Math.floor(time / 1000 % 60)),\r\n    makeTwoDigits(Math.floor(time / 10 % 100))\r\n  ]\r\n}\r\n\r\nexport const handleTimeChange = (minutes, seconds, units, type) => {\r\n  \r\n  if (type === 'task') {\r\n    const totalTaskTime = getTotalTime(minutes, seconds);\r\n    if (units === 'minutes') {\r\n      return {\r\n        taskMinutes: minutes,\r\n        totalTaskTime,\r\n        totalTaskTimeArray: getTimeArray(totalTaskTime),\r\n        isTaskTimeValid: validateTaskTime(minutes, totalTaskTime)\r\n      };\r\n    } else if (units === 'seconds') {\r\n      return {\r\n        taskSeconds: seconds,\r\n        totalTaskTime,\r\n        totalTaskTimeArray: getTimeArray(totalTaskTime),\r\n        isTaskTimeValid: validateTaskTime(seconds, totalTaskTime)\r\n      };\r\n    }\r\n  } else if (type === 'break') {\r\n    const totalBreakTime = getTotalTime(minutes, seconds);\r\n    if (units === 'minutes') {\r\n      return {\r\n        breakMinutes: minutes,\r\n        totalBreakTime,\r\n        totalBreakTimeArray: getTimeArray(totalBreakTime),\r\n        isBreakTimeValid: validateBreakTime(minutes)\r\n      };\r\n    } else if (units === 'seconds') {\r\n      return {\r\n        breakSeconds: seconds,\r\n        totalBreakTime,\r\n        totalBreakTimeArray: getTimeArray(totalBreakTime),\r\n        isBreakTimeValid: validateBreakTime(seconds)\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport const formatTimeResult = ([minutes, seconds], elapsedBreakTime) => {\r\n  minutes = parseInt(minutes);\r\n  seconds = parseInt(seconds);\r\n  return `\r\n    ${ minutes > 1\r\n    ? ` ${minutes} minutes` : minutes === 1\r\n    ? ` ${minutes} minute` : \"\" }\r\n    ${ minutes > 0 && (elapsedBreakTime ? elapsedBreakTime !== 0 : seconds !== 0)\r\n    ? \"and\" : \"\" }\r\n    ${ seconds > 1\r\n    ? ` ${seconds} seconds` : seconds === 1\r\n    ? ` ${seconds} second` : elapsedBreakTime && elapsedBreakTime !== 0\r\n    ? \" a split second\" : \"\" }\r\n  `;\r\n}\r\n\r\nexport const taskNameProgressStyle = (length) => {\r\n  return { width: `${length / maxTaskNameLength * 100}%` };\r\n};\r\n\r\nexport const breaksAmount = (totalBreaks) => `${totalBreaks}\r\n${totalBreaks === 1 ? \"break\" : \"breaks\"} used\r\n`;\r\n\r\nexport const getTotalDays = (date) => {\r\n  \r\n  const getDateString = (date) => new Date(date).toISOString().slice(0,10);\r\n  \r\n  const currentDate = new Date();\r\n  let currentDateStr = getDateString(currentDate);\r\n  const startDateStr = getDateString(date);\r\n  let totalDays = 1;\r\n  let limit = 200;\r\n\r\n  while (startDateStr !== currentDateStr && limit > 0) {\r\n    currentDate.setDate(currentDate.getDate() - 1);\r\n    currentDateStr = getDateString(new Date(currentDate));\r\n    totalDays++;\r\n    limit--;\r\n  }\r\n  return totalDays;\r\n}","import React, { Component } from 'react';\r\nimport classNames from 'classnames';\r\nimport UserInput from './UserInput';\r\nimport icons from '../assets/svg/icons.svg';\r\nimport { getCapitalized } from '../lib/handlers.js';\r\nimport '../scss/UserForm.scss';\r\n\r\nclass UserForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      rememberMe: false,\r\n      // login\r\n      login: '',\r\n      isLoginValid: false,\r\n      isLoginAlertVisible: false,\r\n      loginAlertText: 'Please enter your login',\r\n      // password\r\n      password: '',\r\n      isPasswordValid: false,\r\n      isPasswordAlertVisible: false,\r\n      passwordAlertText: 'Please enter your password',\r\n      isPasswordPreviewMode: false,\r\n      // password confirm\r\n      confirm: '',\r\n      isConfirmValid: false,\r\n      isConfirmAlertVisible: false,\r\n      confirmAlertText: 'Please confirm your password',\r\n      isConfirmPreviewMode: false,\r\n      isConfirmDisabled: true\r\n    }\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    const { block, users } = this.props;\r\n    const rememberedUser = Object.values(users).find(user => user.rememberMe);\r\n\r\n    if (block === 'loginForm') {\r\n      if (rememberedUser) {\r\n\r\n        const { login, password } = rememberedUser;\r\n\r\n        this.setState({\r\n          login,\r\n          isLoginValid: true,\r\n          password,\r\n          isPasswordValid: true,\r\n          rememberMe: true\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  handleCardToggle = () => {\r\n    const { onCardToggle } = this.props;\r\n    onCardToggle();\r\n    this.handleFormReset();\r\n  }\r\n\r\n  handleAlert = (value, input) => {\r\n    const inputName = getCapitalized(input);\r\n    const alertText = this.getInputAlert(value, input);\r\n\r\n    this.setState({\r\n      [`is${inputName}AlertVisible`]: true,\r\n      [`${input}AlertText`]: alertText\r\n    });    \r\n  }\r\n\r\n  getInputAlert = (value, input) => {\r\n\r\n    const { password } = this.state;\r\n    const isEmpty = value === '';\r\n    const doesContainWhiteSpaces = /\\s/g.test(value);\r\n    const isPasswordTooShort = value.length < 6;\r\n    \r\n    switch (input) {\r\n  \r\n      case 'login':\r\n\r\n        const { block, users } = this.props;\r\n\r\n        const doesLoginExist = Object.values(users)\r\n        .map(user => user.login)\r\n        .find(login => login === value);\r\n\r\n        const isLoginIncorrect = block === 'loginForm' && !doesLoginExist;\r\n        const isNewLoginIncorrect = (block === 'signupForm' || block === 'userEdit')\r\n        && doesLoginExist;\r\n\r\n        return isEmpty\r\n        ? 'Please enter your login' : isLoginIncorrect\r\n        ? 'There is no user with this login' : isNewLoginIncorrect\r\n        ? 'This login already exist. Try another one' : false;  \r\n  \r\n      case 'password':\r\n\r\n        return isEmpty\r\n        ? 'Please enter your password' : doesContainWhiteSpaces\r\n        ? 'Password cannot contain any spaces' : isPasswordTooShort\r\n        ? 'Password should have at least 6 characters' : false;\r\n\r\n  \r\n      case 'confirm':\r\n        const doPasswordsMatch = password === value;\r\n\r\n        return isEmpty\r\n        ? 'Please confirm your password' : !doPasswordsMatch\r\n        ? 'Passwords do not match!' : false;\r\n  \r\n      default: return false;\r\n    }\r\n  }\r\n\r\n  handleLoginValidation = (value) => {\r\n    const isInvalid = this.getInputAlert(value, 'login') ? true : false;\r\n    \r\n    this.setState({\r\n      login: value,\r\n      isLoginValid: !isInvalid,\r\n      isLoginAlertVisible: false\r\n    });\r\n  }\r\n\r\n  handlePasswordValidation = (value) => {\r\n    const isInvalid = this.getInputAlert(value, 'password') ? true : false;\r\n\r\n    this.setState({\r\n      password: value,\r\n      isPasswordValid: !isInvalid,\r\n      isPasswordAlertVisible: false,\r\n      isPasswordPreviewed: false,\r\n\r\n      confirm: '',\r\n      isConfirmValid: false,\r\n      isConfirmAlertVisible: false,\r\n      isConfirmPreviewMode: false,\r\n      isConfirmDisabled: isInvalid\r\n    });\r\n  }\r\n\r\n  handleConfirmValidation = (value) => {\r\n    const isInvalid = this.getInputAlert(value, 'confirm') ? true : false;\r\n\r\n    this.setState({\r\n      confirm: value,\r\n      isConfirmValid: !isInvalid,\r\n      isConfirmAlertVisible: false,\r\n      isConfirmPreviewed: false\r\n    });\r\n  }\r\n\r\n  handlePasswordPreview = (input) => {\r\n    const inputName = getCapitalized(input);\r\n\r\n    this.setState(prevState => ({\r\n      [`is${inputName}PreviewMode`]: !prevState[`is${inputName}PreviewMode`]\r\n    }));\r\n  }\r\n\r\n  handleRememberMe = () => {\r\n    this.setState(prevState => ({ rememberMe: !prevState.rememberMe }));\r\n  }\r\n\r\n  handleFormReset = () => {\r\n    this.setState({\r\n      rememberMe: false,\r\n      login: '',\r\n      isLoginValid: false,\r\n      isLoginAlertVisible: false,\r\n      password: '',\r\n      isPasswordValid: false,\r\n      isPasswordAlertVisible: false,\r\n      isPasswordPreviewMode: false,\r\n      confirm: '',\r\n      isConfirmValid: false,\r\n      isConfirmAlertVisible: false,\r\n      isConfirmPreviewMode: false,\r\n      isConfirmDisabled: true\r\n    });\r\n  }\r\n\r\n  handleFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { block, users, onUserLogin } = this.props;\r\n    const {\r\n      login,\r\n      password,\r\n      isLoginValid,\r\n      isPasswordValid,\r\n      isConfirmValid,\r\n      rememberMe\r\n    } = this.state;\r\n\r\n    const user = Object.values(users).find(user => user.login === login);\r\n\r\n    const isLoginPasswordCorrect = block === 'loginForm'\r\n    && isLoginValid\r\n    && user.password === password;\r\n    \r\n    if (block === 'loginForm') {\r\n\r\n      if (isLoginPasswordCorrect) {\r\n        user.rememberMe = rememberMe;\r\n        onUserLogin(user, block);\r\n        this.handleFormReset();\r\n        \r\n      } else {\r\n        this.setState({\r\n          password: '',\r\n          isPasswordValid: false,\r\n          isPasswordAlertVisible: true,\r\n          passwordAlertText: 'Password is wrong!',\r\n          isPasswordPreviewMode: false\r\n        });\r\n      }\r\n\r\n    } else if (block === 'signupForm') {\r\n\r\n      if (isLoginValid && isPasswordValid && isConfirmValid) {\r\n        const newUser = {\r\n          login,\r\n          password,\r\n          rememberMe,\r\n          tasks: []\r\n        }\r\n\r\n        onUserLogin(newUser, block);\r\n        this.handleFormReset();\r\n\r\n      } else return;\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    const { className, block } = this.props;\r\n\r\n    const {\r\n      rememberMe,\r\n      login,\r\n      isLoginValid,\r\n      isLoginAlertVisible,\r\n      loginAlertText,\r\n      password,\r\n      isPasswordValid,\r\n      isPasswordAlertVisible,\r\n      passwordAlertText,\r\n      isPasswordPreviewMode,\r\n      confirm,\r\n      isConfirmValid,\r\n      isConfirmAlertVisible,\r\n      confirmAlertText,\r\n      isConfirmPreviewMode,\r\n      isConfirmDisabled\r\n    } = this.state;\r\n\r\n    const isLoginForm = block === 'loginForm';\r\n    const title = isLoginForm ? 'Log In' : 'Sign Up';\r\n    const loginButtonName = isLoginForm ? 'Log In' : 'Cancel';\r\n    const loginButtonType = isLoginForm ? 'submit' : 'button';\r\n    const submitButtonType = isLoginForm ? 'button' : 'submit';\r\n    const onLoginButtonClick = isLoginForm ? undefined : this.handleCardToggle;\r\n    const onSignupButtonClick = isLoginForm ? this.handleCardToggle : undefined;\r\n\r\n    const checkboxClass = classNames('remember__checkbox',\r\n    `remember__checkbox--${block}`, {\r\n      'remember__checkbox--visible': rememberMe\r\n    });\r\n\r\n    return (\r\n      <form className={className} onSubmit={this.handleFormSubmit}>\r\n        <h2 className={`${block}__heading`}>{title}</h2>\r\n\r\n        {/* LOGIN */}\r\n        <UserInput\r\n          inputId={`${block}Login`}\r\n          inputName=\"login\"\r\n          parentName={block}\r\n          value={login}\r\n          label=\"Login:\"\r\n          isInputValid={isLoginValid}\r\n          isAlertVisible={isLoginAlertVisible}\r\n          alertText={loginAlertText}\r\n          onInputBlur={this.handleAlert}\r\n          onInputChange={this.handleLoginValidation}\r\n        />\r\n\r\n        {/* PASSWORD */}\r\n        <UserInput\r\n          inputId={`${block}Password`}\r\n          inputName=\"password\"\r\n          parentName={block}\r\n          value={password}\r\n          label=\"Password:\"\r\n          isInputValid={isPasswordValid}\r\n          isAlertVisible={isPasswordAlertVisible}\r\n          alertText={passwordAlertText}\r\n          isPreviewMode={isPasswordPreviewMode}\r\n          onPreviewModeChange={this.handlePasswordPreview}\r\n          onInputBlur={this.handleAlert}\r\n          onInputChange={this.handlePasswordValidation}\r\n        />\r\n\r\n        {/* PASSWORD CONFIRM */\r\n        isLoginForm\r\n        ? <div className=\"empty\"></div>\r\n        : <UserInput\r\n            inputId={`${block}Confirm`}\r\n            inputName=\"confirm\"\r\n            parentName={block}\r\n            value={confirm}\r\n            label=\"Confirm:\"\r\n            isInputValid={isConfirmValid}\r\n            isAlertVisible={isConfirmAlertVisible}\r\n            alertText={confirmAlertText}\r\n            isDisabled={isConfirmDisabled}\r\n            isPreviewMode={isConfirmPreviewMode}\r\n            onPreviewModeChange={this.handlePasswordPreview}\r\n            onInputBlur={this.handleAlert}\r\n            onInputChange={this.handleConfirmValidation}\r\n          />\r\n        }\r\n\r\n        {/* REMEMBER ME */}\r\n        <div className=\"remember\">\r\n          <div\r\n            className={`remember__field remember__field--${block}`}\r\n            onClick={this.handleRememberMe}\r\n          >\r\n            <svg className={checkboxClass}>\r\n              <use href={`${icons}#check`}></use>\r\n            </svg>\r\n          </div>\r\n          <input\r\n            id={`${block}Remember`}\r\n            name={`${block}Remember`}\r\n            className={`remember__input remember__input--${block}`}\r\n            type=\"checkbox\"\r\n          />\r\n          <label\r\n            htmlFor={`${block}Remember`}\r\n            className={`remember__label remember__label--${block}`}\r\n            onClick={this.handleRememberMe}\r\n          >\r\n            Remember Me\r\n          </label>\r\n        </div>\r\n        \r\n        {/* BUTTONS */}\r\n        <button\r\n          className={`${block}__button ${block}__button--login`}\r\n          onClick={onLoginButtonClick}\r\n          type={loginButtonType}\r\n        >\r\n          {loginButtonName}\r\n        </button>\r\n        <button\r\n          className={`${block}__button ${block}__button--signup`}\r\n          onClick={onSignupButtonClick}\r\n          type={submitButtonType}\r\n        >\r\n          Sign Up\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\nexport default UserForm;","import React, { Component } from 'react';\r\nimport classNames from 'classnames';\r\nimport UserForm from './UserForm';\r\nimport '../scss/UserPanel.scss';\r\n\r\nclass UserPanel extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isUserPanelLoaded: false,\r\n      isLoginFormVisible: false,\r\n      isSignupFormVisible: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      isUserPanelLoaded: true,\r\n      isLoginFormVisible: true\r\n    });\r\n  }\r\n\r\n  handleCardToggle = () => {\r\n    this.setState(prevState => ({\r\n      isLoginFormVisible: !prevState.isLoginFormVisible,\r\n      isSignupFormVisible: !prevState.isSignupFormVisible\r\n    }));\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      onUserLogin,\r\n      users\r\n    } = this.props;\r\n    const {\r\n      isUserPanelLoaded,\r\n      isLoginFormVisible,\r\n      isSignupFormVisible\r\n    } = this.state;\r\n\r\n    const userPanelClass = classNames('UserPanel', {\r\n      'UserPanel--visible': isUserPanelLoaded\r\n    });\r\n\r\n    const loginClass = classNames('loginForm', {\r\n      'loginForm--rotateIn': isLoginFormVisible,\r\n      'loginForm--rotateOut': !isLoginFormVisible\r\n    });\r\n\r\n    const signupClass = classNames('signupForm', {\r\n      'signupForm--rotateIn': isSignupFormVisible,\r\n      'signupForm--rotateOut': !isSignupFormVisible\r\n    });\r\n\r\n    return (\r\n      <div className={userPanelClass}>\r\n        <p className=\"UserPanel__logo\">\r\n          task<span className=\"UserPanel__logo--color\">Timer</span>\r\n        </p>\r\n        <div className=\"UserPanel__container\">\r\n          {/* LOGIN FORM */}\r\n          <UserForm\r\n            className={loginClass}\r\n            block=\"loginForm\"\r\n            onUserLogin={onUserLogin}\r\n            users={users}\r\n            onCardToggle={this.handleCardToggle}\r\n          />\r\n          {/* SIGNUP FORM */}\r\n          <UserForm\r\n            className={signupClass}\r\n            block=\"signupForm\"\r\n            onUserLogin={onUserLogin}\r\n            users={users}\r\n            onCardToggle={this.handleCardToggle}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default UserPanel;","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport UserInput from './UserInput';\r\nimport '../scss/UserEdit.scss';\r\n\r\nconst UserEdit = (props) => {\r\n\r\n  const {\r\n    parentName,\r\n    isEditMode,\r\n    editedSetting,\r\n    onPreviewModeChange,\r\n    onInputBlur,\r\n    handleLoginValidation,\r\n    handleOldPasswordValidation,\r\n    handleNewPasswordValidation,\r\n    handleConfirmValidation,\r\n\r\n    state: {\r\n      login,\r\n      isLoginValid,\r\n      isLoginAlertVisible,\r\n      loginAlertText,\r\n      oldPassword,\r\n      isOldPasswordValid,\r\n      isOldPasswordAlertVisible,\r\n      oldPasswordAlertText,\r\n      isOldPasswordPreviewMode,\r\n      newPassword,\r\n      isNewPasswordValid,\r\n      isNewPasswordAlertVisible,\r\n      newPasswordAlertText,\r\n      isNewPasswordPreviewMode,\r\n      confirm,\r\n      isConfirmValid,\r\n      isConfirmAlertVisible,\r\n      confirmAlertText,\r\n      isConfirmPreviewMode,\r\n      isConfirmDisabled\r\n    }\r\n  } = props;\r\n\r\n  const userEditClass = classNames('UserEdit', {\r\n    'UserEdit--hidden': !isEditMode,\r\n    [`UserEdit--${editedSetting}`]: isEditMode\r\n  })\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {\r\n      editedSetting === 'login' ?\r\n      /* USER LOGIN EDIT */\r\n      <div className={userEditClass}>\r\n        <UserInput\r\n          inputId={`${parentName}Login`}\r\n          inputName=\"login\"\r\n          parentName={parentName}\r\n          value={login}\r\n          label=\"New Login:\"\r\n          isInputValid={isLoginValid}\r\n          isAlertVisible={isLoginAlertVisible}\r\n          alertText={loginAlertText}\r\n          onInputBlur={onInputBlur}\r\n          onInputChange={handleLoginValidation}\r\n        />\r\n      </div>\r\n\r\n      : editedSetting === 'password' ?\r\n      /* USER PASSWORD EDIT */\r\n      <div className={userEditClass}>\r\n        {/* OLD PASSWORD */}\r\n        <UserInput\r\n          inputId={`${parentName}OldPassword`}\r\n          inputName=\"oldPassword\"\r\n          parentName={parentName}\r\n          value={oldPassword}\r\n          label=\"Old Password:\"\r\n          isInputValid={isOldPasswordValid}\r\n          isAlertVisible={isOldPasswordAlertVisible}\r\n          alertText={oldPasswordAlertText}\r\n          isPreviewMode={isOldPasswordPreviewMode}\r\n          onPreviewModeChange={onPreviewModeChange}\r\n          onInputBlur={onInputBlur}\r\n          onInputChange={handleOldPasswordValidation}\r\n        />\r\n        {/* NEW PASSWORD */}\r\n        <UserInput\r\n          inputId={`${parentName}NewPassword`}\r\n          inputName=\"newPassword\"\r\n          parentName={parentName}\r\n          value={newPassword}\r\n          label=\"New Password:\"\r\n          isInputValid={isNewPasswordValid}\r\n          isAlertVisible={isNewPasswordAlertVisible}\r\n          alertText={newPasswordAlertText}\r\n          isPreviewMode={isNewPasswordPreviewMode}\r\n          onPreviewModeChange={onPreviewModeChange}\r\n          onInputBlur={onInputBlur}\r\n          onInputChange={handleNewPasswordValidation}\r\n        />\r\n        {/* CONFIRM PASSWORD */}\r\n        <UserInput\r\n          inputId={`${parentName}Confirm`}\r\n          inputName=\"confirm\"\r\n          parentName={parentName}\r\n          value={confirm}\r\n          label=\"Confirm:\"\r\n          isInputValid={isConfirmValid}\r\n          isAlertVisible={isConfirmAlertVisible}\r\n          alertText={confirmAlertText}\r\n          isDisabled={isConfirmDisabled}\r\n          isPreviewMode={isConfirmPreviewMode}\r\n          onPreviewModeChange={onPreviewModeChange}\r\n          onInputBlur={onInputBlur}\r\n          onInputChange={handleConfirmValidation}\r\n        />\r\n      </div>\r\n\r\n      : editedSetting === 'logout' ?\r\n      /* USER LOGOUT CONFIRM */\r\n      <div className={userEditClass}>\r\n        <p className=\"UserEdit__text\">\r\n          Log out?\r\n        </p>\r\n      </div>\r\n\r\n      :\r\n      /* USER REMOVE CONFIRM */\r\n      <div className={userEditClass}>\r\n        <p className=\"UserEdit__text\">\r\n          Remove user?\r\n        </p>\r\n      </div>\r\n      }\r\n    </React.Fragment>\r\n  );\r\n}\r\nexport default UserEdit;","import React, { Component } from 'react';\r\nimport classNames from 'classnames';\r\nimport UserEdit from './UserEdit';\r\nimport icons from '../assets/svg/icons.svg';\r\nimport { getCapitalized } from '../lib/handlers.js';\r\nimport '../scss/Sidebar.scss';\r\n\r\nclass Sidebar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isEditMode: false,\r\n      editedSetting: null,\r\n      // login\r\n      login: '',\r\n      isLoginValid: false,\r\n      isLoginAlertVisible: false,\r\n      loginAlertText: 'Please enter your login',\r\n      // password\r\n      oldPassword: '',\r\n      isOldPasswordValid: false,\r\n      isOldPasswordAlertVisible: false,\r\n      oldPasswordAlertText: 'Please enter your old password',\r\n      isOldPasswordPreviewMode: false,\r\n      // new password\r\n      newPassword: '',\r\n      isNewPasswordValid: false,\r\n      isNewPasswordAlertVisible: false,\r\n      newPasswordAlertText: 'Please enter your new password',\r\n      isNewPasswordPreviewMode: false,\r\n      // password confirm\r\n      confirm: '',\r\n      isConfirmValid: false,\r\n      isConfirmAlertVisible: false,\r\n      confirmAlertText: 'Please confirm your password',\r\n      isConfirmPreviewMode: false,\r\n      isConfirmDisabled: true,\r\n    }\r\n  }\r\n\r\n  handleStateChange = (object) => this.setState(object);\r\n\r\n  handleAlert = (value, input) => {\r\n    const inputName = getCapitalized(input);\r\n    const alertText = this.getInputAlert(value, input);\r\n\r\n    this.setState({\r\n      [`is${inputName}AlertVisible`]: true,\r\n      [`${input}AlertText`]: alertText\r\n    });    \r\n  }\r\n\r\n  getInputAlert = (value, input) => {\r\n\r\n    const { newPassword } = this.state;\r\n    const isEmpty = value === '';\r\n    const doesContainWhiteSpaces = /\\s/g.test(value);\r\n    const isPasswordTooShort = value.length < 6;\r\n    \r\n    switch (input) {\r\n  \r\n      case 'login':\r\n\r\n        const { block, users, loggedUserId } = this.props;        \r\n        const { login } = users[loggedUserId];\r\n\r\n        const doesLoginExist = Object.values(users)\r\n        .map(user => user.login)\r\n        .find(userLogin => userLogin === value && userLogin !== login);\r\n\r\n        const isLoginIncorrect = block === 'loginForm' && !doesLoginExist;\r\n        const isNewLoginIncorrect = (block === 'signupForm' || block === 'userEdit')\r\n        && doesLoginExist;\r\n\r\n        return isEmpty\r\n        ? 'Please enter your login' : isLoginIncorrect\r\n        ? 'There is no user with this login' : isNewLoginIncorrect\r\n        ? 'This login already exist. Try another one' : false;  \r\n  \r\n      case 'password':\r\n      case 'oldPassword':\r\n      case 'newPassword':\r\n\r\n        return isEmpty\r\n        ? 'Please enter your password' : doesContainWhiteSpaces\r\n        ? 'Password cannot contain any spaces' : isPasswordTooShort\r\n        ? 'Password should have at least 6 characters' : false;\r\n  \r\n      case 'confirm':\r\n        const doPasswordsMatch = newPassword === value;\r\n\r\n        return isEmpty\r\n        ? 'Please confirm your password' : !doPasswordsMatch\r\n        ? 'Passwords do not match!' : false;\r\n  \r\n      default: return false;\r\n    }\r\n  }\r\n\r\n  handleLoginValidation = (value) => {\r\n    const isInvalid = this.getInputAlert(value, 'login') ? true : false;\r\n    \r\n    this.setState({\r\n      login: value,\r\n      isLoginValid: !isInvalid,\r\n      isLoginAlertVisible: false\r\n    });\r\n  }\r\n\r\n  handleOldPasswordValidation = (value) => {\r\n    const isInvalid = this.getInputAlert(value, 'password') ? true : false;\r\n\r\n    this.setState({\r\n      oldPassword: value,\r\n      isOldPasswordValid: !isInvalid,\r\n      isOldPasswordAlertVisible: false,\r\n      isOldPasswordPreviewed: false\r\n    });\r\n  }\r\n\r\n  handleNewPasswordValidation = (value) => {\r\n    const isInvalid = this.getInputAlert(value, 'password') ? true : false;\r\n\r\n    this.setState({\r\n      newPassword: value,\r\n      isNewPasswordValid: !isInvalid,\r\n      isNewPasswordAlertVisible: false,\r\n      isNewPasswordPreviewed: false,\r\n\r\n      confirm: '',\r\n      isConfirmValid: false,\r\n      isConfirmAlertVisible: false,\r\n      isConfirmPreviewMode: false,\r\n      isConfirmDisabled: isInvalid\r\n    });\r\n  }\r\n\r\n  handleConfirmValidation = (value) => {\r\n    const isInvalid = this.getInputAlert(value, 'confirm') ? true : false;\r\n\r\n    this.setState({\r\n      confirm: value,\r\n      isConfirmValid: !isInvalid,\r\n      isConfirmAlertVisible: false,\r\n      isConfirmPreviewed: false\r\n    });\r\n  }\r\n\r\n  handlePasswordPreview = (input) => {\r\n    const inputName = getCapitalized(input);\r\n\r\n    this.setState(prevState => ({\r\n      [`is${inputName}PreviewMode`]: !prevState[`is${inputName}PreviewMode`]\r\n    }));\r\n  }\r\n\r\n  handleUserEdit = (setting) => {\r\n    const {\r\n      onUserUpdate,\r\n      onUserLogout,\r\n      onUserRemove,\r\n      users,\r\n      loggedUserId\r\n    } = this.props;\r\n\r\n    const { editedSetting, login, oldPassword, newPassword } = this.state;\r\n    const user = users[loggedUserId];\r\n\r\n    if (setting === 'confirm') {\r\n\r\n      switch (editedSetting) {\r\n\r\n        case 'login':\r\n          onUserUpdate(login, 'login');\r\n          this.setState({ isEditMode: false });\r\n        break;\r\n\r\n        case 'password':\r\n          if (oldPassword !== user.password) {\r\n            this.handleInputsReset();\r\n            this.setState({\r\n              isOldPasswordAlertVisible: true,\r\n              oldPasswordAlertText: 'Password is wrong!'\r\n            });\r\n\r\n          } else {\r\n            onUserUpdate(newPassword, 'password');\r\n            this.setState({ isEditMode: false });\r\n            this.handleInputsReset();\r\n          }\r\n        break;\r\n\r\n        case 'logout': onUserLogout(); break;\r\n        case 'remove': onUserRemove(); break;\r\n        default: break;\r\n      }\r\n\r\n    } else if (setting === 'cancel') {\r\n      this.setState({ isEditMode: false });\r\n      this.handleInputsReset();\r\n\r\n    } else {\r\n      this.setState({ isEditMode: true, editedSetting: setting });\r\n    }\r\n  }\r\n\r\n  handleInputsReset = () => {\r\n    this.setState({\r\n      login: '',\r\n      isLoginValid: false,\r\n      isLoginAlertVisible: false,\r\n      loginAlertText: 'Please enter your login',\r\n      oldPassword: '',\r\n      isOldPasswordValid: false,\r\n      isOldPasswordAlertVisible: false,\r\n      oldPasswordAlertText: 'Please enter your old password',\r\n      isOldPasswordPreviewMode: false,\r\n      newPassword: '',\r\n      isNewPasswordValid: false,\r\n      isNewPasswordAlertVisible: false,\r\n      newPasswordAlertText: 'Please enter your new password',\r\n      isNewPasswordPreviewMode: false,\r\n      confirm: '',\r\n      isConfirmValid: false,\r\n      isConfirmAlertVisible: false,\r\n      confirmAlertText: 'Please confirm your password',\r\n      isConfirmPreviewMode: false,\r\n      isConfirmDisabled: true\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    const {\r\n      block,\r\n      isSidebarVisible,\r\n      users,\r\n      loggedUserId\r\n    } = this.props;\r\n\r\n    const {\r\n      isEditMode,\r\n      editedSetting,\r\n      isLoginValid,\r\n      isOldPasswordValid,\r\n      isNewPasswordValid,\r\n      isConfirmValid\r\n    } = this.state;\r\n\r\n    const { login, stats } = users[loggedUserId];\r\n    \r\n    const userEditButtons = ['login', 'password', 'logout', 'remove'];\r\n    const userEditLabels = [\r\n      'Change your login',\r\n      'Change your password',\r\n      'Log out to main app',\r\n      'Remove your profile'\r\n    ]\r\n    const userConfirmButtons = ['confirm', 'cancel'];\r\n      \r\n    const statsLabels = {\r\n      finishedTasks: 'Tasks finished:',\r\n      avgTaskTime: 'Average task time:',\r\n      avgBreakTime: 'Average break time:',\r\n      avgTasksPerDay: 'Average tasks per day:',\r\n      dateCreated: 'Profile created at:'\r\n    }\r\n    const statsLabelsKeys = Object.keys(statsLabels);\r\n\r\n    //#region [ Horizon ] CLASS NAMES\r\n  \r\n    const sidebarClass = classNames('Sidebar', {\r\n      'Sidebar--visible': isSidebarVisible\r\n    });\r\n  \r\n    const editButtonsClass = classNames('userButtons', 'userButtons--edit', {\r\n      'userButtons--visible': !isEditMode\r\n    });\r\n  \r\n    const confirmButtonsClass = classNames('userButtons', 'userButtons--confirm', {\r\n      'userButtons--visible': isEditMode\r\n    });\r\n\r\n    //#endregion CLASS NAMES\r\n  \r\n    return (\r\n      <section className={sidebarClass}>\r\n        {/* USER LOGIN */}\r\n        <h2 className=\"Sidebar__userLogin\">\r\n          {login}\r\n        </h2>\r\n  \r\n        <UserEdit\r\n          parentName={block}\r\n          state={this.state}\r\n          isEditMode={isEditMode}\r\n          editedSetting={editedSetting}\r\n          onPreviewModeChange={this.handlePasswordPreview}\r\n          onInputBlur={this.handleAlert}\r\n          handleLoginValidation={this.handleLoginValidation}\r\n          handleOldPasswordValidation={this.handleOldPasswordValidation}\r\n          handleNewPasswordValidation={this.handleNewPasswordValidation}\r\n          handleConfirmValidation={this.handleConfirmValidation}\r\n        />\r\n  \r\n        {/* USER PANEL BUTTONS */}\r\n        <div className=\"Sidebar__buttons\">\r\n  \r\n          {/* EDIT BUTTONS */}\r\n          <div className={editButtonsClass}>\r\n            {\r\n            userEditButtons.map((button, index) => {\r\n              \r\n              const buttonClass = classNames(\r\n              'userButtons__button',\r\n              `userButtons__button--${button}`, {\r\n                'userButtons__button--visible': !isEditMode\r\n              });\r\n              const tabIndexVal = isSidebarVisible && !isEditMode ? '0' : '-1';\r\n              \r\n              return (\r\n                <button\r\n                  className={buttonClass}\r\n                  key={button}\r\n                  title={userEditLabels[index]}\r\n                  onClick={() => this.handleUserEdit(button)}\r\n                  tabIndex={tabIndexVal}\r\n                >\r\n                  <svg className=\"userButtons__svg\" viewBox=\"0 0 100 100\">\r\n                    <use href={`${icons}#${button}Edit`}></use>\r\n                  </svg>\r\n                </button>\r\n              )\r\n            })\r\n            }\r\n          </div>\r\n  \r\n          {/* CONFIRMATION BUTTONS */}\r\n          <div className={confirmButtonsClass}>\r\n            {\r\n            userConfirmButtons.map(button => {\r\n\r\n              const isButtonDisabled = editedSetting === 'login'\r\n              ? !isLoginValid\r\n              : editedSetting === 'password'\r\n              ? !isOldPasswordValid || !isNewPasswordValid || !isConfirmValid\r\n              : false;\r\n              const isConfirmButtonDisabled = isButtonDisabled && button === 'confirm';\r\n  \r\n              const buttonClass = classNames(\r\n              'userButtons__button',\r\n              `userButtons__button--${button}`, {\r\n                'userButtons__button--visible': isEditMode,\r\n                'userButtons__button--disabled': isConfirmButtonDisabled\r\n              });\r\n              const tabIndexVal = isSidebarVisible && isEditMode ? '0' : '-1';\r\n              \r\n              return (\r\n                <button\r\n                  className={buttonClass}\r\n                  key={button}\r\n                  onClick={() => this.handleUserEdit(button)}\r\n                  disabled={isConfirmButtonDisabled}\r\n                  tabIndex={tabIndexVal}\r\n                >\r\n                  <svg className=\"userButtons__svg\" viewBox=\"0 0 100 100\">\r\n                    <use href={`${icons}#${button}Edit`}></use>\r\n                  </svg>\r\n                </button>\r\n              )\r\n            })\r\n            }\r\n          </div>\r\n        </div>\r\n  \r\n        {/* USER STATS */}\r\n        <section className=\"Sidebar__section\">\r\n          <h3 className=\"Sidebar__heading\">Stats</h3>\r\n          <table className=\"stats\">\r\n            <caption className=\"stats__caption visuallyhidden\">Stats</caption>\r\n            <thead className=\"stats__header visuallyhidden\">\r\n              <tr className=\"stats__row\">\r\n                <th className=\"stats__cell\">Name</th>\r\n                <th className=\"stats__cell\">Value</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody className=\"stats__body\">\r\n            {\r\n              [...statsLabelsKeys].map(key => \r\n\r\n                <tr className=\"stats__row\" key={key}>\r\n                  <th className=\"stats__cell stats__cell--name\" scope=\"row\">\r\n                    {statsLabels[key]}\r\n                  </th>\r\n                  <td className=\"stats__cell stats__cell--value\">\r\n                    {stats[key]}\r\n                  </td>\r\n                </tr>\r\n              )\r\n            }\r\n            </tbody>\r\n          </table>\r\n        </section>\r\n  \r\n        {/* USER COLOR PROFILE */}\r\n        <section className=\"Sidebar__section\">\r\n          <h3 className=\"Sidebar__heading\">Color Theme</h3>\r\n          <p className=\"Sidebar__text\">To be added soon...</p>\r\n        </section>\r\n      </section>\r\n    );\r\n  }\r\n}\r\nexport default Sidebar;","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport '../scss/CreatorInput.scss';\r\nimport { maxTaskNameLength } from '../lib/globalVariables';\r\nimport { taskNameProgressStyle } from '../lib/handlers';\r\n\r\nconst CreatorInput = (props) => {\r\n\r\n  const {\r\n    isVisible,\r\n    isValid,\r\n    modifier,\r\n    title,\r\n    label,\r\n    minutes,\r\n    seconds,\r\n    placeholder,\r\n    slideDirection,\r\n    taskNameLength,\r\n    onTaskNameChange,\r\n    onMinutesChange,\r\n    onSecondsChange,\r\n    alertFlag\r\n  } = props;\r\n\r\n  const creatorInputClass = classNames(\"CreatorInput\", {\r\n    [`CreatorInput--${modifier}`]: isVisible,\r\n    \"showFromRight\": isVisible && slideDirection === 'toRight',\r\n    \"hideToLeft\": !isVisible && slideDirection === 'toRight',\r\n    \"showFromLeft\": isVisible && slideDirection === 'toLeft',\r\n    \"hideToRight\": !isVisible && slideDirection === 'toLeft'\r\n  });\r\n\r\n  const textInputClass = classNames(\"CreatorInput__text\", {\r\n    \"CreatorInput__text--invalid\": !isValid && alertFlag\r\n  });\r\n\r\n  const timeInputsClass = classNames(\"CreatorInput__inputs\", {\r\n    \"CreatorInput__inputs--invalid\": !isValid && alertFlag\r\n  });\r\n\r\n  const minutesInputClass = classNames(\"CreatorInput__input\",\r\n    \"CreatorInput__input--minutes\", {\r\n      \"CreatorInput__input--invalid\": !isValid && alertFlag\r\n    });\r\n\r\n  const secondsInputClass = classNames(\"CreatorInput__input\",\r\n    \"CreatorInput__input--seconds\", {\r\n      \"CreatorInput__input--invalid\": !isValid && alertFlag\r\n    });\r\n\r\n  return (\r\n    <div className={creatorInputClass}>\r\n\r\n      {/* INPUT LABEL */}\r\n      <label\r\n        htmlFor={modifier}\r\n        className=\"CreatorInput__label\"\r\n      >\r\n        {label}\r\n      </label>\r\n\r\n      {\r\n        modifier === \"taskName\"\r\n        ? /* TEXT INPUT */\r\n        <div className=\"CreatorInput__textContainer\">\r\n          <textarea\r\n            id={modifier}\r\n            className={textInputClass}\r\n            placeholder={placeholder}\r\n            spellCheck=\"false\"\r\n            maxLength={maxTaskNameLength}\r\n            value={title}\r\n            onChange={(e) => onTaskNameChange(e.target.value)}\r\n          ></textarea>\r\n          <div\r\n            className=\"CreatorInput__progress\"\r\n            style={taskNameProgressStyle(taskNameLength)}\r\n          ></div>\r\n        </div>\r\n\r\n        : /* TIME INPUT */\r\n        <div className={timeInputsClass}>\r\n          <input\r\n            id={modifier}\r\n            name={`${modifier}Minutes`}\r\n            className={minutesInputClass}\r\n            placeholder=\"min\"\r\n            maxLength=\"2\"\r\n            value={minutes}\r\n            onChange={(e) => onMinutesChange(e.target.value)}\r\n          />\r\n          <span className=\"CreatorInput__colon\">:</span>\r\n          <input\r\n            name={`${modifier}Seconds`}\r\n            className={secondsInputClass}\r\n            placeholder=\"sec\"\r\n            maxLength=\"2\"\r\n            value={seconds}\r\n            onChange={(e) => onSecondsChange(e.target.value)}\r\n          />\r\n        </div>\r\n      }\r\n    </div>\r\n  )\r\n}\r\nexport default CreatorInput;","import React, { Component } from 'react';\r\nimport classNames from 'classnames';\r\nimport CreatorInput from './CreatorInput';\r\nimport { validateTaskName, handleTimeChange } from '../lib/handlers';\r\nimport { cardFlipTime, animationStyle } from '../lib/globalVariables';\r\nimport icons from '../assets/svg/icons.svg';\r\nimport '../scss/Creator.scss';\r\n\r\nclass Creator extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      // visibility\r\n      isCreatorRotatingOut: false,\r\n      isTaskNameVisible: true,\r\n      isTaskTimeVisible: false,\r\n      isBreakTimeVisible: false,\r\n      // inputs\r\n      creatorTaskName: \"\",\r\n      creatorTaskMinutes: \"\",\r\n      creatorTaskSeconds: \"\",\r\n      creatorBreakMinutes: \"\",\r\n      creatorBreakSeconds: \"\",\r\n      creatorTotalTaskTime: 0,\r\n      creatorTotalBreakTime: 0,\r\n      taskNameLength: 0,\r\n      creatorTaskTimeArray: [\"00\",\"00\"],\r\n      creatorBreakTimeArray: [\"00\",\"00\"],\r\n      // validation\r\n      isTaskNameValid: false,\r\n      isTaskTimeValid: false,\r\n      isBreakTimeValid: true,\r\n      isCreatorValid: false,\r\n      alertFlag: false,\r\n\r\n      slideDirection: null\r\n    };\r\n  }\r\n\r\n  componentWillUnmount = () => {\r\n    clearTimeout(this.timeoutOutroId);\r\n  }\r\n\r\n  handleStateChange = (object) => this.setState(object);\r\n\r\n  handleTaskName = (value) => {\r\n    this.setState({\r\n      creatorTaskName: value,\r\n      taskNameLength: value.length,\r\n      isTaskNameValid: validateTaskName(value),\r\n      alertFlag: true\r\n    });\r\n  }\r\n\r\n  addNewTask = () => {\r\n    const { onBoardStateChange, onTaskEdit } = this.props;\r\n    const {\r\n      creatorTaskName,\r\n      creatorTaskMinutes,\r\n      creatorTaskSeconds,\r\n      creatorBreakMinutes,\r\n      creatorBreakSeconds,\r\n      creatorTotalTaskTime,\r\n      creatorTotalBreakTime,\r\n      creatorTaskTimeArray,\r\n      creatorBreakTimeArray\r\n    } = this.state;\r\n\r\n    const date = Date.now();\r\n    // new task data\r\n    const newTask = {\r\n      taskName: creatorTaskName,\r\n      taskMinutes: creatorTaskMinutes,\r\n      taskSeconds: creatorTaskSeconds,\r\n      breakMinutes: creatorBreakMinutes,\r\n      breakSeconds: creatorBreakSeconds,\r\n      totalTaskTime: creatorTotalTaskTime,\r\n      totalBreakTime: creatorTotalBreakTime,\r\n      totalTaskTimeArray: creatorTaskTimeArray,\r\n      totalBreakTimeArray: creatorBreakTimeArray,\r\n      id: date\r\n    };\r\n    // add new task to app state\r\n    onBoardStateChange({ isCreatorVisible: false });\r\n    onTaskEdit(newTask, 'add');\r\n  }\r\n\r\n  /* handleKeyPress = (e) => {\r\n    const { onStateChange } = this.props;\r\n    const keyPressed = e.key || null;\r\n\r\n    if (keyPressed === \"Escape\" || keyPressed === null) {\r\n      onStateChange({\r\n        isTaskVisible: true,\r\n        isTimeVisible: false,\r\n        isTaskNameChangeActive: true\r\n      })\r\n    }\r\n  } */\r\n\r\n  handleTimeChange = (minutes, seconds, units, type) => {\r\n    const newTime = handleTimeChange(minutes, seconds, units, type);\r\n\r\n    if (type === 'task') {\r\n      if (units === 'minutes') {\r\n        const { taskMinutes, totalTaskTime, totalTaskTimeArray, isTaskTimeValid } = newTime;\r\n        this.setState({\r\n          creatorTaskMinutes: taskMinutes,\r\n          creatorTotalTaskTime: totalTaskTime,\r\n          creatorTaskTimeArray: totalTaskTimeArray,\r\n          isTaskTimeValid,\r\n          alertFlag: true\r\n        });\r\n      } else if (units === 'seconds') {\r\n        const { taskSeconds, totalTaskTime, totalTaskTimeArray, isTaskTimeValid } = newTime;\r\n        this.setState({\r\n          creatorTaskSeconds: taskSeconds,\r\n          creatorTotalTaskTime: totalTaskTime,\r\n          creatorTaskTimeArray: totalTaskTimeArray,\r\n          isTaskTimeValid,\r\n          alertFlag: true\r\n        });\r\n      }\r\n    } else if (type === 'break') {\r\n      if (units === 'minutes') {\r\n        const { breakMinutes, totalBreakTime, totalBreakTimeArray, isBreakTimeValid } = newTime;\r\n        this.setState({\r\n          creatorBreakMinutes: breakMinutes,\r\n          creatorTotalBreakTime: totalBreakTime,\r\n          creatorBreakTimeArray: totalBreakTimeArray,\r\n          isBreakTimeValid,\r\n          alertFlag: true\r\n        });\r\n      } else if (units === 'seconds') {\r\n        const { breakSeconds, totalBreakTime, totalBreakTimeArray, isBreakTimeValid } = newTime;\r\n        this.setState({\r\n          creatorBreakSeconds: breakSeconds,\r\n          creatorTotalBreakTime: totalBreakTime,\r\n          creatorBreakTimeArray: totalBreakTimeArray,\r\n          isBreakTimeValid,\r\n          alertFlag: true\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  handleBackButton = (e) => {\r\n    e.preventDefault();\r\n    const {\r\n      isTaskTimeVisible,\r\n      isBreakTimeVisible\r\n    } = this.state;\r\n\r\n    if (isTaskTimeVisible) {\r\n      this.setState({\r\n        isTaskNameVisible: true,\r\n        isTaskTimeVisible: false,\r\n        slideDirection: \"toLeft\"\r\n      });\r\n    }\r\n\r\n    if (isBreakTimeVisible) {\r\n      this.setState({\r\n        isTaskTimeVisible: true,\r\n        isBreakTimeVisible: false,\r\n        slideDirection: \"toLeft\"\r\n      });\r\n    }\r\n  }\r\n  \r\n  handleNextButton = (e) => {\r\n    e.preventDefault();\r\n\r\n    const {\r\n      isTaskNameVisible,\r\n      isTaskTimeVisible,\r\n      isBreakTimeVisible,\r\n      isTaskNameValid,\r\n      isTaskTimeValid,\r\n      isBreakTimeValid\r\n    } = this.state;\r\n\r\n    if (isTaskNameVisible && isTaskNameValid) {\r\n      this.setState({\r\n        isTaskNameVisible: false,\r\n        isTaskTimeVisible: true,\r\n        alertFlag: false,\r\n        slideDirection: \"toRight\"\r\n      });\r\n    }\r\n\r\n    if (isTaskTimeVisible && isTaskTimeValid) {\r\n      this.setState({\r\n        isTaskTimeVisible: false,\r\n        isBreakTimeVisible: true,\r\n        alertFlag: false,\r\n        slideDirection: \"toRight\"\r\n      });\r\n    }\r\n\r\n    if (isBreakTimeVisible && isBreakTimeValid) {\r\n      this.setState({\r\n        isCreatorValid: true,\r\n        alertFlag: false,\r\n        isCreatorRotatingOut: true,\r\n        slideDirection: \"toRight\"\r\n      });\r\n      this.timeoutOutroId = setTimeout(() => this.addNewTask(),\r\n      cardFlipTime);\r\n    }\r\n  }\r\n\r\n  handleCreatorClose = (e) => {\r\n    e.preventDefault();\r\n    const { onBoardStateChange } = this.props;\r\n    onBoardStateChange({ isCreatorVisible: false });\r\n  }\r\n\r\n  render() {\r\n\r\n    const {\r\n      // visibility\r\n      isCreatorRotatingOut,\r\n      isTaskNameVisible,\r\n      isTaskTimeVisible,\r\n      isBreakTimeVisible,\r\n      // inputs\r\n      creatorTaskName,\r\n      creatorTaskMinutes,\r\n      creatorTaskSeconds,\r\n      creatorBreakMinutes,\r\n      creatorBreakSeconds,\r\n      taskNameLength,\r\n      // validation\r\n      isTaskNameValid,\r\n      isTaskTimeValid,\r\n      isBreakTimeValid,\r\n      isCreatorValid,\r\n      alertFlag,\r\n      \r\n      slideDirection\r\n    } = this.state;\r\n\r\n    const isNextButtonVisible = \r\n    (isTaskNameVisible && isTaskNameValid) ||\r\n    (isTaskTimeVisible && isTaskTimeValid) ||\r\n    (isBreakTimeVisible && isBreakTimeValid);\r\n\r\n    const creatorClass = classNames(\"Creator\", {\r\n      \"Creator--rotateOut\": isCreatorRotatingOut\r\n    });\r\n  \r\n    const backButtonClass = classNames(\"Creator__button\",\r\n      \"Creator__button--back\", {\r\n      \"Creator__button--visible\": !isTaskNameVisible\r\n    });\r\n    \r\n    const nextButtonClass = classNames(\"Creator__button\",\r\n      \"Creator__button--next\", {\r\n      \"Creator__button--visible\": isNextButtonVisible\r\n    });\r\n    \r\n    const closeButtonClass = \"Creator__button Creator__button--visible Creator__button--close\";\r\n\r\n    const progressBarLoadedStyle = {\r\n      width: isTaskTimeVisible ? `${1/3 * 100}%`\r\n      : isBreakTimeVisible ?\r\n        isCreatorValid ? \"100%\" : `${2/3 * 100}%`\r\n      : 0\r\n    }\r\n\r\n    return (\r\n      <form\r\n        className={creatorClass}\r\n        style={animationStyle}\r\n        //onSubmit={this.handleFormSubmit}\r\n        //onKeyDown={(e) => this.handleKeyboard(e)}\r\n      >\r\n        {/* TASK NAME INPUT */}\r\n        <CreatorInput\r\n          isVisible={isTaskNameVisible}\r\n          isValid={isTaskNameValid}\r\n          modifier=\"taskName\"\r\n          title={creatorTaskName}\r\n          label=\"Enter task name\"\r\n          placeholder=\"What would be your next task?\"\r\n          alertFlag={alertFlag}\r\n          onTaskNameChange={this.handleTaskName}\r\n          slideDirection={slideDirection}\r\n          taskNameLength={taskNameLength}\r\n        />\r\n\r\n        {/* TASK TIME INPUT */}\r\n        <CreatorInput\r\n          isVisible={isTaskTimeVisible}\r\n          isValid={isTaskTimeValid}\r\n          modifier=\"taskTime\"\r\n          label=\"Enter task time\"\r\n          placeholder=\"Enter time here...\"\r\n          minutes={creatorTaskMinutes}\r\n          seconds={creatorTaskSeconds}\r\n          alertFlag={alertFlag}\r\n          slideDirection={slideDirection}\r\n          onMinutesChange={(value) =>\r\n            this.handleTimeChange(value, creatorTaskSeconds, 'minutes', 'task')}\r\n          onSecondsChange={(value) =>\r\n            this.handleTimeChange(creatorTaskMinutes, value, 'seconds', 'task')}\r\n        />\r\n        \r\n        {/* BREAK TIME INPUT */}\r\n        <CreatorInput\r\n          isVisible={isBreakTimeVisible}\r\n          isValid={isBreakTimeValid}\r\n          modifier=\"breakTime\"\r\n          label=\"Enter max break time\"\r\n          placeholder=\"Enter time here...\"\r\n          minutes={creatorBreakMinutes}\r\n          seconds={creatorBreakSeconds}\r\n          alertFlag={alertFlag}\r\n          slideDirection={slideDirection}\r\n          onMinutesChange={(value) =>\r\n            this.handleTimeChange(value, creatorBreakSeconds, 'minutes', 'break')}\r\n          onSecondsChange={(value) =>\r\n            this.handleTimeChange(creatorBreakMinutes, value, 'seconds', 'break')}\r\n        />\r\n\r\n        {/* GO BACK BUTTON */}\r\n        <button\r\n          className={backButtonClass}\r\n          onClick={this.handleBackButton}\r\n        >\r\n          <svg className=\"Creator__svg\" viewBox=\"0 0 512 512\">\r\n            <use href={`${icons}#arrow-left`}></use>\r\n          </svg>\r\n        </button>\r\n  \r\n        {/* GO NEXT BUTTON */}\r\n        <button\r\n          className={nextButtonClass}\r\n          onClick={this.handleNextButton}\r\n        >\r\n          <svg className=\"Creator__svg\" viewBox=\"0 0 512 512\">\r\n            <use href={`${icons}#arrow-right`}></use>\r\n          </svg>\r\n        </button>\r\n\r\n        {/* CLOSE NEW TASK */}\r\n        <button\r\n          className={closeButtonClass}\r\n          onClick={this.handleCreatorClose}\r\n        >\r\n          <svg className=\"Creator__svg\" viewBox=\"0 0 512 512\">\r\n            <use href={`${icons}#remove`}/>\r\n          </svg>\r\n        </button>\r\n\r\n        {/* PROGRESS BAR */}\r\n        <div className=\"progressBar\">\r\n          <div\r\n            className=\"progressBar__loaded\"\r\n            style={progressBarLoadedStyle}\r\n          ></div>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\nexport default Creator;","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport { maxTaskNameLength } from '../lib/globalVariables';\r\nimport { taskNameProgressStyle } from '../lib/handlers';\r\nimport '../scss/EditableText.scss';\r\n\r\nconst EditableText = (props) => {\r\n    \r\n  const {\r\n    output,\r\n    isValid,\r\n    isMaximized,\r\n    taskNameLength,\r\n    isDisabled,\r\n    isEditMode,\r\n    onTaskNameChange,\r\n    onEditModeChange\r\n  } = props;\r\n\r\n  const editableTextClass = classNames(\"taskName\", {\r\n    \"taskName--disabled\": isDisabled,\r\n    \"taskName--maximized\": isMaximized\r\n  });\r\n\r\n  const textClass = classNames(\"taskName__text\", {\r\n    \"taskName__text--visible\": !isEditMode\r\n  })\r\n\r\n  const inputContainerClass = classNames(\"taskName__inputContainer\", {\r\n    \"taskName__inputContainer--visible\": isEditMode\r\n  })\r\n\r\n  const inputClass = classNames(\"taskName__input\", {\r\n    \"taskName__input--incorrect\": !isValid\r\n  })\r\n\r\n  const progressClass = classNames(\"taskName__progress\", {\r\n    \"taskName__progress--visible\": isEditMode\r\n  })\r\n\r\n  return (\r\n    <div className={editableTextClass}>\r\n      {/* TEXT TITLE */}\r\n      <h2 className={textClass} onClick={onEditModeChange}>\r\n        {`\"${output}\"`}\r\n      </h2>\r\n      {/* TEXT CONTAINER */}\r\n      <div className={inputContainerClass}>\r\n        {/* INPUT */}\r\n        <textarea\r\n          className={inputClass}\r\n          value={output}\r\n          spellCheck=\"false\"\r\n          maxLength={maxTaskNameLength}\r\n          onChange={(e) => onTaskNameChange(e.target.value)}\r\n        ></textarea>\r\n        {/* TEXT PROGRESS */}\r\n        <div\r\n          className={progressClass}\r\n          style={taskNameProgressStyle(taskNameLength)}\r\n        ></div>\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default EditableText;","import React from 'react';\r\nimport classNames from 'classnames';\r\n\r\nconst EditableTime = (props) => {\r\n  const {\r\n    id,\r\n    name,\r\n    unit,\r\n    time,\r\n    isEditMode,\r\n    onTimeChange,\r\n    onEditModeChange\r\n  } = props;\r\n  \r\n  const textClass = classNames(\"TotalTime__text\", {\r\n    \"TotalTime__text--visible\": !isEditMode\r\n  });\r\n\r\n  const timeClass = classNames(\"TotalTime__input\",\r\n    `TotalTime__input--${unit}`, {\r\n    \"TotalTime__input--visible\": isEditMode\r\n  });\r\n\r\n  const placeholder = unit.slice(0,3);\r\n\r\n  return (\r\n    <div className={`TotalTime__unit TotalTime__unit--${unit}`}>\r\n      {/* TEXT */}\r\n      <p className={textClass} onClick={onEditModeChange}>\r\n        {time}\r\n      </p>\r\n      {/* INPUT */}\r\n      <input\r\n        id={id}\r\n        name={name}\r\n        className={timeClass}\r\n        placeholder={placeholder}\r\n        maxLength=\"2\"\r\n        value={time}\r\n        onChange={(e) => onTimeChange(e.target.value)}\r\n      />\r\n    </div>\r\n  );\r\n}\r\nexport default EditableTime;","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport icons from '../assets/svg/icons.svg';\r\nimport { getNumFromRange } from '../lib/handlers';\r\nimport '../scss/Spinners.scss';\r\n\r\nconst Spinners = (props) => {\r\n\r\n  const {\r\n    modifier,\r\n    value,\r\n    isValid,\r\n    isEditMode,\r\n    onTimeChange\r\n  } = props;\r\n\r\n  const handleValueChange = (value, operation) => {\r\n    value = value === \"\" ? 0 : value;\r\n    const newValue = getNumFromRange(value, operation, 0, 99);\r\n    onTimeChange(newValue);\r\n  }\r\n\r\n  const spinnersClass = classNames(\"Spinners\", [`Spinners--${modifier}`], {\r\n    \"Spinners--visible\": isEditMode,\r\n    \"Spinners--disabled\": !isValid\r\n  });\r\n\r\n  return (\r\n    <div className={spinnersClass}>\r\n      {/* INCREASE BUTTON */}\r\n      <button\r\n        className=\"Spinners__button Spinners__button--increase\"\r\n        onClick={() => handleValueChange(value, \"increase\")}\r\n        disabled={!isValid}\r\n      >\r\n        <svg className=\"Spinners__svg\" viewBox=\"0 0 512 512\">\r\n          <use href={`${icons}#arrow-up`}></use>\r\n        </svg>\r\n      </button>\r\n      {/* DECREASE BUTTON */}\r\n      <button\r\n        className=\"Spinners__button Spinners__button--decrease\"\r\n        onClick={() => handleValueChange(value, \"decrease\")}\r\n        disabled={!isValid}\r\n      >\r\n        <svg className=\"Spinners__svg\" viewBox=\"0 0 512 512\">\r\n          <use href={`${icons}#arrow-down`}></use>\r\n        </svg>\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\nexport default Spinners;","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport EditableTime from './EditableTime';\r\nimport Spinners from './Spinners'\r\nimport '../scss/TotalTime.scss';\r\n\r\nconst TotalTime = (props) => {\r\n\r\n  const {\r\n    labelName,\r\n    modifier,\r\n    id,\r\n    isMaximized,\r\n    minutes,\r\n    seconds,\r\n    isValid,\r\n    isDisabled,\r\n    isEditMode,\r\n    isCardEditMode,\r\n    onEditModeChange,\r\n    onMinutesChange,\r\n    onSecondsChange,\r\n    onKeyPress\r\n  } = props;\r\n\r\n  const totalTimeClass = classNames(`TotalTime TotalTime--${modifier}`, {\r\n    \"TotalTime--maximized\": isMaximized,\r\n    \"TotalTime--disabled\": isDisabled,\r\n    \"TotalTime--main\": !isCardEditMode && modifier === \"taskTime\"\r\n  });\r\n\r\n  const labelClass = classNames(\"TotalTime__label\", {\r\n    \"TotalTime__label--editMode\": isEditMode\r\n  });\r\n\r\n  const displayClass = classNames(\"TotalTime__display\", {\r\n    \"TotalTime__display--editMode\": isEditMode,\r\n    \"TotalTime__display--incorrect\": !isValid\r\n  });\r\n\r\n  return (\r\n    <div className={totalTimeClass}>\r\n      {/* LABEL */}\r\n      <label\r\n        className={labelClass}\r\n        htmlFor={`${modifier}-${id}`}\r\n        onClick={onEditModeChange}\r\n      >\r\n        {labelName}\r\n      </label>\r\n      <div\r\n        className={displayClass}\r\n        onKeyDown={(e) => onKeyPress(e.key)}\r\n      >\r\n        <Spinners\r\n          modifier=\"minutes\"\r\n          value={minutes}\r\n          isValid={isValid}\r\n          isEditMode={isEditMode}\r\n          onTimeChange={(value) => onMinutesChange(value)}\r\n        />\r\n        {/* MINUTES */}\r\n        <EditableTime\r\n          id={`${modifier}-${id}`}\r\n          name={`${modifier}Minutes`}\r\n          unit=\"minutes\"\r\n          time={minutes}\r\n          isEditMode={isEditMode}\r\n          onTimeChange={(value) => onMinutesChange(value)}\r\n          onEditModeChange={onEditModeChange}\r\n        />\r\n        {/* SEPARATOR */}\r\n        <span className=\"TotalTime__colon\">{` : `}</span>\r\n        {/* SECONDS */}\r\n        <EditableTime\r\n          name={`${modifier}Seconds`}\r\n          unit=\"seconds\"\r\n          time={seconds}\r\n          isEditMode={isEditMode}\r\n          onTimeChange={(value) => onSecondsChange(value)}\r\n          onEditModeChange={onEditModeChange}\r\n        />\r\n        <Spinners\r\n          modifier=\"seconds\"\r\n          value={seconds}\r\n          isValid={isValid}\r\n          isEditMode={isEditMode}\r\n          onTimeChange={(value) => onSecondsChange(value)}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default TotalTime;","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport icons from '../assets/svg/icons.svg';\r\nimport '../scss/CardButtons.scss';\r\n\r\nconst CardButtons = (props) => {\r\n\r\n  const {\r\n    isMaximized,\r\n    editModeActive,\r\n    inputInvalid,\r\n    cardRotatingMode,\r\n    onAcceptButtonClick,\r\n    onRemoveButtonClick,\r\n    onTaskStateChange,\r\n    onBoardStateChange,\r\n    onDrag\r\n  } = props;\r\n\r\n  const handleMaximize = () => {\r\n    onTaskStateChange(prevState => ({\r\n      isMaximized: !prevState.isMaximized\r\n    }));\r\n    onBoardStateChange({ isPlaceholderVisible: false });\r\n  }\r\n\r\n  const cardButtonsClass = classNames(\"CardButtons\", {\r\n    \"CardButtons--maximized\": isMaximized\r\n  });\r\n\r\n  const acceptButtonClass = classNames(\"CardButtons__button\",\r\n  \"CardButtons__button--accept\", {\r\n    \"CardButtons__button--visible\": editModeActive,\r\n    \"CardButtons__button--disabled\": inputInvalid || cardRotatingMode\r\n  });\r\n\r\n  const buttonClass = classNames(\"CardButtons__button\", {\r\n    \"CardButtons__button--disabled\": editModeActive || cardRotatingMode,\r\n    \"CardButtons__button--visible\": isMaximized\r\n  });\r\n  \r\n  return (\r\n    <div className={cardButtonsClass}>\r\n      {/* ACCEPT BUTTON */}\r\n      <button\r\n        className={acceptButtonClass}\r\n        onClick={onAcceptButtonClick}\r\n      >\r\n        <svg className=\"CardButtons__svg\" viewBox=\"0 0 512 512\">\r\n          <use href={`${icons}#tick`}/>\r\n        </svg>\r\n      </button>\r\n\r\n      {/* MINIMIZE BUTTON */}\r\n      <button\r\n        className={buttonClass}\r\n        onClick={handleMaximize}\r\n        disabled={editModeActive || cardRotatingMode}\r\n      >\r\n        <svg className=\"CardButtons__svg\" viewBox=\"0 0 512 512\">\r\n          <use href={`${icons}#minimize`}/>\r\n        </svg>\r\n      </button>\r\n\r\n      {/* DRAG BUTTON */}\r\n      <button\r\n        className={buttonClass}\r\n        onMouseDown={onDrag}\r\n        disabled={editModeActive || cardRotatingMode}\r\n      >\r\n        <svg className=\"CardButtons__svg\" viewBox=\"0 0 100 100\">\r\n          <use href={`${icons}#drag`}/>\r\n        </svg>\r\n      </button>\r\n      \r\n      {/* REMOVE BUTTON */}\r\n      <button\r\n        className={buttonClass}\r\n        onClick={onRemoveButtonClick}\r\n        disabled={editModeActive || cardRotatingMode}\r\n      >\r\n        <svg className=\"CardButtons__svg\" viewBox=\"0 0 512 512\">\r\n          <use href={`${icons}#remove`}/>\r\n        </svg>\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\nexport default CardButtons;","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport '../scss/StopAlert.scss';\r\n\r\nconst StopAlert = (props) => {\r\n  const {\r\n    alertText,\r\n    isStopAlertVisible,\r\n    onStopCancel,\r\n    onStopConfirm\r\n  } = props;\r\n\r\n  const stopAlertClass = classNames(\"StopAlert\", {\r\n    \"StopAlert--visible\": isStopAlertVisible\r\n  });\r\n  \r\n  const containerClass = classNames(\"StopAlert__container\", {\r\n    \"StopAlert__container--visible\": isStopAlertVisible\r\n  });\r\n\r\n  return (\r\n    <section className={stopAlertClass}>\r\n      <div className={containerClass}>\r\n        <h2 className=\"StopAlert__heading\">{alertText}</h2>\r\n        <button\r\n          className=\"StopAlert__button StopAlert__button--stop\"\r\n          onClick={onStopConfirm}\r\n        >\r\n          Yes\r\n        </button>\r\n        <button\r\n          className=\"StopAlert__button StopAlert__button--cancel\"\r\n          onClick={onStopCancel}\r\n        >\r\n          Cancel\r\n        </button>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\nexport default StopAlert;","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport '../scss/TimeDisplay.scss';\r\n\r\nconst TimeDisplay = (props) => {\r\n  const {\r\n    type,\r\n    elapsedTimeArray,\r\n    remainingTimeArray,\r\n    isElapsedMode\r\n  } = props;\r\n\r\n  const elapsedTimeResult = type === 'taskTime'\r\n    ? elapsedTimeArray.join(' : ')\r\n    : elapsedTimeArray.slice(0,2).join(' : ');\r\n\r\n  const remainingTimeResult = type === 'taskTime'\r\n    ? remainingTimeArray.join(' : ')\r\n    : remainingTimeArray.slice(0,2).join(' : ');\r\n\r\n  const elapsedTimeClass = classNames(\"TimeDisplay__type\",\r\n    \"TimeDisplay__type--elapsed\", {\r\n    \"TimeDisplay__type--visible\": isElapsedMode,\r\n    \"TimeDisplay__type--showUp\" : isElapsedMode,\r\n    \"TimeDisplay__type--hideUp\" : !isElapsedMode\r\n  });\r\n  \r\n  const remainingTimeClass = classNames(\"TimeDisplay__type\",\r\n    \"TimeDisplay__type--remaining\", {\r\n    \"TimeDisplay__type--visible\": !isElapsedMode,\r\n    \"TimeDisplay__type--showUp\" : !isElapsedMode,\r\n    \"TimeDisplay__type--hideUp\" : isElapsedMode\r\n  });\r\n\r\n  return (\r\n    <div className='TimeDisplay'>\r\n      <div className={elapsedTimeClass}>{elapsedTimeResult}</div>\r\n      <div className={remainingTimeClass}>{remainingTimeResult}</div>\r\n    </div>\r\n  );\r\n}\r\nexport default TimeDisplay;","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport TimeDisplay from './TimeDisplay';\r\nimport '../scss/Countdown.scss';\r\n\r\nconst Countdown = (props) => {\r\n\r\n  const {\r\n    modifier,\r\n    isElapsedMode,\r\n    elapsedTimeArray,\r\n    remainingTimeArray,\r\n    isCountdownVisible,\r\n    totalBreaks\r\n  } = props;\r\n\r\n  const countdownClass = classNames(`Countdown Countdown--${modifier}`, {\r\n    \"Countdown--visible\": isCountdownVisible,\r\n    \"showFromRight\": isCountdownVisible && totalBreaks > 0,\r\n    \"hideToLeft\": !isCountdownVisible,\r\n  });\r\n\r\n  return (\r\n    <div className={countdownClass}>\r\n\r\n      { /* ACTIVE MODE */\r\n        modifier === 'taskTime'\r\n        ? <h3 className=\"Countdown__heading\">Working Mode</h3>\r\n        : <h3 className=\"Countdown__heading\">Break Mode</h3>\r\n      }\r\n      { /* ELAPSED / REMAINING TIME */\r\n        isElapsedMode\r\n        ? <p className=\"Countdown__timeType\">Elapsed Time</p>\r\n        : <p className=\"Countdown__timeType\">Remaining Time</p>\r\n      }\r\n      {/* TIMER DISPLAY */}\r\n      <TimeDisplay\r\n        type={modifier}\r\n        isElapsedMode={isElapsedMode}\r\n        elapsedTimeArray={elapsedTimeArray}\r\n        remainingTimeArray={remainingTimeArray}\r\n      />\r\n    </div>\r\n  );\r\n}\r\nexport default Countdown;","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport '../scss/Progress.scss';\r\n\r\nconst Progress = (props) => {\r\n  const {\r\n    modifier,\r\n    isVisible,\r\n    isElapsedMode,\r\n    elapsedPercent,\r\n    remainingPercent\r\n  } = props;\r\n\r\n  const progressClass = classNames(\"Progress\",\r\n  `Progress--${modifier}`, {\r\n    \"Progress--visible\": isVisible\r\n  });\r\n\r\n  const elapsedPercentClass = classNames(\"Progress__percent\",\r\n  `Progress__percent--${modifier}`, {\r\n    \"Progress__percent--visible\": isElapsedMode\r\n  });\r\n  const remainingPercentClass = classNames(\"Progress__percent\",\r\n    `Progress__percent--${modifier}`, {\r\n    \"Progress__percent--visible\": !isElapsedMode\r\n  });\r\n  const loadingClass = `\r\n    Progress__part Progress__part--loading Progress__part--${modifier}\r\n  `;\r\n  const unloadingClass = `\r\n    Progress__part Progress__part--unloading Progress__part--${modifier}\r\n  `;\r\n\r\n\r\n  const roundedElapsedPercent = `${Math.round(elapsedPercent)}%`;\r\n  const roundedRemainingPercent = `${Math.round(remainingPercent)}%`;\r\n  const loadingWidth = {\r\n    width: `${isElapsedMode ? elapsedPercent : remainingPercent}%`\r\n  };\r\n  const unloadingWidth = {\r\n    width: `${isElapsedMode ? remainingPercent : elapsedPercent}%`\r\n  };\r\n  \r\n  return (\r\n    <section className={progressClass}>\r\n      {/* PROGRESS HEADER */}\r\n      <header className=\"Progress__header\">\r\n        <p className={elapsedPercentClass}>{roundedElapsedPercent}</p>\r\n        <p className={remainingPercentClass}>{roundedRemainingPercent}</p>\r\n      </header>\r\n      {/* PROGRESS BAR */}\r\n      <div className=\"Progress__bar\">\r\n        <div\r\n          className={loadingClass}\r\n          style={loadingWidth}\r\n        ></div>\r\n        <div\r\n          className={unloadingClass}\r\n          style={unloadingWidth}\r\n        ></div>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\nexport default Progress;","import React, { Component } from 'react';\r\nimport classNames from 'classnames';\r\nimport icons from '../assets/svg/icons.svg';\r\nimport '../scss/Controls.scss';\r\n\r\nclass Controls extends Component {\r\n\r\n  handlePlayPauseButton = () => {\r\n    const {\r\n      isTaskTimeActive,\r\n      isBreakTimeActive,\r\n      onTimerStateChange,\r\n      onCardStateChange,\r\n    } = this.props;\r\n\r\n    if (isTaskTimeActive || isBreakTimeActive) {\r\n      onCardStateChange(prevState => ({\r\n        isTaskTimeActive: !prevState.isTaskTimeActive,\r\n        isBreakTimeActive: !prevState.isBreakTimeActive\r\n      }));\r\n      onTimerStateChange({ previousTime: Date.now() });\r\n    }\r\n    if (isTaskTimeActive) {\r\n      onTimerStateChange(prevState => ({\r\n        totalBreaks: prevState.totalBreaks + 1\r\n      }));\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    const {\r\n      isTaskTimeActive,\r\n      onStopButtonClick,\r\n      cardRotatingMode,\r\n      onDisplayModeChange\r\n    } = this.props;\r\n\r\n    const svgPlayClass = classNames(\"Controls__svg\", {\r\n      \"Controls__svg--hidden\": isTaskTimeActive\r\n    });\r\n    const svgPauseClass = classNames(\"Controls__svg\", {\r\n      \"Controls__svg--hidden\": !isTaskTimeActive\r\n    });\r\n\r\n    const playPauseButtonClass = classNames(\"Controls__button\",\r\n    \"Controls__button--playPause\", {\r\n      \"Controls__button--disabled\": cardRotatingMode\r\n    });\r\n\r\n    const stopButtonClass = classNames(\"Controls__button\",\r\n    \"Controls__button--stop\", {\r\n      \"Controls__button--disabled\": cardRotatingMode\r\n    });\r\n\r\n    const toggleButtonClass = classNames(\"Controls__button\",\r\n    \"Controls__button--toggle\", {\r\n      \"Controls__button--disabled\": cardRotatingMode\r\n    });\r\n\r\n    return (\r\n      <div className=\"Controls\">\r\n        {/* PLAY / PAUSE BUTTON */}\r\n        <button\r\n          className={playPauseButtonClass}\r\n          onClick={this.handlePlayPauseButton}\r\n          disabled={cardRotatingMode}\r\n        >\r\n          <svg className={svgPlayClass} viewBox=\"0 0 100 100\">\r\n            <use href={`${icons}#play`} />\r\n          </svg>\r\n          <svg className={svgPauseClass} viewBox=\"0 0 100 100\">\r\n            <use href={`${icons}#pause`} />\r\n          </svg>\r\n        </button>\r\n  \r\n        {/* STOP BUTTON */}\r\n        <button\r\n          className={stopButtonClass}\r\n          onClick={onStopButtonClick}\r\n          disabled={cardRotatingMode}\r\n        >\r\n          <svg className=\"Controls__svg\" viewBox=\"0 0 100 100\">\r\n            <use href={`${icons}#stop`} />\r\n          </svg>\r\n        </button>\r\n  \r\n        {/* TOGGLE BUTTON */}\r\n        <button\r\n          className={toggleButtonClass}\r\n          onClick={onDisplayModeChange}\r\n          disabled={cardRotatingMode}\r\n        >\r\n          <svg className=\"Controls__svg\" viewBox=\"0 0 100 100\">\r\n            <use href={`${icons}#toggle`} />\r\n          </svg>\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Controls;","import React, { Component } from 'react';\r\nimport { formatTimeResult } from '../lib/handlers';\r\nimport classNames from 'classnames';\r\nimport icons from '../assets/svg/icons.svg';\r\nimport '../scss/Finish.scss';\r\n\r\nclass Finish extends Component {\r\n\r\n  render() {\r\n\r\n    const {\r\n      taskName,\r\n      isTaskFinished,\r\n      onTaskRemove,\r\n      onTimerRestart,\r\n      id\r\n    } = this.props;\r\n    const {\r\n      totalBreakTime,\r\n      totalBreaks,\r\n      elapsedBreakTime,\r\n      elapsedBreakTimeArray,\r\n      overallTime,\r\n      overallTimeArray\r\n    } = this.props.state;\r\n  \r\n    const breaksAmount = totalBreaks > 1\r\n      ? ` ${totalBreaks} breaks `\r\n      : totalBreaks === 1 ? ` ${totalBreaks} break ` : \" no brakes \";\r\n\r\n    const breakPercent = totalBreaks\r\n      ? ` ${Math.round(elapsedBreakTime / overallTime * 100)}%`\r\n      : \"\";\r\n\r\n    const overallTimeResult = formatTimeResult(overallTimeArray);\r\n    const breakTimeResult = formatTimeResult(elapsedBreakTimeArray, elapsedBreakTime);\r\n    const finishClass = classNames(\"Finish\", {\r\n      [`Finish--success`]: isTaskFinished,\r\n      [`Finish--failure`]: !isTaskFinished\r\n    });\r\n\r\n    return (\r\n      <section className={finishClass}>\r\n  \r\n        {/* FINISH HEADING */}\r\n        { isTaskFinished\r\n          ?\r\n          <h2 className=\"Finish__heading\">\r\n            Time is up!\r\n          </h2>\r\n          :\r\n          totalBreakTime === 0\r\n            ?\r\n            <h2 className=\"Finish__heading\">\r\n              No breaks allowed!\r\n            </h2>\r\n            :\r\n            <h2 className=\"Finish__heading\">\r\n              Too long break!\r\n            </h2>\r\n        }\r\n        {/* TASK FINISHED MESSAGE */}\r\n        { isTaskFinished\r\n          ?\r\n          <p className=\"Finish__message\">\r\n            You have finished your task: <br />\r\n            <span className=\"Finish__accent\">{`\"${taskName}\"`}</span><br />\r\n            in\r\n            <span className=\"Finish__accent\">{overallTimeResult}</span>\r\n            {`${elapsedBreakTime > 0 ? \" including break time.\" : \".\"}`} <br />\r\n            You had\r\n            <span className=\"Finish__accent\">{breaksAmount}</span>\r\n            during this task\r\n            <span className=\"Finish__accent\">{breakTimeResult}</span>\r\n            {totalBreaks ? \" long, what makes it around\" : \"\"}\r\n            <span className=\"Finish__accent\">{breakPercent}</span>\r\n            {totalBreaks ? \" of all time.\" : \".\"}\r\n          </p>\r\n          :\r\n          totalBreakTime === 0\r\n          ? <p className=\"Finish__message\">\r\n              You cannot have any breaks during this task! Try again..\r\n            </p>\r\n            :\r\n            <p className=\"Finish__message\">\r\n              You spent too much time on breaks! <br />\r\n              You had\r\n              <span className=\"Finish__accent\">{breaksAmount}</span>\r\n              during this task\r\n              <span className=\"Finish__accent\">{breakTimeResult}</span>\r\n              {totalBreaks ? \" long, what makes it around\" : \"\"}\r\n              <span className=\"Finish__accent\">{breakPercent}</span>\r\n              {totalBreaks ? \" of all time.\" : \".\"}\r\n            </p>\r\n        }\r\n        {/* RESTART BUTTON */}\r\n        <button\r\n          className=\"Finish__button Finish__button--restart\"\r\n          onClick={onTimerRestart}\r\n        >\r\n          <svg className=\"Finish__svg\" viewBox=\"0 0 100 100\">\r\n            <use href={`${icons}#retry`}/>\r\n          </svg>\r\n        </button>\r\n\r\n        {/* REMOVE BUTTON */}\r\n        <button\r\n          className=\"Finish__button Finish__button--remove\"\r\n          onClick={() => onTaskRemove(id)}\r\n        >\r\n          <svg className=\"Task__svg\" viewBox=\"0 0 512 512\">\r\n            <use href={`${icons}#remove`}/>\r\n          </svg>\r\n        </button>\r\n      </section>\r\n    );\r\n  }\r\n}\r\nexport default Finish;","import React, {Component} from 'react';\r\nimport classNames from 'classnames';\r\nimport Countdown from './Countdown';\r\nimport StopAlert from './StopAlert.js';\r\nimport Progress from './Progress';\r\nimport Controls from './Controls';\r\nimport Finish from './Finish.js';\r\nimport { getTimeArray, breaksAmount } from '../lib/handlers';\r\nimport { cardFlipTime } from '../lib/globalVariables';\r\nimport '../scss/Timer.scss';\r\n\r\nclass Timer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const {\r\n      startTime,\r\n      totalTaskTime,\r\n      totalBreakTime,\r\n      totalTaskTimeArray,\r\n      totalBreakTimeArray\r\n    } = this.props.state;\r\n\r\n    this.state = {\r\n      // visibility\r\n      isStopAlertVisible: false,\r\n      isTimerVisible: false,\r\n      // modes\r\n      isTaskTimeElapsedMode: true,\r\n      isBreakTimeElapsedMode: true,\r\n      isTaskFinished: false,\r\n      isBreakFinished: false,\r\n      // total\r\n      totalTaskTime,\r\n      totalBreakTime,\r\n      totalBreaks: 0,\r\n      // elapsed\r\n      elapsedTaskTime: 0,\r\n      elapsedTaskPercent: 0,\r\n      elapsedTaskTimeArray: ['00','00','00'],\r\n      elapsedBreakTime: 0,\r\n      elapsedBreakPercent: 0,\r\n      elapsedBreakTimeArray: ['00','00','00'],\r\n      //remaining\r\n      remainingTaskTime: 0,\r\n      remainingTaskPercent: 100,\r\n      remainingTaskTimeArray: totalTaskTimeArray,\r\n      remainingBreakTime: 0,\r\n      remainingBreakPercent: 100,\r\n      remainingBreakTimeArray: totalBreakTimeArray,\r\n      // overall\r\n      previousTime: startTime,\r\n      overallTime: 0,\r\n      overallTimeArray: ['00','00','00']\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { onCardStateChange } = this.props;\r\n\r\n    onCardStateChange({ isTaskTimeActive: true });\r\n\r\n    this.taskIntervalId = setInterval(() => this.handleTimeTick('Task'), 10);\r\n    this.breakIntervalId = setInterval(() => this.handleTimeTick('Break'), 10);\r\n\r\n    this.timeoutId = setTimeout(() => {\r\n      this.setState({\r\n        isTimerVisible: true,\r\n        previousTime: Date.now()\r\n      });\r\n      onCardStateChange({ isTimerStarted: true });\r\n    }, cardFlipTime);\r\n\r\n    this.handleRotatingStatus();\r\n  }\r\n  \r\n  componentWillUnmount() {\r\n    clearInterval(this.taskIntervalId);\r\n    clearInterval(this.breakIntervalId);\r\n    clearTimeout(this.timeoutId);\r\n    this.props.onCardStateChange({\r\n      isTaskTimeActive: false,\r\n      isBreakTimeActive: false\r\n    });\r\n  }\r\n\r\n  handleRotatingStatus = () => {\r\n    const { onCardStateChange } = this.props;\r\n    setTimeout(() => {\r\n      onCardStateChange({\r\n        isTaskRotatingIn: true,\r\n        isTaskRotatingOut: false\r\n      })\r\n    }, cardFlipTime);\r\n\r\n    setTimeout(() => {\r\n      onCardStateChange({\r\n        isTaskRotatingIn: false\r\n      })\r\n    }, cardFlipTime * 2)\r\n  };\r\n\r\n  handleTimerStop = () => {\r\n    const { onCardStateChange } = this.props;\r\n\r\n    onCardStateChange({\r\n      isTaskRotatingOut: true,\r\n      isTimerStarted: false\r\n    });\r\n\r\n    this.setState({ isStopAlertVisible: false });\r\n\r\n    this.timeoutId = setTimeout(() => {\r\n      onCardStateChange({ isTimerMounted: false });\r\n      clearTimeout(this.timeoutId);\r\n    }, cardFlipTime);\r\n\r\n    this.handleRotatingStatus();\r\n  }\r\n\r\n  handleStateChange = (object) => this.setState(object);\r\n  \r\n  handleTimeDisplayMode = () => {\r\n    const { isTaskTimeActive } = this.props.state;\r\n    const type = isTaskTimeActive ? \"Task\" : \"Break\";\r\n    this.setState(prevState => ({\r\n      [`is${type}TimeElapsedMode`]: !prevState[`is${type}TimeElapsedMode`]\r\n    }));\r\n  }\r\n\r\n  handleAlertVisibility = () => {\r\n    this.setState(prevState => ({\r\n      isStopAlertVisible: !prevState.isStopAlertVisible\r\n    }));\r\n  }\r\n\r\n  handleTimeTick = (type) => { // type = task or break\r\n\r\n    if (this.props.state[`is${type}TimeActive`] && this.props.state.isTimerStarted) {\r\n\r\n      const { previousTime, elapsedTaskTime, elapsedBreakTime } = this.state;\r\n      const { onTaskFinish, onCardStateChange } = this.props;\r\n      const totalTime = this.state[`total${type}Time`];\r\n      const elapsedTime = this.state[`elapsed${type}Time`];\r\n      const remainingTime = this.state[`remaining${type}Time`];\r\n      const overallTime = elapsedTaskTime + elapsedBreakTime;\r\n\r\n      const now = Date.now();\r\n      const elapsedTimeArray   = getTimeArray(elapsedTime);\r\n      const totalTimeArray     = getTimeArray(totalTime);\r\n      const remainingTimeArray = getTimeArray(remainingTime);\r\n      const overallTimeArray   = getTimeArray(overallTime);\r\n      const elapsedPercent   = elapsedTime / totalTime * 100;\r\n      const remainingPercent = remainingTime / totalTime * 100;\r\n\r\n      // when task time finishes\r\n      if (elapsedTime >= totalTime) {\r\n        this.setState({\r\n          [`is${type}TimeActive`]: false,\r\n          [`elapsed${type}Time`]: totalTime,\r\n          [`elapsed${type}TimeArray`]: totalTimeArray,\r\n          [`remaining${type}TimeArray`]: ['00','00','00'],\r\n          [`elapsed${type}Percent`]: 100,\r\n          [`remaining${type}Time`]: 0,\r\n          [`remaining${type}Percent`]: 0,\r\n          [`is${type}Finished`]: true,\r\n          isStopAlertVisible: false,\r\n          isFinishVisible: true,\r\n          overallTime,\r\n          overallTimeArray,\r\n        });\r\n        onCardStateChange({ [`is${type}TimeActive`]: false })\r\n        // update app state\r\n        onTaskFinish({ elapsedTaskTime, elapsedBreakTime });\r\n      // normal task time tick\r\n      } else {\r\n        this.setState({\r\n          previousTime: now,\r\n          [`elapsed${type}Time`]: elapsedTime + (now - previousTime),\r\n          [`elapsed${type}TimeArray`]: elapsedTimeArray,\r\n          [`remaining${type}Time`]: totalTime - elapsedTime,\r\n          [`remaining${type}TimeArray`]: remainingTimeArray,\r\n          [`elapsed${type}Percent`]: elapsedPercent,\r\n          [`remaining${type}Percent`]: remainingPercent\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    \r\n    const {\r\n      taskName,\r\n      isTaskTimeActive,\r\n      isBreakTimeActive\r\n    } = this.props.state;\r\n\r\n    const {\r\n      isTimerVisible,\r\n      isStopAlertVisible,\r\n      isTaskTimeElapsedMode,\r\n      isBreakTimeElapsedMode,\r\n      isTaskFinished,\r\n      isBreakFinished,\r\n      elapsedTaskPercent,\r\n      elapsedTaskTimeArray,\r\n      elapsedBreakPercent,\r\n      elapsedBreakTimeArray,\r\n      remainingTaskPercent,\r\n      remainingTaskTimeArray,\r\n      remainingBreakPercent,\r\n      remainingBreakTimeArray,\r\n      totalBreaks\r\n    } = this.state;\r\n\r\n    const {\r\n      id,\r\n      onTaskRemove,\r\n      cardRotatingMode,\r\n      onCardStateChange\r\n    } = this.props;\r\n\r\n    const timerClass = classNames(\"Timer\", {\r\n      \"Timer--visible\": isTimerVisible,\r\n      \"Timer--taskTime\": isTaskTimeActive || isTaskFinished,\r\n      \"Timer--breakTime\": isBreakTimeActive || isBreakFinished\r\n    });\r\n\r\n    return (\r\n      <section className={timerClass}>\r\n        <h2 className=\"Timer__heading\">{`\"${taskName}\"`}</h2>\r\n        <div className=\"Timer__container\">\r\n          {/* TASK TIME COUNTDOWN */}\r\n          <Countdown\r\n            modifier=\"taskTime\"\r\n            isElapsedMode={isTaskTimeElapsedMode}\r\n            elapsedTimeArray={elapsedTaskTimeArray}\r\n            remainingTimeArray={remainingTaskTimeArray}\r\n            elapsedTaskPercent={elapsedTaskPercent}\r\n            remainingTaskPercent={remainingTaskPercent}\r\n            isCountdownVisible={isTaskTimeActive || isTaskFinished}\r\n            totalBreaks={totalBreaks}\r\n          />\r\n          {/* BREAK TIME COUNTDOWN */}\r\n          <Countdown\r\n            modifier=\"breakTime\"\r\n            isElapsedMode={isBreakTimeElapsedMode}\r\n            elapsedTimeArray={elapsedBreakTimeArray}\r\n            remainingTimeArray={remainingBreakTimeArray}\r\n            elapsedTaskPercent={elapsedBreakPercent}\r\n            remainingTaskPercent={remainingBreakPercent}\r\n            isCountdownVisible={isBreakTimeActive || isBreakFinished}\r\n            totalBreaks={totalBreaks}\r\n          />\r\n        </div>\r\n        {/* BREAKS COUNTER */}\r\n        <p className=\"Timer__breaks\">\r\n          {breaksAmount(totalBreaks)}\r\n        </p>\r\n        {/* CONTROL BUTTONS */}\r\n        <Controls\r\n          isTaskTimeActive={isTaskTimeActive}\r\n          isBreakTimeActive={isBreakTimeActive}\r\n          cardRotatingMode={cardRotatingMode}\r\n          onCardStateChange={onCardStateChange}\r\n          onDisplayModeChange={this.handleTimeDisplayMode}\r\n          onTimerStateChange={this.handleStateChange}\r\n          onStopButtonClick={this.handleAlertVisibility}\r\n        />\r\n        {/* PROGRESS BAR */}\r\n        <div className=\"Timer__progress\">\r\n          <Progress\r\n            modifier=\"taskTime\"\r\n            isVisible={isTaskTimeActive || isTaskFinished}\r\n            isElapsedMode={isTaskTimeElapsedMode}\r\n            elapsedPercent={elapsedTaskPercent}\r\n            remainingPercent={remainingTaskPercent}\r\n          />\r\n          <Progress\r\n            modifier=\"breakTime\"\r\n            isVisible={isBreakTimeActive || isBreakFinished}\r\n            isElapsedMode={isBreakTimeElapsedMode}\r\n            elapsedPercent={elapsedBreakPercent}\r\n            remainingPercent={remainingBreakPercent}\r\n          />\r\n        </div>\r\n        {/* STOP TASK SECTION */}\r\n        <StopAlert\r\n          alertText=\"Do you really want to stop this task?\"\r\n          isStopAlertVisible={isStopAlertVisible}\r\n          onStopCancel={this.handleAlertVisibility}\r\n          onStopConfirm={this.handleTimerStop}\r\n        />\r\n        {/* TASK TIME EXCEEDED */}\r\n        {\r\n          isTaskFinished\r\n          ? <Finish\r\n            isTaskFinished={isTaskFinished}\r\n            taskName={taskName}\r\n            state={this.state}\r\n            onTimerStateChange={this.handleStateChange}\r\n            onTaskRemove={onTaskRemove}\r\n            onTimerRestart={this.handleTimerStop}\r\n            id={id}\r\n          />\r\n          : <div></div>\r\n        }\r\n        {/* BREAK TIME EXCEEDED */}\r\n        {\r\n          isBreakFinished\r\n          ? <Finish\r\n            isTaskFinished={isTaskFinished}\r\n            taskName={taskName}\r\n            state={this.state}\r\n            onTimerStateChange={this.handleStateChange}\r\n            onTaskRemove={onTaskRemove}\r\n            onTimerRestart={this.handleTimerStop}\r\n            id={id}\r\n          />\r\n          : <div></div>\r\n        }\r\n      </section>\r\n    );\r\n  }\r\n}\r\nexport default Timer;","import React, { Component } from 'react';\r\nimport classNames from 'classnames';\r\nimport EditableText from './EditableText.js';\r\nimport TotalTime from './TotalTime.js';\r\nimport CardButtons from './CardButtons';\r\nimport StopAlert from './StopAlert.js';\r\nimport Timer from './Timer.js';\r\nimport { validateTaskName, handleTimeChange } from '../lib/handlers';\r\nimport { cardFlipTime, animationStyle } from '../lib/globalVariables';\r\nimport icons from '../assets/svg/icons.svg';\r\nimport '../scss/Card.scss';\r\n\r\nclass Card extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.card = React.createRef();\r\n    this.transitionTime = 1000;\r\n    const {\r\n      taskName,\r\n      totalTaskTime,\r\n      totalBreakTime,\r\n      totalTaskTimeArray,\r\n      totalBreakTimeArray\r\n    } = this.props.task;\r\n\r\n    const [taskMinutes, taskSeconds] = totalTaskTimeArray;\r\n    const [breakMinutes, breakSeconds] = totalBreakTimeArray;\r\n    \r\n    this.state = {\r\n      isDragging: false,\r\n      isMaximized: true,\r\n      isTaskRotatingIn: true,\r\n      isTaskRotatingOut: false,\r\n      isTaskMounted: false,\r\n      // timer\r\n      isTimerMounted: false,\r\n      isTimerStarted: false,\r\n      isTaskTimeActive: false,\r\n      isBreakTimeActive: false,\r\n      isStopAlertVisible: false,\r\n      originalX: 0,\r\n      originalY: 0,\r\n      translateX: 0,\r\n      translateY: 0,\r\n      taskName,\r\n      taskNameLength: taskName.length,\r\n      taskMinutes,\r\n      taskSeconds,\r\n      breakMinutes,\r\n      breakSeconds,\r\n      totalTaskTime,\r\n      totalBreakTime,\r\n      totalTaskTimeArray,\r\n      totalBreakTimeArray,\r\n      isTaskNameEditMode: false,\r\n      isTaskTimeEditMode: false,\r\n      isBreakTimeEditMode: false,\r\n      isTaskNameValid: true,\r\n      isTaskTimeValid: true,\r\n      isBreakTimeValid: true\r\n    };\r\n  }\r\n  \r\n  componentDidMount = () => {\r\n    this.setState({\r\n      isTaskMounted: true\r\n    });\r\n    this.timeoutId = setTimeout(() => this.setState({\r\n      isTaskRotatingIn: false\r\n    }), cardFlipTime);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('mousemove', this.handleMouseMove);\r\n    window.removeEventListener('mouseup', this.handleMouseUp);\r\n    clearTimeout(this.timeoutId);\r\n  }\r\n\r\n  handleStateChange = (object) => this.setState(object);\r\n\r\n  getHoveredCardSizes = (index) => {\r\n    const {cardIndex, cardsSizes } = this.props;\r\n    return index >= 0\r\n    ? index !== cardIndex\r\n      ? cardsSizes[index]\r\n      : null\r\n    : null; \r\n  }\r\n  \r\n  handleCardsSizes = () => {\r\n    const { onBoardStateChange } = this.props;\r\n    const appNodes = this.card.current.parentNode.children;\r\n\r\n    const cardsSizes = [...appNodes]\r\n    .filter(node => node.classList.contains('Card'))\r\n    .map(card => {\r\n      const { offsetHeight, offsetLeft, offsetTop, offsetWidth } = card;\r\n      return {\r\n        height: offsetHeight,\r\n          width: offsetWidth,\r\n          left: offsetLeft,\r\n          top: offsetTop\r\n        }\r\n      }\r\n    );\r\n    onBoardStateChange({ cardsSizes });\r\n  }\r\n\r\n  handleCardDrag = (e) => {\r\n    const { isMaximized } = this.state;\r\n    if (!isMaximized) {\r\n      this.handleMouseDown(e);\r\n    }\r\n  }\r\n\r\n  //#region [ Horizon ] MOUSE EVENTS\r\n\r\n  handleMouseDown = ({ clientX, clientY }) => {\r\n    const { onBoardStateChange } = this.props;\r\n\r\n    window.addEventListener('mousemove', this.handleMouseMove);\r\n    window.addEventListener('mouseup', this.handleMouseUp);\r\n      \r\n    this.setState({\r\n      originalX: clientX + window.scrollX,\r\n      originalY: clientY + window.scrollY\r\n    });\r\n    this.handleCardsSizes();\r\n\r\n    onBoardStateChange({\r\n      isPlaceholderVisible: true\r\n    });\r\n  };\r\n\r\n  handleMouseMove = ({ clientX, clientY }) => {\r\n    \r\n    const { onBoardStateChange, cardIndex, cardsSizes } = this.props;\r\n    const xPosition = clientX + window.scrollX;\r\n    const yPosition = clientY + window.scrollY;\r\n    const draggedCardSizes = cardsSizes[cardIndex];\r\n\r\n    // find index of hovered card\r\n    const hoveredCardIndex = [...cardsSizes].findIndex(card => {\r\n      const { left, top, width, height } = card;\r\n      const isInsideHorizontally = xPosition >= left && xPosition <= left + width;\r\n      const isInsideVertically = yPosition >= top && yPosition <= top + height;\r\n      //return isInsideHorizontally && isInsideVertically;\r\n      return isInsideHorizontally && isInsideVertically;\r\n    });\r\n    const hoveredCardSizes = this.getHoveredCardSizes(hoveredCardIndex);\r\n\r\n    // set translated position of dragged card\r\n    this.setState(prevState => ({\r\n      translateX: xPosition - prevState.originalX,\r\n      translateY: yPosition - prevState.originalY,\r\n      isDragging: true,\r\n    }));\r\n\r\n    // set translation offsets of hovered card\r\n    if (hoveredCardSizes) {;\r\n      const offsetX = draggedCardSizes.left - hoveredCardSizes.left;\r\n      const offsetY = draggedCardSizes.top - hoveredCardSizes.top;\r\n  \r\n      onBoardStateChange({\r\n        hoveredOffsetX: offsetX,\r\n        hoveredOffsetY: offsetY\r\n      });\r\n    }\r\n\r\n    onBoardStateChange({\r\n      isDraggingMode: true,\r\n      draggedCardIndex: cardIndex,\r\n      hoveredCardIndex: cardIndex !== hoveredCardIndex ? hoveredCardIndex : -1\r\n    });\r\n  };\r\n  \r\n  handleMouseUp = () => {\r\n\r\n    const {\r\n      onBoardStateChange,\r\n      draggedCardIndex,\r\n      hoveredCardIndex,\r\n      cardsSizes } = this.props;\r\n    const delay = 30;    \r\n    const draggedCardSizes = cardsSizes[draggedCardIndex];\r\n    const hoveredCardSizes = this.getHoveredCardSizes(hoveredCardIndex);\r\n      \r\n    window.removeEventListener('mousemove', this.handleMouseMove);\r\n    window.removeEventListener('mouseup', this.handleMouseUp);\r\n\r\n    // if there is no other card hovered\r\n    if (hoveredCardIndex < 0) {\r\n      this.setState({\r\n        originalX: 0,\r\n        originalY: 0,\r\n        translateX: 0,\r\n        translateY: 0,\r\n        isDragging: false\r\n      });\r\n\r\n    } else {\r\n\r\n      const { onTaskOrderChange } = this.props;\r\n      \r\n      if (hoveredCardSizes) {\r\n        const offsetX = hoveredCardSizes.left - draggedCardSizes.left;\r\n        const offsetY = hoveredCardSizes.top - draggedCardSizes.top;\r\n\r\n        const draggedOffsetX =  -1 * (offsetX - this.state.translateX);\r\n        const draggedOffsetY = -1 * (offsetY - this.state.translateY);\r\n\r\n        this.setState({\r\n          originalX: 0,\r\n          originalY: 0,\r\n          translateX: draggedOffsetX,\r\n          translateY: draggedOffsetY\r\n        });\r\n      }\r\n\r\n      const timeoutId = setTimeout(() => {\r\n        this.setState({\r\n          translateX: 0,\r\n          translateY: 0,\r\n          isDragging: false\r\n        });\r\n        this.handleCardsSizes();\r\n        clearTimeout(timeoutId);\r\n      }, delay);\r\n      \r\n      onTaskOrderChange(draggedCardIndex, hoveredCardIndex);\r\n    }\r\n\r\n    onBoardStateChange({\r\n      isDraggingMode: false\r\n    });\r\n\r\n    const timeoutId = setTimeout(() => {\r\n      onBoardStateChange({\r\n        draggedCardIndex: -1,\r\n        hoveredCardIndex: -1\r\n      });\r\n      clearTimeout(timeoutId);\r\n    }, delay);\r\n  };\r\n\r\n  //#endregion\r\n  \r\n  handleKeyPress = (key) => {\r\n    const {\r\n      isTaskNameEditMode,\r\n      isTaskTimeEditMode,\r\n      isBreakTimeEditMode\r\n    } = this.state;\r\n    const editModeActive = isTaskNameEditMode || isTaskTimeEditMode || isBreakTimeEditMode;\r\n    \r\n    if (key === \"Enter\" && editModeActive) this.acceptEditChange();\r\n  }\r\n  \r\n  handleMaximizeCard = () => {\r\n    const { onBoardStateChange } = this.props;\r\n    const { isMaximized } = this.state;\r\n    if (!isMaximized) {\r\n      this.setState({ isMaximized: true });\r\n      onBoardStateChange({ isPlaceholderVisible: false });\r\n    }\r\n  }\r\n\r\n  handleTaskNameChange = (value) => {\r\n    this.setState({\r\n      taskName: value,\r\n      taskNameLength: value.length,\r\n      isTaskNameValid: validateTaskName(value)\r\n    });\r\n  }\r\n  \r\n  handleTimeChange = (minutes, seconds, units, type) => {\r\n    const object = handleTimeChange(minutes, seconds, units, type);\r\n  \r\n    if (type === 'task') {\r\n      if (units === 'minutes') {\r\n        const {\r\n          taskMinutes, totalTaskTime, totalTaskTimeArray, isTaskTimeValid\r\n        } = object;\r\n        this.setState({\r\n          taskMinutes, totalTaskTime, totalTaskTimeArray, isTaskTimeValid\r\n        });\r\n      } else if (units === 'seconds') {\r\n        const {\r\n          taskSeconds, totalTaskTime, totalTaskTimeArray, isTaskTimeValid\r\n        } = object;\r\n        this.setState({\r\n          taskSeconds, totalTaskTime, totalTaskTimeArray, isTaskTimeValid\r\n        });\r\n      }\r\n    } else if (type === 'break') {\r\n      if (units === 'minutes') {\r\n        const {\r\n          breakMinutes, totalBreakTime, totalBreakTimeArray, isBreakTimeValid\r\n        } = object;\r\n        this.setState({\r\n          breakMinutes, totalBreakTime, totalBreakTimeArray, isBreakTimeValid\r\n        });\r\n      } else if (units === 'seconds') {\r\n        const {\r\n          breakSeconds, totalBreakTime, totalBreakTimeArray, isBreakTimeValid\r\n        } = object;\r\n        this.setState({\r\n          breakSeconds, totalBreakTime, totalBreakTimeArray, isBreakTimeValid\r\n        });\r\n      }\r\n    }\r\n    //this.setState({ alertTimeFlag });\r\n  }\r\n  \r\n  handleEditMode = (input) => {\r\n    const { isMaximized } = this.state;\r\n    if (isMaximized) {\r\n      this.setState({ [`is${input}EditMode`]: true });\r\n    }\r\n  }\r\n  \r\n  acceptEditChange = () => {\r\n    const {\r\n      taskName,\r\n      totalTaskTime,\r\n      totalBreakTime,\r\n      totalTaskTimeArray,\r\n      totalBreakTimeArray,\r\n      isTaskNameValid,\r\n      isTaskTimeValid,\r\n      isBreakTimeValid\r\n    } = this.state;\r\n\r\n    const { id } = this.props.task;\r\n    const { onTaskEdit } = this.props;\r\n    const [ taskMinutes, taskSeconds ] = totalTaskTimeArray;\r\n    const [ breakMinutes, breakSeconds ] = totalBreakTimeArray;\r\n  \r\n    if (isTaskNameValid && isTaskTimeValid && isBreakTimeValid) {\r\n      this.setState({\r\n        isTaskNameEditMode: false,\r\n        isTaskTimeEditMode: false,\r\n        isBreakTimeEditMode: false,\r\n        taskMinutes,\r\n        taskSeconds,\r\n        breakMinutes,\r\n        breakSeconds,\r\n      });\r\n      const editedTask = {\r\n        taskName,\r\n        taskMinutes,\r\n        taskSeconds,\r\n        breakMinutes,\r\n        breakSeconds,\r\n        totalTaskTime,\r\n        totalBreakTime,\r\n        totalTaskTimeArray,\r\n        totalBreakTimeArray,\r\n        id\r\n      }\r\n      onTaskEdit(editedTask, 'edit');\r\n    }\r\n  }\r\n  \r\n  handleAlertVisibility = () => {\r\n    this.setState(prevState => ({\r\n      isStopAlertVisible: !prevState.isStopAlertVisible\r\n    }));\r\n  }\r\n  \r\n  handleTaskRemove = () => {\r\n    const { id } = this.props.task;\r\n    const { onTaskRemove } = this.props;\r\n    onTaskRemove(id);\r\n  }\r\n  \r\n  handleStartButton = () => {\r\n    this.setState({\r\n      isTaskRotatingOut: true,\r\n      isTimerMounted: true\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    const {\r\n      task: { id },\r\n      cardIndex,\r\n      isDraggingMode,\r\n      draggedCardIndex,\r\n      hoveredCardIndex,\r\n      hoveredOffsetX,\r\n      hoveredOffsetY,\r\n      onBoardStateChange,\r\n      onTaskFinish\r\n    } = this.props;\r\n    \r\n    \r\n    const {\r\n      isDragging,\r\n      translateX,\r\n      translateY,\r\n      isMaximized,\r\n      isTaskMounted,\r\n      isTimerStarted,\r\n      isTaskTimeActive,\r\n      isTaskRotatingIn,\r\n      isTaskRotatingOut,\r\n      isStopAlertVisible,\r\n      taskName,\r\n      taskNameLength,\r\n      taskMinutes,\r\n      taskSeconds,\r\n      breakMinutes,\r\n      breakSeconds,\r\n      isTaskNameEditMode,\r\n      isTaskTimeEditMode,\r\n      isBreakTimeEditMode,\r\n      isTaskNameValid,\r\n      isTaskTimeValid,\r\n      isBreakTimeValid\r\n    } = this.state;\r\n\r\n    const editModeActive = isTaskNameEditMode\r\n    || isTaskTimeEditMode\r\n    || isBreakTimeEditMode;\r\n    const inputInvalid = !isTaskNameValid\r\n    || !isTaskTimeValid\r\n    || !isBreakTimeValid;\r\n    const cardRotatingMode = isTaskRotatingIn || isTaskRotatingOut;\r\n    const taskNameDisabled = isTaskTimeEditMode\r\n    || isBreakTimeEditMode\r\n    || cardRotatingMode;\r\n    const taskTimeDisabled = isTaskNameEditMode\r\n    || isBreakTimeEditMode\r\n    || cardRotatingMode;\r\n    const breakTimeDisabled = isTaskNameEditMode\r\n    || isTaskTimeEditMode\r\n    || cardRotatingMode;\r\n\r\n    const cardStyle = cardIndex === hoveredCardIndex && isDraggingMode\r\n      ? { transform: `translate(${hoveredOffsetX}px, ${hoveredOffsetY}px)` }\r\n      : { transform: `translate(${translateX}px, ${translateY}px)` };\r\n  \r\n    const cardClass = classNames(\"Card\", {\r\n      \"Card--dragged\": isDragging,\r\n      \"Card--hovered\": cardIndex === hoveredCardIndex && isDraggingMode,\r\n      \"Card--noTransition\": isDragging ||\r\n      (cardIndex === draggedCardIndex && hoveredCardIndex !== -1)\r\n    });\r\n\r\n    const taskClass = classNames(\"Task\", {\r\n      \"Task--visible\": isTaskMounted,\r\n      \"Task--maximized\": isMaximized,\r\n      \"Task--editMode\": editModeActive,\r\n      \"Task--taskActive\": isTaskTimeActive && isTimerStarted,\r\n      \"Task--rotateIn\": isTaskRotatingIn && isTaskMounted,\r\n      \"Task--rotateOut\": isTaskRotatingOut && isTaskMounted\r\n    });\r\n\r\n    const startButtonClass = classNames(\"Task__startButton\", {\r\n      \"Task__startButton--maximized\": isMaximized,\r\n      \"Task__startButton--disabled\": editModeActive || cardRotatingMode\r\n    });\r\n\r\n    return (\r\n      <div\r\n        className={cardClass}\r\n        style={cardStyle}\r\n        onMouseDown={this.handleCardDrag}\r\n        ref={this.card}\r\n      >\r\n        <div\r\n          className={taskClass}\r\n          style={animationStyle}\r\n          onClick={this.handleMaximizeCard}\r\n        >\r\n          {/* TASK  NAME */}\r\n          <EditableText\r\n            output={taskName}\r\n            isValid={isTaskNameValid}\r\n            isMaximized={isMaximized}\r\n            taskNameLength={taskNameLength}\r\n            isDisabled={taskNameDisabled}\r\n            isEditMode={isTaskNameEditMode}\r\n            onEditModeChange={() => this.handleEditMode('TaskName')}\r\n            onTaskNameChange={this.handleTaskNameChange}\r\n          />\r\n\r\n          {/* TOTAL TASK TIME */}\r\n          <TotalTime\r\n            id={id}\r\n            labelName=\"Task Time\"\r\n            modifier=\"taskTime\"\r\n            isMaximized={isMaximized}\r\n            minutes={taskMinutes}\r\n            seconds={taskSeconds}\r\n            isValid={isTaskTimeValid}\r\n            isDisabled={taskTimeDisabled}\r\n            onEditModeChange={() => this.handleEditMode('TaskTime')}\r\n            isEditMode={isTaskTimeEditMode}\r\n            isCardEditMode={editModeActive}\r\n            onKeyPress={this.handleKeyPress}\r\n            onMinutesChange={(value) => \r\n              this.handleTimeChange(value, taskSeconds, 'minutes', 'task')}\r\n            onSecondsChange={(value) => \r\n              this.handleTimeChange(taskMinutes, value, 'seconds', 'task')}\r\n          />\r\n          \r\n          {/* TOTAL BREAK TIME */}\r\n          <TotalTime\r\n            id={id}\r\n            labelName=\"Break Time\"\r\n            modifier=\"breakTime\"\r\n            isMaximized={isMaximized}\r\n            minutes={breakMinutes}\r\n            seconds={breakSeconds}\r\n            isValid={isBreakTimeValid}\r\n            isDisabled={breakTimeDisabled}\r\n            onEditModeChange={() => this.handleEditMode('BreakTime')}\r\n            isEditMode={isBreakTimeEditMode}\r\n            isCardEditMode={editModeActive}\r\n            onKeyPress={this.handleKeyPress}\r\n            onMinutesChange={(value) => \r\n              this.handleTimeChange(value, breakSeconds, 'minutes', 'break')}\r\n            onSecondsChange={(value) => \r\n              this.handleTimeChange(breakMinutes, value, 'seconds', 'break')}\r\n          />\r\n\r\n          {/* CARD BUTTONS */}\r\n          <CardButtons\r\n            isMaximized={isMaximized}\r\n            editModeActive={editModeActive}\r\n            inputInvalid={inputInvalid}\r\n            cardRotatingMode={cardRotatingMode}\r\n            onAcceptButtonClick={this.acceptEditChange}\r\n            onRemoveButtonClick={this.handleAlertVisibility}\r\n            onTaskStateChange={this.handleStateChange}\r\n            onBoardStateChange={onBoardStateChange}\r\n            onDrag={this.handleMouseDown}\r\n          />\r\n\r\n          {/* START BUTTON */}\r\n          <button\r\n            className={startButtonClass}\r\n            disabled={editModeActive || cardRotatingMode}\r\n            onClick={this.handleStartButton}\r\n          >\r\n            <svg className=\"Task__svg\" viewBox=\"0 0 512 512\">\r\n              <use href={`${icons}#play`} />\r\n            </svg>\r\n          </button>\r\n          \r\n          {/* TIMER COMPONENT */}\r\n          {\r\n            this.state.isTimerMounted\r\n            ? <Timer\r\n                state={this.state}\r\n                id={id}\r\n                onTaskRemove={this.handleTaskRemove}\r\n                cardRotatingMode={cardRotatingMode}\r\n                onCardStateChange={this.handleStateChange}\r\n                onTaskFinish={onTaskFinish}\r\n              />\r\n            : <div className=\"empty\"></div>\r\n          }\r\n\r\n          {/* REMOVE TASK ALERT */}\r\n          <StopAlert\r\n            alertText=\"Do you really want to remove this task?\"\r\n            isStopAlertVisible={isStopAlertVisible}\r\n            onStopCancel={this.handleAlertVisibility}\r\n            onStopConfirm={(id) => this.handleTaskRemove(id)}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Card;","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport '../scss/CardPlaceholder.scss';\r\n\r\nconst CardPlaceholder = (props) => {\r\n\r\n  const { placeholderIndex, cardsSizes, isPlaceholderVisible } = props;\r\n  const placeholder = cardsSizes[placeholderIndex];\r\n  let placeholderStyle = {};\r\n\r\n  if (placeholder) {\r\n    const { top, left, width, height } = placeholder;\r\n    placeholderStyle = {\r\n      top,\r\n      left,\r\n      width,\r\n      height\r\n    }\r\n  }\r\n\r\n  const placeholderClass = classNames('CardPlaceholder', {\r\n    'CardPlaceholder--visible': isPlaceholderVisible\r\n  });\r\n  \r\n  return (\r\n\r\n    <div className={placeholderClass} style={placeholderStyle}></div>\r\n  );\r\n}\r\nexport default CardPlaceholder;","import React, { Component } from 'react';\r\nimport classNames from 'classnames';\r\nimport Sidebar from './Sidebar';\r\nimport Creator from './Creator';\r\nimport Card from './Card';\r\nimport CardPlaceholder from './CardPlaceholder';\r\nimport icons from '../assets/svg/icons.svg';\r\nimport '../scss/Board.scss';\r\n\r\nclass Board extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isCreatorVisible: false,\r\n      isPlaceholderVisible: false,\r\n      isSidebarVisible: false,\r\n      // cards\r\n      isDraggingMode: false,\r\n      cardsSizes: [],\r\n      draggedCardIndex: -1,\r\n      hoveredCardIndex: -1,\r\n      hoveredOffsetX: 0,\r\n      hoveredOffsetY: 0\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    window.addEventListener('resize', this.handleWindowResize);\r\n  }\r\n\r\n  componentWillUnmount = () => {\r\n    window.removeEventListener('resize', this.handleWindowResize);\r\n  }\r\n\r\n  handleWindowResize = () => {\r\n    this.setState({\r\n      isPlaceholderVisible: false\r\n    });\r\n  }\r\n\r\n  handleStateChange = (object) => this.setState(object);\r\n\r\n  handleSidebar = (e) => {\r\n    this.setState(prevState => ({\r\n      isSidebarVisible: !prevState.isSidebarVisible\r\n    }));\r\n  }\r\n\r\n  handleSidebarQuit = ({target}) => {\r\n    if (/Board--sidebarMode/.test(target.className)) this.handleSidebar();\r\n  }\r\n\r\n  handleTaskRemove = (id) => {\r\n    const { onTaskRemove } = this.props;\r\n    onTaskRemove(id);\r\n    this.setState({\r\n      isPlaceholderVisible: false\r\n    });\r\n  }\r\n  \r\n  handleNewTaskButton = () => {\r\n    this.setState({\r\n      isCreatorVisible: true,\r\n      isPlaceholderVisible: false\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      users,\r\n      loggedUserId,\r\n      onUserUpdate,\r\n      onTaskOrderChange,\r\n      onUserLogout,\r\n      onUserRemove,\r\n      onTaskFinish,\r\n      onTaskEdit\r\n    } = this.props;\r\n\r\n    const {\r\n      isCreatorVisible,\r\n      isSidebarVisible,\r\n      isPlaceholderVisible,\r\n      isDraggingMode,\r\n      hoveredCardIndex,\r\n      draggedCardIndex,\r\n      hoveredOffsetX,\r\n      hoveredOffsetY,\r\n      cardsSizes\r\n    } = this.state;\r\n\r\n    const { tasks } = users[loggedUserId];\r\n    \r\n    //#region [ Horizon ] CLASS NAMES\r\n\r\n    const boardClass = classNames('Board', {\r\n      'Board--sidebarMode': isSidebarVisible\r\n    });\r\n\r\n    const newTaskButtonClass = classNames('Board__newTaskButton', {\r\n      'Board__newTaskButton--visible': !isCreatorVisible\r\n    });\r\n\r\n    const creatorContainerClass = classNames('Board__creator', {\r\n      'Board__creator--maximized': isCreatorVisible\r\n    });\r\n\r\n    const boardLogoClass = classNames('Board__logo', {\r\n      'Board__logo--visible': isSidebarVisible\r\n    });\r\n\r\n    //#endregion\r\n\r\n    return (\r\n      <section className={boardClass} /* onClick={this.handleSidebarQuit} */>\r\n        <header className=\"Board__header\">\r\n\r\n          {/* TEXT LOGO */}\r\n          <h2 className={boardLogoClass}>\r\n            task<span className=\"Board__logo--color\">Timer</span>\r\n          </h2>\r\n\r\n          {/* BURGER BUTTON */}\r\n          <button className=\"Board__burger\" onClick={this.handleSidebar}>\r\n            <svg className=\"Board__burgerSvg\" viewBox=\"0 0 100 100\">\r\n              <use href={`${icons}#burger`}></use>\r\n            </svg>\r\n          </button>\r\n        </header>\r\n\r\n        {/* SIDEBAR */}\r\n        <Sidebar\r\n          block=\"userEdit\"\r\n          isSidebarVisible={isSidebarVisible}\r\n          users={users}\r\n          loggedUserId={loggedUserId}\r\n          onUserUpdate={onUserUpdate}\r\n          onUserLogout={onUserLogout}\r\n          onUserRemove={onUserRemove}\r\n        />\r\n\r\n        {/* TASK CARDS */}\r\n        {tasks.map((task, index) => (\r\n          <Card\r\n            key={`card-${task.id}`}\r\n            task={task}\r\n            cardIndex={index}\r\n            onTaskOrderChange={onTaskOrderChange}\r\n            onBoardStateChange={this.handleStateChange}\r\n            onTaskRemove={this.handleTaskRemove}\r\n            isDraggingMode={isDraggingMode}\r\n            hoveredCardIndex={hoveredCardIndex}\r\n            draggedCardIndex={draggedCardIndex}\r\n            hoveredOffsetX={hoveredOffsetX}\r\n            hoveredOffsetY={hoveredOffsetY}\r\n            cardsSizes={cardsSizes}\r\n            onTaskFinish={onTaskFinish}\r\n            onTaskEdit={onTaskEdit}\r\n          />\r\n        ))}\r\n\r\n        {/* CARDS PLACEHOLDERS */}\r\n        {tasks.map((task, index) => (\r\n          <CardPlaceholder\r\n            key={`placeholder-${index}`}\r\n            placeholderIndex={index}\r\n            cardsSizes={cardsSizes}\r\n            isPlaceholderVisible={isPlaceholderVisible}\r\n          />\r\n        ))}\r\n\r\n        {/* CREATE NEW TASK */}\r\n        <section className={creatorContainerClass}>\r\n          <button\r\n            className={newTaskButtonClass}\r\n            onClick={this.handleNewTaskButton}\r\n          >\r\n            Add New Task\r\n          </button>\r\n          {\r\n            isCreatorVisible\r\n            ? <Creator\r\n                isVisible={isCreatorVisible}\r\n                onBoardStateChange={this.handleStateChange}\r\n                onTaskEdit={onTaskEdit}\r\n              />\r\n            : <div className=\"empty\"></div>\r\n          }\r\n        </section>\r\n      </section>\r\n    );\r\n  }\r\n}\r\nexport default Board;","import React from 'react';\r\nimport icons from '../assets/svg/logo.svg';\r\nimport '../scss/Logo.scss';\r\n\r\nconst Logo = () => {\r\n  return (\r\n    <div className=\"Logo\">\r\n      <svg className=\"Logo__base\" viewBox=\"0 0 512 612\">\r\n        <use href={`${icons}#logoBase`}></use>\r\n      </svg>\r\n      <svg className=\"Logo__letter\" viewBox=\"0 0 512 612\">\r\n        <use href={`${icons}#logoLetter`}></use>\r\n      </svg>\r\n      <svg className=\"Logo__shadow Logo__shadow--base\" viewBox=\"0 0 512 612\">\r\n        <use href={`${icons}#logoBaseShadow`}></use>\r\n      </svg>\r\n      <svg className=\"Logo__shadow Logo__shadow--letter\" viewBox=\"0 0 512 612\">\r\n        <use href={`${icons}#logoLetterShadow`}></use>\r\n      </svg>\r\n    </div>\r\n  );\r\n}\r\nexport default Logo;","export default [\r\n  {\r\n    \"login\": \"Jakub\",\r\n    \"password\": \"password\",\r\n    \"date\": [15,0,2020,16,6],\r\n    \"rememberMe\": true,\r\n    \"stats\": {\r\n      \"finishedTasks\": 411,\r\n      \"avgTaskTime\": 0,\r\n      \"avgBreakTime\": 0,\r\n      \"avgTasksPerDay\": 0,\r\n      \"dateCreated\": null,\r\n      \"totalTaskTime\": 943425654,\r\n      \"totalBreakTime\": 126456565\r\n    },\r\n    \"tasks\": [\r\n      {\r\n        taskName: \"Add new feature to TaskTimer App\",\r\n        taskMinutes: 25,\r\n        taskSeconds: 0,\r\n        breakMinutes: 8,\r\n        breakSeconds: 0,\r\n        totalTaskTime: 1500000,\r\n        totalBreakTime: 480000,\r\n        totalTaskTimeArray: [\"25\",\"00\",\"00\"],\r\n        totalBreakTimeArray: [\"08\",\"00\",\"00\"],\r\n        id: 1111111111\r\n      },\r\n      {\r\n        taskName: \"Stretch your neck\",\r\n        taskMinutes: 0,\r\n        taskSeconds: 15,\r\n        breakMinutes: 0,\r\n        breakSeconds: 5,\r\n        totalTaskTime: 15000,\r\n        totalBreakTime: 5000,\r\n        totalTaskTimeArray: [\"00\",\"15\",\"00\"],\r\n        totalBreakTimeArray: [\"00\",\"05\",\"00\"],\r\n        id: 1111111112\r\n      },\r\n      {\r\n        taskName: \"Do quick physical exercises\",\r\n        taskMinutes: 8,\r\n        taskSeconds: 30,\r\n        breakMinutes: 1,\r\n        breakSeconds: 30,\r\n        totalTaskTime: 510000,\r\n        totalBreakTime: 90000,\r\n        totalTaskTimeArray: [\"08\",\"30\",\"00\"],\r\n        totalBreakTimeArray: [\"01\",\"30\",\"00\"],\r\n        id: 1111111113\r\n      },\r\n      {\r\n        taskName: \"Update linkedIn profile\",\r\n        taskMinutes: 30,\r\n        taskSeconds: 0,\r\n        breakMinutes: 10,\r\n        breakSeconds: 0,\r\n        totalTaskTime: 1800000,\r\n        totalBreakTime: 600000,\r\n        totalTaskTimeArray: [\"30\",\"00\",\"00\"],\r\n        totalBreakTimeArray: [\"10\",\"00\",\"00\"],\r\n        id: 1111111114\r\n      },\r\n      {\r\n        taskName: \"Take a breath\",\r\n        taskMinutes: 0,\r\n        taskSeconds: 5,\r\n        breakMinutes: 0,\r\n        breakSeconds: 0,\r\n        totalTaskTime: 5000,\r\n        totalBreakTime: 0,\r\n        totalTaskTimeArray: [\"00\",\"05\",\"00\"],\r\n        totalBreakTimeArray: [\"00\",\"00\",\"00\"],\r\n        id: 1111111115\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"login\": \"Anna P\",\r\n    \"password\": \"password\",\r\n    \"date\": [12,10,2019,18,12],\r\n    \"rememberMe\": false,\r\n    \"stats\": {\r\n      \"finishedTasks\": 1026,\r\n      \"avgTaskTime\": 0,\r\n      \"avgBreakTime\": 0,\r\n      \"avgTasksPerDay\": 0,\r\n      \"dateCreated\": null,\r\n      \"totalTaskTime\": 2487251436,\r\n      \"totalBreakTime\": 802548951\r\n    },\r\n    \"tasks\": [\r\n      {\r\n        taskName: \"Make a training job interview with Jakub\",\r\n        taskMinutes: \"27\",\r\n        taskSeconds: \"00\",\r\n        breakMinutes: \"8\",\r\n        breakSeconds: \"\",\r\n        totalTaskTime: 1620000,\r\n        totalBreakTime: 480000,\r\n        totalTaskTimeArray: [\"27\", \"00\", \"00\"],\r\n        totalBreakTimeArray: [\"08\", \"00\", \"00\"],\r\n        id: 1111111116\r\n      },\r\n      {\r\n        taskName: \"Feed the cat\",\r\n        taskMinutes: \"04\",\r\n        taskSeconds: \"00\",\r\n        breakMinutes: \"00\",\r\n        breakSeconds: \"00\",\r\n        totalTaskTime: 240000,\r\n        totalBreakTime: 0,\r\n        totalTaskTimeArray: [\"04\", \"00\", \"00\"],\r\n        totalBreakTimeArray: [\"00\", \"00\", \"00\"],\r\n        id: 1111111117\r\n      },\r\n      {\r\n        taskName: \"Arrange some meetings with clients for tomorrow\",\r\n        taskMinutes: \"25\",\r\n        taskSeconds: \"00\",\r\n        breakMinutes: \"08\",\r\n        breakSeconds: \"00\",\r\n        totalTaskTime: 1500000,\r\n        totalBreakTime: 480000,\r\n        totalTaskTimeArray: [\"25\", \"00\", \"00\"],\r\n        totalBreakTimeArray: [\"08\", \"00\", \"00\"],\r\n        id: 1111111118\r\n      },\r\n      {\r\n        taskName: \"Buy new shoes\",\r\n        taskMinutes: \"15\",\r\n        taskSeconds: \"\",\r\n        breakMinutes: \"2\",\r\n        breakSeconds: \"\",\r\n        totalTaskTime: 900000,\r\n        totalBreakTime: 120000,\r\n        totalTaskTimeArray: [\"15\", \"00\", \"00\"],\r\n        totalBreakTimeArray: [\"02\", \"00\", \"00\"],\r\n        id: 1111111119\r\n      },\r\n      {\r\n        taskName: \"Do research about climate change\",\r\n        taskMinutes: \"30\",\r\n        taskSeconds: \"\",\r\n        breakMinutes: \"12\",\r\n        breakSeconds: \"\",\r\n        totalTaskTime: 1800000,\r\n        totalBreakTime: 720000,\r\n        totalTaskTimeArray: [\"30\", \"00\", \"00\"],\r\n        totalBreakTimeArray: [\"12\", \"00\", \"00\"],\r\n        id: 1111111120\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"login\": \"Agnieszka\",\r\n    \"password\": \"password\",\r\n    \"date\": [3,2,2020,14,38],\r\n    \"rememberMe\": false,\r\n    \"stats\": {\r\n      \"finishedTasks\": 97,\r\n      \"avgTaskTime\": 0,\r\n      \"avgBreakTime\": 0,\r\n      \"avgTasksPerDay\": 0,\r\n      \"dateCreated\": null,\r\n      \"totalTaskTime\": 214548546,\r\n      \"totalBreakTime\": 75455844\r\n    },\r\n    \"tasks\": [\r\n      {\r\n        taskName: \"Study for the exam\",\r\n        taskMinutes: \"25\",\r\n        taskSeconds: \"\",\r\n        breakMinutes: \"8\",\r\n        breakSeconds: \"\",\r\n        totalTaskTime: 1500000,\r\n        totalBreakTime: 480000,\r\n        totalTaskTimeArray: [\"25\", \"00\", \"00\"],\r\n        totalBreakTimeArray: [\"08\", \"00\", \"00\"],\r\n        id: 1111111121\r\n      },\r\n      {\r\n        taskName: \"Bake some cookies\",\r\n        taskMinutes: \"35\",\r\n        taskSeconds: \"\",\r\n        breakMinutes: \"10\",\r\n        breakSeconds: \"\",\r\n        totalTaskTime: 2100000,\r\n        totalBreakTime: 600000,\r\n        totalTaskTimeArray: [\"35\", \"00\", \"00\"],\r\n        totalBreakTimeArray: [\"10\", \"00\", \"00\"],\r\n        id: 1111111122\r\n      },\r\n      {\r\n        taskName: \"Read some news\",\r\n        taskMinutes: \"15\",\r\n        taskSeconds: \"\",\r\n        breakMinutes: \"2\",\r\n        breakSeconds: \"\",\r\n        totalTaskTime: 900000,\r\n        totalBreakTime: 120000,\r\n        totalTaskTimeArray: [\"15\", \"00\", \"00\"],\r\n        totalBreakTimeArray: [\"02\", \"00\", \"00\"],\r\n        id: 1111111123\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"login\": \"Aleksander\",\r\n    \"password\": \"password\",\r\n    \"date\": [16,1,2020,14,58],\r\n    \"rememberMe\": false,\r\n    \"stats\": {\r\n      \"finishedTasks\": 202,\r\n      \"avgTaskTime\": 0,\r\n      \"avgBreakTime\": 0,\r\n      \"avgTasksPerDay\": 0,\r\n      \"dateCreated\": null,\r\n      \"totalTaskTime\": 455102045,\r\n      \"totalBreakTime\": 155544784\r\n    },\r\n    \"tasks\": [\r\n      {\r\n        taskName: \"Prepare 3d printer for a new project\",\r\n        taskMinutes: \"25\",\r\n        taskSeconds: \"00\",\r\n        breakMinutes: \"09\",\r\n        breakSeconds: \"00\",\r\n        totalTaskTime: 1500000,\r\n        totalBreakTime: 540000,\r\n        totalTaskTimeArray: [\"25\", \"00\", \"00\"],\r\n        totalBreakTimeArray: [\"09\", \"00\", \"00\"],\r\n        id: 1111111124\r\n      },\r\n      {\r\n        taskName: \"Meet the client\",\r\n        taskMinutes: \"40\",\r\n        taskSeconds: \"00\",\r\n        breakMinutes: \"00\",\r\n        breakSeconds: \"00\",\r\n        totalTaskTime: 2400000,\r\n        totalBreakTime: 0,\r\n        totalTaskTimeArray: [\"40\", \"00\", \"00\"],\r\n        totalBreakTimeArray: [\"00\", \"00\"],\r\n        id: 1111111125\r\n      },\r\n      {\r\n        taskName: \"Fix the kitchen's sink\",\r\n        taskMinutes: \"30\",\r\n        taskSeconds: \"\",\r\n        breakMinutes: \"5\",\r\n        breakSeconds: \"\",\r\n        totalTaskTime: 1800000,\r\n        totalBreakTime: 300000,\r\n        totalTaskTimeArray: [\"30\", \"00\", \"00\"],\r\n        totalBreakTimeArray: [\"05\", \"00\", \"00\"],\r\n        id: 1111111126\r\n      },\r\n      {\r\n        taskName: \"Buy a new keyboard\",\r\n        taskMinutes: \"20\",\r\n        taskSeconds: \"\",\r\n        breakMinutes: \"4\",\r\n        breakSeconds: \"\",\r\n        totalTaskTime: 1200000,\r\n        totalBreakTime: 240000,\r\n        totalTaskTimeArray: [\"20\", \"00\", \"00\"],\r\n        totalBreakTimeArray: [\"04\", \"00\", \"00\"],\r\n        id: 1111111127\r\n      }\r\n    ]\r\n  }\r\n]","import React, {Component} from 'react';\r\nimport Intro from './Intro';\r\nimport UserPanel from './UserPanel';\r\nimport Board from './Board';\r\nimport Logo from './Logo';\r\nimport initialUsers from '../lib/initialUsers';\r\nimport { makeTwoDigits, getTotalDays, getTimeArray } from '../lib/handlers';\r\nimport '../scss/App.scss';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      // visibility\r\n      isAppLoaded: false,\r\n      isIntroVisible: true,\r\n      isUserPanelVisible: true,\r\n      isBoardVisible: false,\r\n      // users\r\n      users: null,\r\n      loggedUserId: '',\r\n      createdAt: null\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    // update app state from local storage\r\n    if (localStorage.getItem('taskTimerUsers')) {\r\n      const taskTimerUsers = JSON.parse(localStorage.getItem('taskTimerUsers'));\r\n\r\n      this.setState({\r\n        isAppLoaded: true,\r\n        users: taskTimerUsers\r\n      });\r\n\r\n    // set state and export to local storage based on initial users object\r\n    } else {\r\n      //const { users } = this.state;\r\n      let users = {};\r\n\r\n      for (let user of initialUsers) {\r\n        const {\r\n          finishedTasks,\r\n          totalTaskTime,\r\n          totalBreakTime\r\n        } = user.stats;\r\n\r\n        // set date of profile creation\r\n        let [day, month, year, hr, min] = user.date;\r\n        const date = new Date(year, month, day, hr, min);\r\n        const userId = date.getTime();\r\n        // set stat displaying creation date\r\n        day = makeTwoDigits(day);\r\n        month = makeTwoDigits(month + 1);\r\n        hr = makeTwoDigits(hr);\r\n        min = makeTwoDigits(min);\r\n        \r\n        const totalDays = getTotalDays(date);\r\n        console.log('totalDays', totalDays);\r\n        const avgTasksPerDay = Math.round(finishedTasks / totalDays);\r\n        const avgTaskTime = getTimeArray(totalTaskTime / finishedTasks);\r\n        const avgBreakTime = getTimeArray(totalBreakTime / finishedTasks);\r\n        const [ taskMin, taskSec ] = avgTaskTime;\r\n        const [ breakMin, breakSec ] = avgBreakTime;\r\n        const formattedAvgTaskTime = `${taskMin} min ${taskSec} sec`;\r\n        const formattedAvgBreakTime = `${breakMin} min ${breakSec} sec`;\r\n\r\n        user.stats.avgTasksPerDay = avgTasksPerDay;\r\n        user.stats.avgBreakTime = formattedAvgBreakTime;\r\n        user.stats.avgTaskTime = formattedAvgTaskTime;\r\n        user.stats.dateCreated = `${day}-${month}-${year} ${hr}:${min}`;\r\n        user.createdAt = date;\r\n\r\n        users = { ...users, [userId]: user };\r\n      }\r\n      this.setState({ isAppLoaded: true, users });\r\n    }\r\n    this.exportUsers();\r\n  }\r\n\r\n  componentDidUpdate = () => {\r\n    console.log('APP UPDATED');\r\n    this.exportUsers();\r\n  }\r\n\r\n  componentWillUnmount = () => {\r\n  }\r\n\r\n  handleStateChange = (object) => this.setState(object);\r\n\r\n  exportUsers = () => {\r\n    const { users } = this.state;\r\n    localStorage.setItem('taskTimerUsers', JSON.stringify(users));\r\n  }\r\n\r\n  handleUserLogin = (user, form) => {\r\n    const { users } = this.state;\r\n    const [ loggedUserId ] = Object\r\n    .entries(users)\r\n    .find(([key, value]) => value === user);\r\n\r\n    this.setState(prevState => ({\r\n      isUserPanelVisible: false,\r\n      isBoardVisible: true,\r\n      users: form === 'loginForm' ? this.state.users : [...prevState.users, user],\r\n      loggedUserId\r\n    }));\r\n  }\r\n\r\n  handleUserLogout = () => {\r\n    const { users, loggedUserId } = this.state;\r\n    const user = users[loggedUserId];\r\n    user.rememberMe = false;\r\n\r\n    this.setState(prevState => ({\r\n      users: { ...prevState.users },\r\n      loggedUserId: '',\r\n      isUserPanelVisible: true,\r\n      isBoardVisible: false\r\n    }));\r\n  }\r\n\r\n  handleUserRemove = () => {\r\n    const { users, loggedUserId } = this.state;\r\n    delete users[loggedUserId]; \r\n\r\n    this.setState(prevState => ({\r\n      users: { ...prevState.users },\r\n      isBoardVisible: false,\r\n      isUserPanelVisible: true\r\n    }));\r\n  }\r\n\r\n  handleTaskRemove = (id) => {\r\n    const { users, loggedUserId } = this.state;\r\n    const user = users[loggedUserId];\r\n    user.tasks = user.tasks.filter(task => task.id !== id)\r\n\r\n    this.setState(prevState => ({\r\n      users: { ...prevState.users }\r\n    }));\r\n  }\r\n  \r\n  handleTaskOrder = (dragIndex, dropIndex) => {\r\n    const { users, loggedUserId } = this.state;\r\n    const user = users[loggedUserId];\r\n    const { tasks } = user;\r\n    const updatedTasks = [...tasks];\r\n    updatedTasks.splice(dragIndex, 1, tasks[dropIndex]);\r\n    updatedTasks.splice(dropIndex, 1, tasks[dragIndex]);\r\n    user.tasks = updatedTasks;\r\n\r\n    this.setState(prevState => ({\r\n      users: { ...prevState.users }\r\n    }));\r\n  }\r\n\r\n  handleUserUpdate = (value, prop) => {\r\n    const { users, loggedUserId } = this.state;\r\n    const user = users[loggedUserId];\r\n    user[prop] = value;\r\n    \r\n    this.setState(prevState => ({ \r\n      users: { ...prevState.users }\r\n    }));\r\n  }\r\n\r\n  handleTaskFinish = (results) => {\r\n\r\n    const { users, loggedUserId } = this.state;\r\n    const { elapsedTaskTime, elapsedBreakTime } = results;\r\n    const user = users[loggedUserId];\r\n\r\n    const {\r\n      finishedTasks,\r\n      totalTaskTime,\r\n      totalBreakTime\r\n    } = user.stats;\r\n    \r\n    const totalDays = getTotalDays(user.createdAt);\r\n    const updatedFinishedTasks = finishedTasks + 1;\r\n    const updatedTotalTaskTime = totalTaskTime + elapsedTaskTime;\r\n    const updatedTotalBreakTime = totalBreakTime + elapsedBreakTime;\r\n    const avgTasksPerDay = Math.round(updatedFinishedTasks / totalDays);\r\n    const avgTaskTime = getTimeArray(updatedTotalTaskTime / updatedFinishedTasks);\r\n    const avgBreakTime = getTimeArray(updatedTotalBreakTime / updatedFinishedTasks);\r\n    const [ taskMin, taskSec ] = avgTaskTime;\r\n    const [ breakMin, breakSec ] = avgBreakTime;\r\n    const formattedAvgTaskTime = `${taskMin} min ${taskSec} sec`;\r\n    const formattedAvgBreakTime = `${breakMin} min ${breakSec} sec`;\r\n\r\n    user.stats.finishedTasks = updatedFinishedTasks;\r\n    user.stats.totalTaskTime = updatedTotalTaskTime;\r\n    user.stats.totalBreakTime = updatedTotalBreakTime;\r\n    user.stats.avgTaskTime = formattedAvgTaskTime;\r\n    user.stats.avgBreakTime = formattedAvgBreakTime;\r\n    user.stats.avgTasksPerDay = avgTasksPerDay;\r\n\r\n    this.setState(prevState => ({\r\n      users: { ...prevState.users }\r\n    }));\r\n  }\r\n\r\n  handleTaskEdit = (newTask, option) => {\r\n    const { users, loggedUserId } = this.state;\r\n    const user = users[loggedUserId];\r\n\r\n    if (option === 'edit') {\r\n      const { id } = newTask;\r\n      const tasksIds = user.tasks.map(task => task.id);\r\n      const editedIndex = tasksIds.indexOf(id);\r\n\r\n      user.tasks = [\r\n        ...user.tasks.filter((task, idx) => task.id !== id && idx < editedIndex),\r\n        newTask,\r\n        ...user.tasks.filter((task, idx) => task.id !== id && idx > editedIndex)\r\n      ];        \r\n\r\n    } else if (option === 'add') {\r\n      user.tasks = [...user.tasks, newTask];\r\n    }\r\n\r\n    this.setState(prevState => ({\r\n      users: { ...prevState.users }\r\n    }));\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      isAppLoaded,\r\n      isIntroVisible,\r\n      isUserPanelVisible,\r\n      isBoardVisible,\r\n      users,\r\n      loggedUserId\r\n    } = this.state;\r\n\r\n    return (\r\n      <React.StrictMode>\r\n        <div className=\"App\">\r\n          <h1 className=\"App__heading visuallyhidden\">Task Timer App</h1>\r\n          { /* LOGO ANIMATION */\r\n            isIntroVisible\r\n            ?\r\n            <Intro\r\n              isIntroVisible={isIntroVisible}\r\n              onAppStateChange={this.handleStateChange}\r\n            />\r\n            : <div className=\"empty\"></div>\r\n          }\r\n          { /* USER PANEL */\r\n            isUserPanelVisible && isAppLoaded\r\n            ? <UserPanel\r\n                users={users}\r\n                onUserLogin={this.handleUserLogin}\r\n              />\r\n            : <div className=\"empty\"></div>\r\n          }\r\n          { /* BOARD */\r\n            isBoardVisible\r\n            ?\r\n            <Board\r\n              users={users}\r\n              loggedUserId={loggedUserId}\r\n              onUserUpdate={this.handleUserUpdate}\r\n              onUserLogout={this.handleUserLogout}\r\n              onUserRemove={this.handleUserRemove}\r\n              onTaskRemove={this.handleTaskRemove}\r\n              onTaskOrderChange={this.handleTaskOrder}\r\n              onTaskFinish={this.handleTaskFinish}\r\n              onTaskEdit={this.handleTaskEdit}\r\n            />\r\n            : <div className=\"empty\"></div>\r\n          }\r\n          <Logo />\r\n        </div>\r\n      </React.StrictMode>\r\n    );\r\n  }\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();"],"sourceRoot":""}