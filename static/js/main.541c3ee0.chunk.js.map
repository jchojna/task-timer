{"version":3,"sources":["assets/svg/icons.svg","components/Task.js","components/Time.js","components/Controls.js","components/Display.js","components/Break.js","components/Percentage.js","components/ProgressBar.js","components/Progress.js","components/Timer.js","components/StopTask.js","components/TimeResult.js","components/Outro.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Task","props","className","compClassName","id","placeholder","onChange","e","changeTaskName","target","value","changeState","alertFlag","taskName","onClick","taskNameValidity","isTaskVisible","isTimeVisible","isTaskNameChangeActive","viewBox","href","icons","htmlFor","alertClassName","Time","handleTimeArray","changeTaskTimePlanned","taskTimePlannedValidity","taskTimePlanned","breakTimePlanned","breakTimePlannedValidity","isTimerActive","breakTimeElapsedResult","maxLength","isTimerVisible","isTaskTimeActive","previousTime","Date","now","taskTimeElapsed","breaksTotal","breakTimeElapsed","breakTimeElapsedArray","undefined","disabled","Controls","isBreakTimeActive","changeDisplayMode","incBreaksTotal","isStopTaskVisible","Display","taskTimeResult","taskTimeArray","join","Break","Percentage","Math","round","percent","ProgressBar","style","width","isElapsedMode","percentElapsed","percentRemaining","Progress","Timer","taskTimeTick","state","taskTimeRemaining","taskTimeTotal","taskTimeElapsedResult","taskTimeRemainingResult","overallTimeResult","taskTimeElapsedArray","taskTimeRemainingArray","isOutroVisible","overallTime","overallTimeArray","breakTimeTick","this","taskIntervalId","setInterval","breakIntervalId","clearInterval","Component","StopTask","TimeResult","minutes","seconds","breakFlag","Outro","breakMinutes","breakSeconds","role","aria-label","parseInt","isTaskNameValid","isTaskTimePlannedValid","App","time","makeTwoDigits","number","floor","handleTaskName","name","setState","length","handleTaskTimePlanned","handleTotalTime","test","handleBreakTimePlanned","isBreakTimePlannedValid","totalTime","split","map","a","handleStateChange","object","handleDisplayMode","prevState","handleStartButton","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.541c3ee0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icons.92f0e3b1.svg\";","import React from 'react';\r\nimport icons from '../assets/svg/icons.svg';\r\nimport '../scss/Task_Time.scss';\r\n\r\nconst Task = (props) => {\r\n\r\n  return (\r\n    <section className={`Task ${props.compClassName}`}>\r\n      <h2 className=\"Task__heading\">Write your task</h2>\r\n      <input\r\n        className=\"Task__input Task__input--name\"\r\n        id=\"task-name\"\r\n        placeholder=\"What would be your next task?\"\r\n        onChange={(e) => {\r\n          props.changeTaskName(e.target.value);\r\n          props.changeState({ alertFlag: true })\r\n        }}\r\n        value={props.taskName}\r\n      />\r\n      <button \r\n        className=\"button Task__button Task__button--right\"\r\n        onClick={props.taskNameValidity\r\n          ? () => props.changeState({\r\n            isTaskVisible: false,\r\n            isTimeVisible: true,\r\n            isTaskNameChangeActive: false,\r\n            alertFlag: false\r\n          })\r\n          : () => props.changeTaskName(\"\")}\r\n      >\r\n        <svg className=\"Task__svg\" viewBox=\"0 0 512 512\">\r\n          <use href={`${icons}#arrow-right`} />\r\n        </svg>\r\n      </button>\r\n      <div className=\"Task__row\">\r\n        <label className=\"Task__label Task__label--name\" htmlFor=\"task-name\">\r\n          Your task\r\n        </label>\r\n        <p className={`Task__alert ${props.alertClassName}`}>\r\n          You have to enter your task first!\r\n        </p>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\nexport default Task;","import React from 'react';\r\nimport icons from '../assets/svg/icons.svg';\r\nimport '../scss/Task_Time.scss';\r\n\r\nconst Time = (props) => {\r\n\r\n  const {\r\n    compClassName,\r\n    alertClassName,\r\n    changeState,\r\n    handleTimeArray,\r\n    changeTaskTimePlanned,\r\n    taskTimePlannedValidity,\r\n    taskTimePlanned,\r\n    breakTimePlanned,\r\n    breakTimePlannedValidity,\r\n    isTimerActive\r\n  } = props;\r\n\r\n  const breakTimeElapsedResult = handleTimeArray(0);\r\n\r\n  return (\r\n    <section className={`Time ${compClassName}`}>\r\n      <h2 className=\"Time__heading\">Task Time Estimation</h2>\r\n      {/* LEFT BUTTON */}\r\n      <button\r\n        className=\"Time__button Time__button--left\"\r\n        onClick={() => changeState({\r\n          isTaskVisible: true,\r\n          isTimeVisible: false,\r\n          isTaskNameChangeActive: true\r\n        })}\r\n      >\r\n        <svg className=\"Time__svg\" viewBox=\"0 0 512 512\">\r\n          <use href={`${icons}#arrow-left`} />\r\n        </svg>\r\n      </button>\r\n      {/* TIME INPUTS AND START BUTTON */}\r\n      <div className=\"Time__row\">\r\n        <input\r\n          id=\"task-time\"\r\n          className=\"Time__input\"\r\n          placeholder=\"00m00s\"\r\n          maxLength=\"6\"\r\n          onChange={(e) => {\r\n            changeTaskTimePlanned(e.target.value);\r\n            changeState({ alertFlag: true })\r\n          }}\r\n          value={taskTimePlanned}\r\n        />\r\n        <input\r\n          id=\"task-break\"\r\n          className=\"Time__input\"\r\n          placeholder=\"00m00s\"\r\n          maxLength=\"6\"\r\n          onChange={(e) => breakTimePlanned(e.target.value)}\r\n        />\r\n        <button\r\n          className={`Time__start ${isTimerActive\r\n            ? \"Time__start--disabled\"\r\n            : \"\"}`}\r\n          onClick={taskTimePlannedValidity && breakTimePlannedValidity\r\n          ? () => changeState({\r\n            isTimeVisible: false,\r\n            isTimerVisible: true,\r\n            isTaskTimeActive: true,\r\n            previousTime: Date.now(),\r\n            taskTimeElapsed: 0,\r\n            breaksTotal: 0,\r\n            breakTimeElapsed: 0,\r\n            breakTimeElapsedArray: breakTimeElapsedResult,\r\n            alertFlag: false\r\n          })\r\n          : undefined}\r\n          disabled = {isTimerActive}\r\n        >\r\n          Start\r\n        </button>\r\n      </div>\r\n      {/* LABELS */}\r\n      <div className=\"Time__row\">\r\n        <label className=\"Time__label Time__label--task\" htmlFor=\"task-time\">\r\n          task time\r\n        </label>\r\n        <label className=\"Time__label Time__label--break\" htmlFor=\"task-break\">\r\n          max break time\r\n        </label>\r\n        <p className={`Time__alert ${alertClassName}`}>\r\n          You have to specify time in the following format: 0m0s\r\n        </p>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\nexport default Time;","import React from 'react';\r\nimport icons from '../assets/svg/icons.svg';\r\nimport '../scss/Controls.scss';\r\n\r\nconst Controls = (props) => {\r\n  const {\r\n    isTaskTimeActive,\r\n    isBreakTimeActive,\r\n    changeDisplayMode,\r\n    changeState,\r\n    breaksTotal\r\n  } = props;\r\n  const incBreaksTotal = isTaskTimeActive\r\n  ? breaksTotal + 1 : breaksTotal;\r\n\r\n  return (\r\n    <div className=\"Controls\">\r\n      {/* PLAY / PAUSE BUTTON */}\r\n      <button\r\n        className=\"Controls__button Controls__button--playPause\"\r\n        onClick={(isTaskTimeActive || isBreakTimeActive)\r\n          ? () => changeState({\r\n          isTaskTimeActive: !isTaskTimeActive,\r\n          isBreakTimeActive: !isBreakTimeActive,\r\n          breaksTotal: incBreaksTotal,\r\n          previousTime: Date.now() })\r\n          : () => false }\r\n      >\r\n        <svg\r\n          className={`Controls__svg ${isTaskTimeActive\r\n            ? \"Controls__svg--hidden\" : \"\"}`}\r\n          viewBox=\"0 0 512 512\"\r\n        >\r\n          <use href={`${icons}#play`} />\r\n        </svg>\r\n        <svg\r\n          className={`Controls__svg ${isTaskTimeActive\r\n            ? \"\" : \"Controls__svg--hidden\"}`}\r\n          viewBox=\"0 0 512 512\"\r\n        >\r\n          <use href={`${icons}#pause`} />\r\n        </svg>\r\n      </button>\r\n\r\n      {/* STOP BUTTON */}\r\n      <button\r\n        className=\"Controls__button Controls__button--stop\"\r\n        onClick={(isTaskTimeActive || isBreakTimeActive)\r\n          ? () => changeState({ isStopTaskVisible: true })\r\n          : () => false }\r\n      >\r\n        <svg className=\"Controls__svg\" viewBox=\"0 0 512 512\">\r\n          <use href={`${icons}#stop`} />\r\n        </svg>\r\n      </button>\r\n\r\n      {/* TOGGLE BUTTON */}\r\n      <button\r\n        className=\"Controls__button Controls__button--toggle\"\r\n        onClick={() => changeDisplayMode()}\r\n      >\r\n        <svg className=\"Controls__svg\" viewBox=\"0 0 512 512\">\r\n          <use href={`${icons}#toggle`} />\r\n        </svg>\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\nexport default Controls;","import React from 'react';\r\nimport '../scss/Display.scss';\r\n\r\nconst Display = (props) => {\r\n  const taskTimeResult = props.taskTimeArray.join(':');\r\n\r\n  return (\r\n    <p className={props.compClassName}>\r\n      {taskTimeResult}\r\n    </p>\r\n  );\r\n}\r\nexport default Display;","import React from 'react';\r\nimport Display from './Display';\r\nimport '../scss/Break.scss';\r\n\r\nconst Break = (props) => {\r\n  const {\r\n    compClassName,\r\n    breaksTotal,\r\n    breakTimeElapsedArray\r\n  } = props;\r\n  \r\n  return (\r\n    <div className={compClassName}>\r\n      <h3 className=\"Break__counter\">\r\n        {`${props.breaksTotal} ${breaksTotal === 1\r\n        ? \"break\" : \"breaks\"}`}\r\n      </h3>\r\n      <Display\r\n        compClassName=\"Break__display\"\r\n        taskTimeArray={breakTimeElapsedArray}\r\n      />\r\n    </div>\r\n  );\r\n}\r\nexport default Break;","import React from 'react';\r\nimport '../scss/Percentage.scss';\r\n\r\nconst Percentage = (props) => {\r\n  return (\r\n    <p className={props.compClassName}>\r\n      {`${Math.round(props.percent)}%`}\r\n    </p>\r\n  );\r\n}\r\nexport default Percentage;","import React from 'react';\r\nimport '../scss/ProgressBar.scss';\r\n\r\nconst ProgressBar = (props) => {\r\n  return (\r\n    <div className=\"ProgressBar\">\r\n      <div\r\n        className=\"ProgressBar__part ProgressBar__part--loading\"\r\n        style={{width: `${props.isElapsedMode\r\n          ? props.percentElapsed\r\n          : props.percentRemaining}%`}}\r\n      ></div>\r\n      <div\r\n        className=\"ProgressBar__part ProgressBar__part--unloading\"\r\n        style={{width: `${props.isElapsedMode\r\n          ? props.percentRemaining\r\n          : props.percentElapsed}%`}}\r\n      ></div>\r\n    </div>\r\n  );\r\n}\r\nexport default ProgressBar;","import React from 'react';\r\nimport Percentage from './Percentage';\r\nimport ProgressBar from './ProgressBar';\r\nimport '../scss/Progress.scss';\r\n\r\nconst Progress = (props) => {\r\n  return (\r\n    <section className=\"Progress\">\r\n      <header className=\"Progress__header\">\r\n        <Percentage\r\n          compClassName={`Percentage ${props.isElapsedMode\r\n          ? \"Percentage--visible\" : \"\"}`}\r\n          percent={props.percentElapsed}\r\n        />\r\n        <Percentage\r\n          compClassName={`Percentage ${props.isElapsedMode\r\n          ? \"\" : \"Percentage--visible\"}`}\r\n          percent={props.percentRemaining}\r\n        />\r\n      </header>\r\n      <ProgressBar\r\n        percentElapsed={props.percentElapsed}\r\n        percentRemaining={props.percentRemaining}\r\n        isElapsedMode={props.isElapsedMode}\r\n      />\r\n    </section>\r\n  );\r\n}\r\nexport default Progress;","import React, {Component} from 'react';\r\nimport Controls from './Controls';\r\nimport Display from './Display';\r\nimport Break from './Break';\r\nimport Progress from './Progress';\r\nimport '../scss/Timer.scss';\r\n\r\nclass Timer extends Component {\r\n\r\n  componentDidMount() {\r\n    this.taskIntervalId = setInterval(() => this.taskTimeTick(), 10);\r\n    this.breakIntervalId = setInterval(() => this.breakTimeTick(), 10);\r\n  }\r\n  \r\n  componentWillUnmount() {\r\n    clearInterval(this.taskIntervalId);\r\n    clearInterval(this.breakIntervalId);\r\n  }\r\n\r\n  taskTimeTick = () => {\r\n    if (this.props.state.isTaskTimeActive) {\r\n\r\n      const now = Date.now();\r\n      const {\r\n        taskTimeElapsed,\r\n        taskTimeRemaining,\r\n        previousTime,\r\n        taskTimeTotal,\r\n        breakTimeElapsed\r\n      } = this.props.state;\r\n      \r\n      const taskTimeElapsedResult = this.props.handleTimeArray(taskTimeElapsed);\r\n      const taskTimeRemainingResult = this.props.handleTimeArray(taskTimeRemaining);\r\n      const overallTimeResult = this.props.handleTimeArray(taskTimeElapsed + breakTimeElapsed);\r\n      const percentElapsed = taskTimeElapsed / taskTimeTotal * 100;\r\n      const percentRemaining = taskTimeRemaining / taskTimeTotal * 100;\r\n\r\n      // when countdown finishes\r\n      if (taskTimeElapsed >= taskTimeTotal) {\r\n\r\n        this.props.changeState({\r\n          isStopTaskVisible: false,\r\n          isTimerVisible: false,\r\n          isTaskTimeActive: false,\r\n          taskTimeElapsed: taskTimeTotal,\r\n          taskTimeRemaining: 0,\r\n          taskTimeElapsedArray: taskTimeElapsedResult,\r\n          taskTimeRemainingArray: taskTimeRemainingResult,\r\n          percentElapsed: percentElapsed,\r\n          percentRemaining: percentRemaining,\r\n          isOutroVisible: true,\r\n          overallTime: taskTimeElapsed + breakTimeElapsed,\r\n          overallTimeArray: overallTimeResult\r\n        });\r\n\r\n        /*\r\n        task.overallTimeArray = task.overallTime;\r\n        stopSection.classList.contains('stop--visible') ? toggleStopConfirm() : false;\r\n        stopWorktime();\r\n        handleOutro();\r\n        outroRetryButton.addEventListener('click', handleRetry); */\r\n\r\n      } else {\r\n        this.props.changeState({\r\n          previousTime: now,\r\n          taskTimeElapsed: taskTimeElapsed + (now - previousTime),\r\n          taskTimeElapsedArray: taskTimeElapsedResult,\r\n          taskTimeRemaining: taskTimeTotal - taskTimeElapsed,\r\n          taskTimeRemainingArray: taskTimeRemainingResult,\r\n          percentElapsed: percentElapsed,\r\n          percentRemaining: percentRemaining\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  breakTimeTick = () => {\r\n    if (this.props.state.isBreakTimeActive) {\r\n\r\n      const now = Date.now();\r\n      const {\r\n        breakTimeElapsed,\r\n        previousTime\r\n      } = this.props.state;\r\n      \r\n      const breakTimeElapsedResult = this.props.handleTimeArray(breakTimeElapsed);\r\n\r\n      this.props.changeState({\r\n        breakTimeElapsed: breakTimeElapsed + (now - previousTime),\r\n        breakTimeElapsedArray: breakTimeElapsedResult,\r\n        previousTime: now\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      isTaskTimeActive,\r\n      isBreakTimeActive,\r\n      isElapsedMode,\r\n      breaksTotal,\r\n      taskTimeElapsedArray,\r\n      taskTimeRemainingArray,\r\n      breakTimeElapsedArray,\r\n      percentElapsed,\r\n      percentRemaining\r\n    } = this.props.state;\r\n\r\n    return (\r\n      <section className={`Timer ${this.props.compClassName}`}>\r\n        <div className=\"Timer__container\">\r\n          <h2 className=\"Timer__heading\">Work on your task</h2>\r\n  \r\n          {/* CONTROL BUTTONS */}\r\n          <Controls\r\n            isTaskTimeActive={isTaskTimeActive}\r\n            isBreakTimeActive={isBreakTimeActive}\r\n            breaksTotal={breaksTotal}\r\n            changeDisplayMode={this.props.changeDisplayMode}\r\n            changeState={this.props.changeState}\r\n          />\r\n  \r\n          {/* TIMER DISPLAY */}\r\n          <div className={`Timer__display ${isTaskTimeActive\r\n          ? \"\" : \"Timer__display--inactive\"}`}>\r\n            <Display\r\n              compClassName={isElapsedMode\r\n                ? \"Display Display--visible Display--showUp\"\r\n                : \"Display Display--hideUp\"}\r\n              taskTimeArray={taskTimeElapsedArray}\r\n            />\r\n            <Display\r\n              compClassName={isElapsedMode\r\n                ? \"Display Display--hideUp\"\r\n                : \"Display Display--visible Display--showUp\"}\r\n              taskTimeArray={taskTimeRemainingArray}\r\n            />\r\n          </div>\r\n  \r\n          {/* BREAK */}\r\n          <Break\r\n            compClassName={`Break ${isBreakTimeActive\r\n            ? \"Break--active\" : \"\"}`}\r\n            breaksTotal={breaksTotal}\r\n            breakTimeElapsedArray={breakTimeElapsedArray}\r\n          />\r\n\r\n          {/* PROGRESS */}\r\n          <Progress\r\n            isElapsedMode={isElapsedMode}\r\n            percentElapsed={percentElapsed}\r\n            percentRemaining={percentRemaining}\r\n          />\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\nexport default Timer;","import React from 'react';\r\nimport '../scss/StopTask.scss';\r\n\r\nconst StopTask = (props) => {\r\n  const { compClassName, changeState } = props;\r\n\r\n  return (\r\n    <section className={compClassName}>\r\n      <div className=\"StopTask__container\">\r\n        <h2 className=\"StopTask__heading\">\r\n          Are you sure you want to quit?\r\n        </h2>\r\n        <button\r\n          className=\"StopTask__button StopTask__button--stop\"\r\n          onClick={() => changeState({\r\n            isTaskVisible: true,\r\n            isStopTaskVisible: false,\r\n            isTimerVisible: false,\r\n            isTaskTimeActive: false,\r\n            isBreakTimeActive: false,\r\n            taskName: null\r\n          })}\r\n        >\r\n          Yes\r\n        </button>\r\n        <button\r\n          className=\"StopTask__button StopTask__button--cancel\"\r\n          onClick={() => changeState({\r\n            isStopTaskVisible: false\r\n          })}\r\n        >\r\n          Cancel\r\n        </button>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\nexport default StopTask;","import React from 'react';\r\nimport '../scss/TimeResult.scss';\r\n\r\nconst TimeResult = (props) => {\r\n  const {minutes, seconds, breakTimeElapsed, breakFlag} = props;\r\n\r\n  return (\r\n    <span className=\"TimeResult\">\r\n      <span>\r\n        { minutes > 1\r\n          ? ` ${minutes} minutes` : minutes === 1\r\n          ? ` ${minutes} minute` : \"\"}\r\n      </span>\r\n\r\n      {minutes > 0 && (breakFlag ? breakTimeElapsed !== 0 : seconds !== 0)\r\n      ? \"and\" : \"\"}\r\n\r\n      <span>\r\n        { seconds > 1\r\n          ? ` ${seconds} seconds` : seconds === 1\r\n          ? ` ${seconds} second` : breakFlag && breakTimeElapsed !== 0\r\n          ? \" a split second\" : \"\"}\r\n      </span>\r\n    </span>\r\n  );\r\n}\r\nexport default TimeResult;","import React from 'react';\r\nimport TimeResult from './TimeResult';\r\nimport icons from '../assets/svg/icons.svg';\r\nimport '../scss/Outro.scss';\r\n\r\nconst Outro = (props) => {\r\n  const {\r\n    taskName,\r\n    breaksTotal,\r\n    breakTimeElapsed,\r\n    breakTimeElapsedArray,\r\n    overallTime,\r\n    overallTimeArray\r\n  } = props.state;\r\n\r\n  const [minutes, seconds] = overallTimeArray;\r\n  const [breakMinutes, breakSeconds] = breakTimeElapsedArray;\r\n\r\n  return (\r\n    <section className={props.compClassName}>\r\n      <div className=\"Outro__container\">\r\n        <h2 className=\"Outro__heading\">\r\n        Congratulations!\r\n        <span\r\n          className=\"Outro__party\"\r\n          role=\"img\"\r\n          aria-label=\"party\"\r\n        > 🎉</span>\r\n        </h2>\r\n        <p className=\"Outro__message\">\r\n          You have finished your task entitled <br />\r\n          <span className=\"TimeResult\">\r\n            {`\"${taskName}\"`}\r\n          </span><br />\r\n          in\r\n          <TimeResult\r\n            minutes={parseInt(minutes)}\r\n            seconds={parseInt(seconds)}\r\n            breakTimeElapsed={breakTimeElapsed}\r\n          />\r\n          {`${breakTimeElapsed > 0 ? \" including break time.\" : \".\"}`}\r\n          <br />\r\n          You had\r\n          <span className=\"TimeResult\">\r\n            {`\r\n            ${breaksTotal > 1\r\n            ? `${breaksTotal} breaks`\r\n            : breaksTotal === 1 ? `${breaksTotal} break` : \"no brakes\"}\r\n            `}\r\n          </span>\r\n          during this task\r\n          <TimeResult\r\n            minutes={parseInt(breakMinutes)}\r\n            seconds={parseInt(breakSeconds)}\r\n            breakTimeElapsed={breakTimeElapsed}\r\n            breakFlag={true}\r\n          />\r\n          {breaksTotal ? \" long, what makes it around\" : \"\"}\r\n          <span className=\"TimeResult\">\r\n            { breaksTotal\r\n              ? ` ${Math.round(breakTimeElapsed / overallTime * 100)}%`\r\n              : \"\"}\r\n          </span>\r\n          {breaksTotal ? \" of all time.\" : \".\"}\r\n        </p>\r\n        <button\r\n          className=\"Outro__retry\"\r\n          onClick={() => props.changeState({\r\n            isOutroVisible: false,\r\n            isTaskVisible: true,\r\n            taskName: \"\",\r\n            isTaskNameValid: false,\r\n            taskTimePlanned: \"\",\r\n            isTaskTimePlannedValid: false\r\n          })}\r\n        >\r\n          <svg className=\"Outro__svg\" viewBox=\"0 0 512 512\">\r\n            <use href={`${icons}#retry`}/>\r\n          </svg>\r\n        </button>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\nexport default Outro;","import React, {Component} from 'react';\nimport Task from './Task.js';\nimport Time from './Time.js';\nimport Timer from './Timer.js';\nimport StopTask from './StopTask.js';\nimport Outro from './Outro.js';\nimport '../scss/App.scss';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // visibility\n      isTaskVisible: true,\n      isTimeVisible: false,\n      isTimerVisible: false,\n      isStopTaskVisible: false,\n      isOutroVisible: false,\n      isElapsedMode: true,\n      isTaskNameChangeActive: false,\n      alertFlag: false,\n      // task\n      taskName: \"\",\n      isTaskNameValid: false,\n      taskTimePlanned: \"\",\n      isTaskTimePlannedValid: false,\n      taskTimeTotal: 0,\n      taskTimeElapsed: 0,\n      taskTimeElapsedArray: ['00','00','00'],\n      taskTimeRemaining: 0,\n      taskTimeRemainingArray: ['00','00','00'],\n      //timer\n      previousTime: 0,\n      isTaskTimeActive: false,\n      // break\n      breakTimePlanned: \"\",\n      isBreakTimePlannedValid: true,\n      isBreakTimeActive: false,\n      breaksTotal: 0,\n      breakTimeElapsed: 0,\n      breakTimeElapsedArray: ['00','00','00'],\n      // progress\n      percentElapsed: 0,\n      percentRemaining: 100,\n      // outro\n      overallTime: 0,\n      overallTimeArray: ['00','00','00']\n    }\n  }\n\n  handleTimeArray = (time) => {\n    const makeTwoDigits = (number) => number < 10 ? `0${number}` : number;\n    return [\n      makeTwoDigits(Math.floor(time / 60000)),\n      makeTwoDigits(Math.floor(time / 1000 % 60)),\n      makeTwoDigits(Math.floor(time / 10 % 100))\n    ]\n  }\n\n  handleTaskName = (name) => {\n    this.setState({\n      taskName: name,\n      isTaskNameValid: name.length > 0 ? true : false \n    });\n  }\n\n  handleTaskTimePlanned = (time) => {\n    const taskTimeTotal = this.handleTotalTime(time);\n    const taskTimeRemainingArray = this.handleTimeArray(taskTimeTotal);\n    this.setState({\n      taskTimePlanned: time,\n      isTaskTimePlannedValid: /(\\d?\\d[Mm])?(\\d?\\d[Ss])/.test(time) && taskTimeTotal > 0,\n      taskTimeTotal: taskTimeTotal,\n      taskTimeRemaining: taskTimeTotal,\n      taskTimeRemainingArray: taskTimeRemainingArray\n    })\n  }\n  \n  handleBreakTimePlanned = (time) => {\n    this.setState({\n      breakTimePlanned: time,\n      isBreakTimePlannedValid: /^((\\d?\\d[Mm])?\\d?\\d[Ss]|)$/.test(time)\n    })\n  }\n\n  handleTotalTime = (time) => {\n    let totalTime = time.split(/[mM]/).map(a => parseInt(a) || 0);\n    // if time format 00m is acceptable\n    totalTime = totalTime.length > 1 ? totalTime : [0, ...totalTime];\n    const [minutes, seconds] = totalTime;\n    return minutes * 60000 + seconds * 1000;\n  }\n\n  handleStateChange = (object) => this.setState(object);\n\n  handleDisplayMode = () => this.setState(prevState => ({\n    isElapsedMode: !prevState.isElapsedMode\n  }));\n\n  render() {\n    const {\n      // visibility\n      isTaskVisible,\n      isTimeVisible,\n      isTimerVisible,\n      isStopTaskVisible,\n      isOutroVisible,\n      alertFlag,\n      // task\n      taskName,\n      isTaskNameChangeActive,\n      isTaskNameValid,\n      taskTimePlanned,\n      isTaskTimePlannedValid,\n      // break\n      isBreakTimePlannedValid,\n      // timer\n      isTaskTimeActive\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1 className=\"App__heading visuallyhidden\">Task Timer App</h1>\n\n        <Task\n          compClassName={isTaskVisible\n            ? `Task--visible ${isTaskNameChangeActive\n              ? \"slideInLeft\"\n              : \"slideInRight\"}`\n            : \"slideOutLeft\"}\n          alertClassName={alertFlag && !isTaskNameValid\n            ? \"Task__alert--visible\"\n            : \"\"}\n          changeState={this.handleStateChange}\n          changeTaskName={this.handleTaskName}\n          taskNameValidity={isTaskNameValid}\n          taskName={taskName}\n        />\n\n        <Time\n          compClassName={isTimeVisible\n            ? \"Time--visible slideInRight\"\n            : isTimerVisible ? \"slideOutLeft\" : \"slideOutRight\"}\n          alertClassName={(alertFlag && !isTaskTimePlannedValid)\n            || (alertFlag && !isBreakTimePlannedValid)\n            ? \"Time__alert--visible\"\n            : \"\"}\n          breakTimePlanned={this.handleBreakTimePlanned}\n          breakTimePlannedValidity={isBreakTimePlannedValid}\n          changeState={this.handleStateChange}\n          handleStartButton={this.handleStartButton}\n          isTimerActive={isTaskTimeActive}\n          changeTaskTimePlanned={this.handleTaskTimePlanned}\n          taskTimePlannedValidity={isTaskTimePlannedValid}\n          handleTimeArray={this.handleTimeArray}\n          taskTimePlanned={taskTimePlanned}\n        />\n\n        <Timer\n          compClassName={isTimerVisible\n            ? \"Timer--visible slideInRight\"\n            : \"slideOutLeft\"}\n          changeDisplayMode={this.handleDisplayMode}\n          changeState={this.handleStateChange}\n          handleTimeArray={this.handleTimeArray}\n          state={this.state}\n        />\n\n        <StopTask\n          compClassName={`StopTask ${isStopTaskVisible\n          ? \"StopTask--visible\" : \"\"}`}\n          changeState={this.handleStateChange}\n        />\n\n        <Outro\n          compClassName={`Outro ${isOutroVisible\n          ? \"Outro--visible slideInRight\"\n          : \"slideOutLeft\"}`}\n          state={this.state}\n          changeState={this.handleStateChange}\n        />\n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}