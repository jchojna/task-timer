{"version":3,"sources":["assets/svg/icons.svg","lib/globalVariables.js","lib/handlers.js","components/CreatorInput.js","components/Creator.js","components/EditableText.js","components/EditableTime.js","components/Spinners.js","components/TotalTime.js","components/CardButtons.js","components/TimeDisplay.js","components/Countdown.js","components/StopAlert.js","components/Progress.js","components/Controls.js","components/Finish.js","components/Timer.js","components/Task.js","components/Card.js","components/Intro.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","cardFlipTime","animationStyle","animationDuration","validateTaskName","name","length","validateTaskTime","time","total","test","validateBreakTime","getTotalTime","minutes","seconds","parseInt","makeTwoDigits","value","getTimeArray","Math","floor","handleTimeChange","units","type","totalTaskTime","taskMinutes","totalTaskTimeArray","isTaskTimeValid","taskSeconds","totalBreakTime","breakMinutes","totalBreakTimeArray","isBreakTimeValid","breakSeconds","formatTimeResult","elapsedBreakTime","taskNameProgressStyle","width","CreatorInput","props","isVisible","isValid","modifier","title","label","placeholder","slideDirection","taskNameLength","onTaskNameChange","onMinutesChange","onSecondsChange","alertFlag","creatorInputClass","classNames","textInputClass","timeInputsClass","minutesInputClass","secondsInputClass","className","htmlFor","id","spellCheck","maxLength","onChange","e","target","style","Creator","componentWillUnmount","clearTimeout","timeoutOutroId","handleStateChange","object","setState","handleTaskName","creatorTaskName","isTaskNameValid","addNewTask","onAppStateChange","state","creatorTaskMinutes","creatorTaskSeconds","creatorBreakMinutes","creatorBreakSeconds","creatorTotalTaskTime","creatorTotalBreakTime","creatorTaskTimeArray","creatorBreakTimeArray","date","Date","now","newTask","taskName","dateCreated","prevState","isCreatorVisible","tasks","newTime","handleBackButton","preventDefault","isTaskTimeVisible","isBreakTimeVisible","isTaskNameVisible","handleNextButton","isCreatorValid","isCreatorRotatingOut","setTimeout","handleCreatorClose","this","isNextButtonVisible","creatorClass","backButtonClass","nextButtonClass","progressBarLoadedStyle","onClick","viewBox","href","icons","Component","EditableText","output","isMaximized","isDisabled","isEditMode","onEditModeChange","editableTextClass","textClass","inputContainerClass","inputClass","progressClass","EditableTime","unit","onTimeChange","timeClass","slice","Spinners","handleValueChange","operation","newValue","lowerLimit","upperLimit","getNumFromRange","spinnersClass","disabled","TotalTime","labelName","onKeyPress","totalTimeClass","labelClass","displayClass","onKeyDown","key","tabIndex","CardButtons","editModeActive","inputInvalid","cardRotatingMode","onAcceptButtonClick","onRemoveButtonClick","onTaskStateChange","handleMinMaxButtons","cardButtonsClass","acceptButtonClass","minimizeButtonClass","maximizeButtonClass","removeButtonClass","TimeDisplay","elapsedTimeArray","remainingTimeArray","isElapsedMode","elapsedTimeResult","join","remainingTimeResult","elapsedTimeClass","remainingTimeClass","Countdown","isCountdownVisible","totalBreaks","countdownClass","StopAlert","alertText","isStopAlertVisible","onStopCancel","onStopConfirm","stopAlertClass","containerClass","Progress","elapsedPercent","remainingPercent","elapsedPercentClass","remainingPercentClass","roundedElapsedPercent","round","roundedRemainingPercent","loadingWidth","unloadingWidth","Controls","handlePlayPauseButton","isTaskTimeActive","isBreakTimeActive","onTimerStateChange","previousTime","handleToggleButton","onDisplayModeChange","onStopButtonClick","svgPlayClass","svgPauseClass","playPauseButtonClass","stopButtonClass","toggleButtonClass","Finish","isTaskFinished","onTaskRemove","onTimerRestart","elapsedBreakTimeArray","overallTime","overallTimeArray","breaksAmount","breakPercent","overallTimeResult","breakTimeResult","finishClass","role","aria-label","Timer","handleRotatingStatus","isTaskRotatingIn","isTaskRotatingOut","handleTimerStop","isTimerStarted","timeoutId","isTimerMounted","handleTimeDisplayMode","handleAlertVisibility","handleTimeTick","elapsedTaskTime","totalTime","elapsedTime","remainingTime","totalTimeArray","startTime","isTimerVisible","isTaskTimeElapsedMode","isBreakTimeElapsedMode","isBreakFinished","elapsedTaskPercent","elapsedTaskTimeArray","elapsedBreakPercent","remainingTaskTime","remainingTaskPercent","remainingTaskTimeArray","remainingBreakTime","remainingBreakPercent","remainingBreakTimeArray","taskIntervalId","setInterval","breakIntervalId","clearInterval","timerClass","Task","componentDidMount","isTaskMounted","handleTaskNameChange","handleTaskRemove","handleEditMode","input","acceptEditChange","isTaskNameEditMode","isTaskTimeEditMode","isBreakTimeEditMode","handleStartButton","handleKeyPress","handleMaximizeCard","task","onCardStateChange","taskNameDisabled","taskTimeDisabled","breakTimeDisabled","taskClass","startButtonClass","Card","getHoveredCardSizes","index","cardIndex","cardsSizes","handleMouseDown","clientX","clientY","window","addEventListener","handleMouseMove","handleMouseUp","appNodes","card","current","parentNode","children","filter","node","classList","contains","map","offsetHeight","offsetLeft","offsetTop","height","offsetWidth","left","top","originalX","scrollX","originalY","scrollY","xPosition","yPosition","draggedCardSizes","hoveredCardIndex","findIndex","hoveredCardSizes","translateX","translateY","isDragging","hoveredOffsetX","hoveredOffsetY","isDraggingMode","draggedCardIndex","removeEventListener","onTaskOrderChange","offsetX","offsetY","draggedOffsetX","draggedOffsetY","React","createRef","draggable","transitionTime","cardStyle","transform","cardClass","ref","onMouseDown","Intro","handleShadowPostion","isIntroVisible","timeInterval","maxDistance","elapsedDistance","elapsedAngle","totalIntervals","distanceIncrement","angleIncrement","pow","radians","PI","x","sin","y","cos","xTranslation","yTranslation","isIntroFadingOut","intervalId","introClass","styleObject","fill","rx","ry","cx","cy","r","mask","App","isBoardVisible","handleTaskOrder","dragIndex","dropIndex","newTasks","splice","handleNewTaskButton","replacedCard","noTransitionMode","isTimeInputValid","boardClass","newTaskButtonClass","creatorContainerClass","StrictMode","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d7186bab.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icons.e58ded79.svg\";","export const cardFlipTime = 500;\r\nexport const maxTaskNameLength = 80;\r\n\r\nexport const animationStyle = {\r\n  animationDuration: `${cardFlipTime}ms`\r\n}","import { maxTaskNameLength } from './globalVariables';\r\n\r\nexport const validateTaskName = (name) => name.length > 0 ? true : false;\r\nexport const validateTaskTime = (time, total) => /^\\d*$/.test(time) && total > 0;\r\nexport const validateBreakTime = (time) => /^\\d*$/.test(time);\r\n\r\nconst getTotalTime = (minutes, seconds) => {\r\n  minutes = !minutes ? 0 : parseInt(minutes);\r\n  seconds = !seconds ? 0 : parseInt(seconds);\r\n  return (minutes * 60000) + (seconds * 1000);\r\n}\r\n\r\nconst makeTwoDigits = (value) => value < 10 ? `0${value}` : `${value}`;\r\n\r\nexport const getNumFromRange = (value, operation, lowerLimit, upperLimit) => {\r\n  const newValue = operation === \"increase\"\r\n  ? parseInt(value) + 1 : parseInt(value) - 1;\r\n\r\n  return newValue >= lowerLimit && newValue <= upperLimit\r\n  ? makeTwoDigits(newValue)\r\n  : newValue < lowerLimit\r\n    ? makeTwoDigits(lowerLimit)\r\n    : makeTwoDigits(upperLimit);\r\n}\r\n\r\nexport const getTimeArray = (time) => {\r\n  return [\r\n    makeTwoDigits(Math.floor(time / 60000)),\r\n    makeTwoDigits(Math.floor(time / 1000 % 60)),\r\n    makeTwoDigits(Math.floor(time / 10 % 100))\r\n  ]\r\n}\r\n\r\nexport const handleTimeChange = (minutes, seconds, units, type) => {\r\n  \r\n  if (type === 'task') {\r\n    const totalTaskTime = getTotalTime(minutes, seconds);\r\n    if (units === 'minutes') {\r\n      return {\r\n        taskMinutes: minutes,\r\n        totalTaskTime,\r\n        totalTaskTimeArray: getTimeArray(totalTaskTime),\r\n        isTaskTimeValid: validateTaskTime(minutes, totalTaskTime)\r\n      };\r\n    } else if (units === 'seconds') {\r\n      return {\r\n        taskSeconds: seconds,\r\n        totalTaskTime,\r\n        totalTaskTimeArray: getTimeArray(totalTaskTime),\r\n        isTaskTimeValid: validateTaskTime(seconds, totalTaskTime)\r\n      };\r\n    }\r\n  } else if (type === 'break') {\r\n    const totalBreakTime = getTotalTime(minutes, seconds);\r\n    if (units === 'minutes') {\r\n      return {\r\n        breakMinutes: minutes,\r\n        totalBreakTime,\r\n        totalBreakTimeArray: getTimeArray(totalBreakTime),\r\n        isBreakTimeValid: validateBreakTime(minutes)\r\n      };\r\n    } else if (units === 'seconds') {\r\n      return {\r\n        breakSeconds: seconds,\r\n        totalBreakTime,\r\n        totalBreakTimeArray: getTimeArray(totalBreakTime),\r\n        isBreakTimeValid: validateBreakTime(seconds)\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport const formatTimeResult = ([minutes, seconds], elapsedBreakTime) => {\r\n  minutes = parseInt(minutes);\r\n  seconds = parseInt(seconds);\r\n  return `\r\n    ${ minutes > 1\r\n    ? ` ${minutes} minutes` : minutes === 1\r\n    ? ` ${minutes} minute` : \"\" }\r\n    ${ minutes > 0 && (elapsedBreakTime ? elapsedBreakTime !== 0 : seconds !== 0)\r\n    ? \"and\" : \"\" }\r\n    ${ seconds > 1\r\n    ? ` ${seconds} seconds` : seconds === 1\r\n    ? ` ${seconds} second` : elapsedBreakTime && elapsedBreakTime !== 0\r\n    ? \" a split second\" : \"\" }\r\n  `;\r\n}\r\n\r\nexport const taskNameProgressStyle = (length) => {\r\n  return { width: `${length / maxTaskNameLength * 100}%` };\r\n};\r\n\r\nexport const breaksAmount = (totalBreaks) => `${totalBreaks}\r\n${totalBreaks === 1 ? \"break\" : \"breaks\"} used\r\n`;","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport '../scss/CreatorInput.scss';\r\nimport { maxTaskNameLength } from '../lib/globalVariables';\r\nimport { taskNameProgressStyle } from '../lib/handlers';\r\n\r\nconst CreatorInput = (props) => {\r\n\r\n  const {\r\n    isVisible,\r\n    isValid,\r\n    modifier,\r\n    title,\r\n    label,\r\n    minutes,\r\n    seconds,\r\n    placeholder,\r\n    slideDirection,\r\n    taskNameLength,\r\n    onTaskNameChange,\r\n    onMinutesChange,\r\n    onSecondsChange,\r\n    alertFlag\r\n  } = props;\r\n\r\n  const creatorInputClass = classNames(\"CreatorInput\", {\r\n    [`CreatorInput--${modifier}`]: isVisible,\r\n    \"showFromRight\": isVisible && slideDirection === 'toRight',\r\n    \"hideToLeft\": !isVisible && slideDirection === 'toRight',\r\n    \"showFromLeft\": isVisible && slideDirection === 'toLeft',\r\n    \"hideToRight\": !isVisible && slideDirection === 'toLeft'\r\n  });\r\n\r\n  const textInputClass = classNames(\"CreatorInput__text\", {\r\n    \"CreatorInput__text--invalid\": !isValid && alertFlag\r\n  });\r\n\r\n  const timeInputsClass = classNames(\"CreatorInput__inputs\", {\r\n    \"CreatorInput__inputs--invalid\": !isValid && alertFlag\r\n  });\r\n\r\n  const minutesInputClass = classNames(\"CreatorInput__input\",\r\n    \"CreatorInput__input--minutes\", {\r\n      \"CreatorInput__input--invalid\": !isValid && alertFlag\r\n    });\r\n\r\n  const secondsInputClass = classNames(\"CreatorInput__input\",\r\n    \"CreatorInput__input--seconds\", {\r\n      \"CreatorInput__input--invalid\": !isValid && alertFlag\r\n    });\r\n\r\n  return (\r\n    <div className={creatorInputClass}>\r\n\r\n      {/* INPUT LABEL */}\r\n      <label\r\n        htmlFor={modifier}\r\n        className=\"CreatorInput__label\"\r\n      >\r\n        {label}\r\n      </label>\r\n\r\n      {\r\n        modifier === \"taskName\"\r\n        ? /* TEXT INPUT */\r\n        <div className=\"CreatorInput__textContainer\">\r\n          <textarea\r\n            id={modifier}\r\n            className={textInputClass}\r\n            placeholder={placeholder}\r\n            spellCheck=\"false\"\r\n            maxLength={maxTaskNameLength}\r\n            value={title}\r\n            onChange={(e) => onTaskNameChange(e.target.value)}\r\n          ></textarea>\r\n          <div\r\n            className=\"CreatorInput__progress\"\r\n            style={taskNameProgressStyle(taskNameLength)}\r\n          ></div>\r\n        </div>\r\n\r\n        : /* TIME INPUT */\r\n        <div className={timeInputsClass}>\r\n          <input\r\n            id={modifier}\r\n            name={`${modifier}Minutes`}\r\n            className={minutesInputClass}\r\n            placeholder=\"min\"\r\n            maxLength=\"2\"\r\n            value={minutes}\r\n            onChange={(e) => onMinutesChange(e.target.value)}\r\n          />\r\n          <span className=\"CreatorInput__colon\">:</span>\r\n          <input\r\n            name={`${modifier}Seconds`}\r\n            className={secondsInputClass}\r\n            placeholder=\"sec\"\r\n            maxLength=\"2\"\r\n            value={seconds}\r\n            onChange={(e) => onSecondsChange(e.target.value)}\r\n          />\r\n        </div>\r\n      }\r\n    </div>\r\n  )\r\n}\r\nexport default CreatorInput;","import React, { Component } from 'react';\r\nimport classNames from 'classnames';\r\nimport CreatorInput from './CreatorInput';\r\nimport { validateTaskName, handleTimeChange } from '../lib/handlers';\r\nimport { cardFlipTime, animationStyle } from '../lib/globalVariables';\r\nimport icons from '../assets/svg/icons.svg';\r\nimport '../scss/Creator.scss';\r\n\r\nclass Creator extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      // visibility\r\n      isCreatorRotatingOut: false,\r\n      isTaskNameVisible: true,\r\n      isTaskTimeVisible: false,\r\n      isBreakTimeVisible: false,\r\n      // inputs\r\n      creatorTaskName: \"\",\r\n      creatorTaskMinutes: \"\",\r\n      creatorTaskSeconds: \"\",\r\n      creatorBreakMinutes: \"\",\r\n      creatorBreakSeconds: \"\",\r\n      creatorTotalTaskTime: 0,\r\n      creatorTotalBreakTime: 0,\r\n      taskNameLength: 0,\r\n      creatorTaskTimeArray: [\"\",\"\"],\r\n      creatorBreakTimeArray: [\"\",\"\"],\r\n      // validation\r\n      isTaskNameValid: false,\r\n      isTaskTimeValid: false,\r\n      isBreakTimeValid: true,\r\n      isCreatorValid: false,\r\n      alertFlag: false,\r\n\r\n      slideDirection: null\r\n    };\r\n  }\r\n\r\n  componentWillUnmount = () => {\r\n    clearTimeout(this.timeoutOutroId);\r\n  }\r\n\r\n  handleStateChange = (object) => this.setState(object);\r\n\r\n  handleTaskName = (value) => {\r\n    this.setState({\r\n      creatorTaskName: value,\r\n      taskNameLength: value.length,\r\n      isTaskNameValid: validateTaskName(value),\r\n      alertFlag: true\r\n    });\r\n  }\r\n\r\n  addNewTask = () => {\r\n    const { onAppStateChange } = this.props;\r\n    const {\r\n      creatorTaskName,\r\n      creatorTaskMinutes,\r\n      creatorTaskSeconds,\r\n      creatorBreakMinutes,\r\n      creatorBreakSeconds,\r\n      creatorTotalTaskTime,\r\n      creatorTotalBreakTime,\r\n      creatorTaskTimeArray,\r\n      creatorBreakTimeArray\r\n    } = this.state;\r\n\r\n    const date = Date.now();\r\n    // new task data\r\n    const newTask = {\r\n      taskName: creatorTaskName,\r\n      taskMinutes: creatorTaskMinutes,\r\n      taskSeconds: creatorTaskSeconds,\r\n      breakMinutes: creatorBreakMinutes,\r\n      breakSeconds: creatorBreakSeconds,\r\n      totalTaskTime: creatorTotalTaskTime,\r\n      totalBreakTime: creatorTotalBreakTime,\r\n      totalTaskTimeArray: creatorTaskTimeArray,\r\n      totalBreakTimeArray: creatorBreakTimeArray,\r\n      dateCreated: date,\r\n      id: date\r\n    };\r\n    // add new task to app state\r\n    onAppStateChange(prevState => ({\r\n      isCreatorVisible: false,\r\n      tasks: [...prevState.tasks, newTask]\r\n    }));\r\n  }\r\n\r\n  /* handleKeyPress = (e) => {\r\n    const { onStateChange } = this.props;\r\n    const keyPressed = e.key || null;\r\n\r\n    if (keyPressed === \"Escape\" || keyPressed === null) {\r\n      onStateChange({\r\n        isTaskVisible: true,\r\n        isTimeVisible: false,\r\n        isTaskNameChangeActive: true\r\n      })\r\n    }\r\n  } */\r\n\r\n  handleTimeChange = (minutes, seconds, units, type) => {\r\n    const newTime = handleTimeChange(minutes, seconds, units, type);\r\n\r\n    if (type === 'task') {\r\n      if (units === 'minutes') {\r\n        const { taskMinutes, totalTaskTime, totalTaskTimeArray, isTaskTimeValid } = newTime;\r\n        this.setState({\r\n          creatorTaskMinutes: taskMinutes,\r\n          creatorTotalTaskTime: totalTaskTime,\r\n          creatorTaskTimeArray: totalTaskTimeArray,\r\n          isTaskTimeValid,\r\n          alertFlag: true\r\n        });\r\n      } else if (units === 'seconds') {\r\n        const { taskSeconds, totalTaskTime, totalTaskTimeArray, isTaskTimeValid } = newTime;\r\n        this.setState({\r\n          creatorTaskSeconds: taskSeconds,\r\n          creatorTotalTaskTime: totalTaskTime,\r\n          creatorTaskTimeArray: totalTaskTimeArray,\r\n          isTaskTimeValid,\r\n          alertFlag: true\r\n        });\r\n      }\r\n    } else if (type === 'break') {\r\n      if (units === 'minutes') {\r\n        const { breakMinutes, totalBreakTime, totalBreakTimeArray, isBreakTimeValid } = newTime;\r\n        this.setState({\r\n          creatorBreakMinutes: breakMinutes,\r\n          creatorTotalBreakTime: totalBreakTime,\r\n          creatorBreakTimeArray: totalBreakTimeArray,\r\n          isBreakTimeValid,\r\n          alertFlag: true\r\n        });\r\n      } else if (units === 'seconds') {\r\n        const { breakSeconds, totalBreakTime, totalBreakTimeArray, isBreakTimeValid } = newTime;\r\n        this.setState({\r\n          creatorBreakSeconds: breakSeconds,\r\n          creatorTotalBreakTime: totalBreakTime,\r\n          creatorBreakTimeArray: totalBreakTimeArray,\r\n          isBreakTimeValid,\r\n          alertFlag: true\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  handleBackButton = (e) => {\r\n    e.preventDefault();\r\n    const {\r\n      isTaskTimeVisible,\r\n      isBreakTimeVisible\r\n    } = this.state;\r\n\r\n    if (isTaskTimeVisible) {\r\n      this.setState({\r\n        isTaskNameVisible: true,\r\n        isTaskTimeVisible: false,\r\n        slideDirection: \"toLeft\"\r\n      });\r\n    }\r\n\r\n    if (isBreakTimeVisible) {\r\n      this.setState({\r\n        isTaskTimeVisible: true,\r\n        isBreakTimeVisible: false,\r\n        slideDirection: \"toLeft\"\r\n      });\r\n    }\r\n  }\r\n  \r\n  handleNextButton = (e) => {\r\n    e.preventDefault();\r\n\r\n    const {\r\n      isTaskNameVisible,\r\n      isTaskTimeVisible,\r\n      isBreakTimeVisible,\r\n      isTaskNameValid,\r\n      isTaskTimeValid,\r\n      isBreakTimeValid\r\n    } = this.state;\r\n\r\n    if (isTaskNameVisible && isTaskNameValid) {\r\n      this.setState({\r\n        isTaskNameVisible: false,\r\n        isTaskTimeVisible: true,\r\n        alertFlag: false,\r\n        slideDirection: \"toRight\"\r\n      });\r\n    }\r\n\r\n    if (isTaskTimeVisible && isTaskTimeValid) {\r\n      this.setState({\r\n        isTaskTimeVisible: false,\r\n        isBreakTimeVisible: true,\r\n        alertFlag: false,\r\n        slideDirection: \"toRight\"\r\n      });\r\n    }\r\n\r\n    if (isBreakTimeVisible && isBreakTimeValid) {\r\n      this.setState({\r\n        isCreatorValid: true,\r\n        alertFlag: false,\r\n        isCreatorRotatingOut: true,\r\n        slideDirection: \"toRight\"\r\n      });\r\n      this.timeoutOutroId = setTimeout(() => this.addNewTask(),\r\n      cardFlipTime);\r\n    }\r\n  }\r\n\r\n  handleCreatorClose = (e) => {\r\n    e.preventDefault();\r\n    const { onAppStateChange } = this.props;\r\n    onAppStateChange({ isCreatorVisible: false });\r\n  }\r\n\r\n  render() {\r\n\r\n    const {\r\n      // visibility\r\n      isCreatorRotatingOut,\r\n      isTaskNameVisible,\r\n      isTaskTimeVisible,\r\n      isBreakTimeVisible,\r\n      // inputs\r\n      creatorTaskName,\r\n      creatorTaskMinutes,\r\n      creatorTaskSeconds,\r\n      creatorBreakMinutes,\r\n      creatorBreakSeconds,\r\n      taskNameLength,\r\n      // validation\r\n      isTaskNameValid,\r\n      isTaskTimeValid,\r\n      isBreakTimeValid,\r\n      isCreatorValid,\r\n      alertFlag,\r\n      \r\n      slideDirection\r\n    } = this.state;\r\n\r\n    const isNextButtonVisible = \r\n    (isTaskNameVisible && isTaskNameValid) ||\r\n    (isTaskTimeVisible && isTaskTimeValid) ||\r\n    (isBreakTimeVisible && isBreakTimeValid);\r\n\r\n    const creatorClass = classNames(\"Creator\", {\r\n      \"Creator--rotateOut\": isCreatorRotatingOut\r\n    });\r\n  \r\n    const backButtonClass = classNames(\"Creator__button\",\r\n      \"Creator__button--back\", {\r\n      \"Creator__button--visible\": !isTaskNameVisible\r\n    });\r\n    \r\n    const nextButtonClass = classNames(\"Creator__button\",\r\n      \"Creator__button--next\", {\r\n      \"Creator__button--visible\": isNextButtonVisible\r\n    });\r\n    \r\n    const closeButtonClass = \"Creator__button Creator__button--visible Creator__button--close\";\r\n\r\n    const progressBarLoadedStyle = {\r\n      width: isTaskTimeVisible ? `${1/3 * 100}%`\r\n      : isBreakTimeVisible ?\r\n        isCreatorValid ? \"100%\" : `${2/3 * 100}%`\r\n      : 0\r\n    }\r\n\r\n    return (\r\n      <form\r\n        className={creatorClass}\r\n        style={animationStyle}\r\n        //onSubmit={this.handleFormSubmit}\r\n        //onKeyDown={(e) => this.handleKeyboard(e)}\r\n      >\r\n        {/* TASK NAME INPUT */}\r\n        <CreatorInput\r\n          isVisible={isTaskNameVisible}\r\n          isValid={isTaskNameValid}\r\n          modifier=\"taskName\"\r\n          title={creatorTaskName}\r\n          label=\"Enter task name\"\r\n          placeholder=\"What would be your next task?\"\r\n          alertFlag={alertFlag}\r\n          onTaskNameChange={this.handleTaskName}\r\n          slideDirection={slideDirection}\r\n          taskNameLength={taskNameLength}\r\n        />\r\n\r\n        {/* TASK TIME INPUT */}\r\n        <CreatorInput\r\n          isVisible={isTaskTimeVisible}\r\n          isValid={isTaskTimeValid}\r\n          modifier=\"taskTime\"\r\n          label=\"Enter task time\"\r\n          placeholder=\"Enter time here...\"\r\n          minutes={creatorTaskMinutes}\r\n          seconds={creatorTaskSeconds}\r\n          alertFlag={alertFlag}\r\n          slideDirection={slideDirection}\r\n          onMinutesChange={(value) =>\r\n            this.handleTimeChange(value, creatorTaskSeconds, 'minutes', 'task')}\r\n          onSecondsChange={(value) =>\r\n            this.handleTimeChange(creatorTaskMinutes, value, 'seconds', 'task')}\r\n        />\r\n        \r\n        {/* BREAK TIME INPUT */}\r\n        <CreatorInput\r\n          isVisible={isBreakTimeVisible}\r\n          isValid={isBreakTimeValid}\r\n          modifier=\"breakTime\"\r\n          label=\"Enter max break time\"\r\n          placeholder=\"Enter time here...\"\r\n          minutes={creatorBreakMinutes}\r\n          seconds={creatorBreakSeconds}\r\n          alertFlag={alertFlag}\r\n          slideDirection={slideDirection}\r\n          onMinutesChange={(value) =>\r\n            this.handleTimeChange(value, creatorBreakSeconds, 'minutes', 'break')}\r\n          onSecondsChange={(value) =>\r\n            this.handleTimeChange(creatorBreakMinutes, value, 'seconds', 'break')}\r\n        />\r\n\r\n        {/* GO BACK BUTTON */}\r\n        <button\r\n          className={backButtonClass}\r\n          onClick={this.handleBackButton}\r\n        >\r\n          <svg className=\"NewTaskInput__svg\" viewBox=\"0 0 512 512\">\r\n            <use href={`${icons}#arrow-left`}></use>\r\n          </svg>\r\n        </button>\r\n  \r\n        {/* GO NEXT BUTTON */}\r\n        <button\r\n          className={nextButtonClass}\r\n          onClick={this.handleNextButton}\r\n        >\r\n          <svg className=\"NewTaskInput__svg\" viewBox=\"0 0 512 512\">\r\n            <use href={`${icons}#arrow-right`}></use>\r\n          </svg>\r\n        </button>\r\n\r\n        {/* CLOSE NEW TASK */}\r\n        <button\r\n          className={closeButtonClass}\r\n          onClick={this.handleCreatorClose}\r\n        >\r\n          <svg className=\"Creator__svg\" viewBox=\"0 0 512 512\">\r\n            <use href={`${icons}#remove`}/>\r\n          </svg>\r\n        </button>\r\n\r\n        {/* PROGRESS BAR */}\r\n        <div className=\"progressBar\">\r\n          <div\r\n            className=\"progressBar__loaded\"\r\n            style={progressBarLoadedStyle}\r\n          ></div>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\nexport default Creator;","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport { maxTaskNameLength } from '../lib/globalVariables';\r\nimport { taskNameProgressStyle } from '../lib/handlers';\r\nimport '../scss/EditableText.scss';\r\n\r\nconst EditableText = (props) => {\r\n    \r\n  const {\r\n    output,\r\n    isValid,\r\n    isMaximized,\r\n    taskNameLength,\r\n    isDisabled,\r\n    isEditMode,\r\n    onTaskNameChange,\r\n    onEditModeChange\r\n  } = props;\r\n\r\n  const editableTextClass = classNames(\"taskName\", {\r\n    \"taskName--disabled\": isDisabled,\r\n    \"taskName--maximized\": isMaximized\r\n  });\r\n\r\n  const textClass = classNames(\"taskName__text\", {\r\n    \"taskName__text--visible\": !isEditMode\r\n  })\r\n\r\n  const inputContainerClass = classNames(\"taskName__inputContainer\", {\r\n    \"taskName__inputContainer--visible\": isEditMode\r\n  })\r\n\r\n  const inputClass = classNames(\"taskName__input\", {\r\n    \"taskName__input--incorrect\": !isValid\r\n  })\r\n\r\n  const progressClass = classNames(\"taskName__progress\", {\r\n    \"taskName__progress--visible\": isEditMode\r\n  })\r\n\r\n  return (\r\n    <div className={editableTextClass}>\r\n      {/* TEXT TITLE */}\r\n      <h2 className={textClass} onClick={onEditModeChange}>\r\n        {`\"${output}\"`}\r\n      </h2>\r\n      {/* TEXT CONTAINER */}\r\n      <div className={inputContainerClass}>\r\n        {/* INPUT */}\r\n        <textarea\r\n          className={inputClass}\r\n          value={output}\r\n          spellCheck=\"false\"\r\n          maxLength={maxTaskNameLength}\r\n          onChange={(e) => onTaskNameChange(e.target.value)}\r\n        ></textarea>\r\n        {/* TEXT PROGRESS */}\r\n        <div\r\n          className={progressClass}\r\n          style={taskNameProgressStyle(taskNameLength)}\r\n        ></div>\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default EditableText;","import React from 'react';\r\nimport classNames from 'classnames';\r\n\r\nconst EditableTime = (props) => {\r\n  const {\r\n    id,\r\n    name,\r\n    unit,\r\n    time,\r\n    isEditMode,\r\n    onTimeChange,\r\n    onEditModeChange\r\n  } = props;\r\n  \r\n  const textClass = classNames(\"TotalTime__text\", {\r\n    \"TotalTime__text--visible\": !isEditMode\r\n  });\r\n\r\n  const timeClass = classNames(\"TotalTime__input\",\r\n    `TotalTime__input--${unit}`, {\r\n    \"TotalTime__input--visible\": isEditMode\r\n  });\r\n\r\n  const placeholder = unit.slice(0,3);\r\n\r\n  return (\r\n    <div className={`TotalTime__unit TotalTime__unit--${unit}`}>\r\n      {/* TEXT */}\r\n      <p className={textClass} onClick={onEditModeChange}>\r\n        {time}\r\n      </p>\r\n      {/* INPUT */}\r\n      <input\r\n        id={id}\r\n        name={name}\r\n        className={timeClass}\r\n        placeholder={placeholder}\r\n        maxLength=\"2\"\r\n        value={time}\r\n        onChange={(e) => onTimeChange(e.target.value)}\r\n      />\r\n    </div>\r\n  );\r\n}\r\nexport default EditableTime;","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport icons from '../assets/svg/icons.svg';\r\nimport { getNumFromRange } from '../lib/handlers';\r\nimport '../scss/Spinners.scss';\r\n\r\nconst Spinners = (props) => {\r\n\r\n  const {\r\n    modifier,\r\n    value,\r\n    isValid,\r\n    isEditMode,\r\n    onTimeChange\r\n  } = props;\r\n\r\n  const handleValueChange = (value, operation) => {\r\n    value = value === \"\" ? 0 : value;\r\n    const newValue = getNumFromRange(value, operation, 0, 99);\r\n    onTimeChange(newValue);\r\n  }\r\n\r\n  const spinnersClass = classNames(\"Spinners\", [`Spinners--${modifier}`], {\r\n    \"Spinners--visible\": isEditMode,\r\n    \"Spinners--disabled\": !isValid\r\n  });\r\n\r\n  return (\r\n    <div className={spinnersClass}>\r\n      {/* INCREASE BUTTON */}\r\n      <button\r\n        className=\"Spinners__button Spinners__button--increase\"\r\n        onClick={() => handleValueChange(value, \"increase\")}\r\n        disabled={!isValid}\r\n      >\r\n        <svg className=\"Spinners__svg\" viewBox=\"0 0 512 512\">\r\n          <use href={`${icons}#arrow-up`}></use>\r\n        </svg>\r\n      </button>\r\n      {/* DECREASE BUTTON */}\r\n      <button\r\n        className=\"Spinners__button Spinners__button--decrease\"\r\n        onClick={() => handleValueChange(value, \"decrease\")}\r\n        disabled={!isValid}\r\n      >\r\n        <svg className=\"Spinners__svg\" viewBox=\"0 0 512 512\">\r\n          <use href={`${icons}#arrow-down`}></use>\r\n        </svg>\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\nexport default Spinners;","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport EditableTime from './EditableTime';\r\nimport Spinners from './Spinners'\r\nimport '../scss/TotalTime.scss';\r\n\r\nconst TotalTime = (props) => {\r\n\r\n  const {\r\n    labelName,\r\n    modifier,\r\n    id,\r\n    isMaximized,\r\n    minutes,\r\n    seconds,\r\n    isValid,\r\n    isDisabled,\r\n    isEditMode,\r\n    onEditModeChange,\r\n    onMinutesChange,\r\n    onSecondsChange,\r\n    onKeyPress\r\n  } = props;\r\n\r\n  const totalTimeClass = classNames(`TotalTime TotalTime--${modifier}`, {\r\n    \"TotalTime--maximized\": isMaximized,\r\n    \"TotalTime--disabled\": isDisabled\r\n  });\r\n\r\n  const labelClass = classNames(\"TotalTime__label\", {\r\n    \"TotalTime__label--editMode\": isEditMode\r\n  });\r\n\r\n  const displayClass = classNames(\"TotalTime__display\", {\r\n    \"TotalTime__display--editMode\": isEditMode,\r\n    \"TotalTime__display--incorrect\": !isValid\r\n  });\r\n\r\n  return (\r\n    <div className={totalTimeClass}>\r\n      {/* LABEL */}\r\n      <label\r\n        className={labelClass}\r\n        htmlFor={`${modifier}-${id}`}\r\n        onClick={onEditModeChange}\r\n      >\r\n        {labelName}\r\n      </label>\r\n      <div\r\n        className={displayClass}\r\n        onKeyDown={(e) => onKeyPress(e.key)}\r\n        tabIndex=\"0\"\r\n      >\r\n        <Spinners\r\n          modifier=\"minutes\"\r\n          value={minutes}\r\n          isValid={isValid}\r\n          isEditMode={isEditMode}\r\n          onTimeChange={(value) => onMinutesChange(value)}\r\n        />\r\n        {/* MINUTES */}\r\n        <EditableTime\r\n          id={`${modifier}-${id}`}\r\n          name={`${modifier}Minutes`}\r\n          unit=\"minutes\"\r\n          time={minutes}\r\n          isEditMode={isEditMode}\r\n          onTimeChange={(value) => onMinutesChange(value)}\r\n          onEditModeChange={onEditModeChange}\r\n        />\r\n        {/* SEPARATOR */}\r\n        <span className=\"TotalTime__colon\">{` : `}</span>\r\n        {/* SECONDS */}\r\n        <EditableTime\r\n          name={`${modifier}Seconds`}\r\n          unit=\"seconds\"\r\n          time={seconds}\r\n          isEditMode={isEditMode}\r\n          onTimeChange={(value) => onSecondsChange(value)}\r\n          onEditModeChange={onEditModeChange}\r\n        />\r\n        <Spinners\r\n          modifier=\"seconds\"\r\n          value={seconds}\r\n          isValid={isValid}\r\n          isEditMode={isEditMode}\r\n          onTimeChange={(value) => onSecondsChange(value)}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default TotalTime;","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport icons from '../assets/svg/icons.svg';\r\nimport '../scss/CardButtons.scss';\r\n\r\nconst CardButtons = (props) => {\r\n\r\n  const {\r\n    isMaximized,\r\n    editModeActive,\r\n    inputInvalid,\r\n    cardRotatingMode,\r\n    onAcceptButtonClick,\r\n    onRemoveButtonClick,\r\n    onTaskStateChange\r\n  } = props;\r\n\r\n  const handleMinMaxButtons = () => {\r\n    onTaskStateChange(prevState => ({\r\n      isMaximized: !prevState.isMaximized\r\n    }));\r\n  }\r\n\r\n  const cardButtonsClass = classNames(\"CardButtons\", {\r\n    \"CardButtons--maximized\": isMaximized\r\n  });\r\n\r\n  const acceptButtonClass = classNames(\"CardButtons__button\",\r\n  \"CardButtons__button--accept\", {\r\n    \"CardButtons__button--visible\": editModeActive,\r\n    \"CardButtons__button--disabled\": inputInvalid || cardRotatingMode\r\n  });\r\n\r\n  const minimizeButtonClass = classNames(\"CardButtons__button\",\r\n  \"CardButtons__button--minimize\", {\r\n    \"CardButtons__button--disabled\": editModeActive || cardRotatingMode,\r\n    \"CardButtons__button--visible\": isMaximized\r\n  });\r\n\r\n  const maximizeButtonClass = classNames(\"CardButtons__button\",\r\n  \"CardButtons__button--maximize\", {\r\n    \"CardButtons__button--disabled\": editModeActive || cardRotatingMode,\r\n    \"CardButtons__button--visible\": !isMaximized\r\n  });\r\n\r\n  const removeButtonClass = classNames(\"CardButtons__button\",\r\n  \"CardButtons__button--remove\", \"CardButtons__button--visible\", {\r\n    \"CardButtons__button--disabled\": editModeActive || cardRotatingMode\r\n  });\r\n  \r\n  return (\r\n    <div className={cardButtonsClass}>\r\n      {/* ACCEPT BUTTON */}\r\n      <button\r\n        className={acceptButtonClass}\r\n        onClick={onAcceptButtonClick}\r\n      >\r\n        <svg className=\"CardButtons__svg\" viewBox=\"0 0 512 512\">\r\n          <use href={`${icons}#tick`}/>\r\n        </svg>\r\n      </button>\r\n\r\n      <div className=\"CardButtons__minmax\">\r\n        {/* MINIMIZE BUTTON */}\r\n        <button\r\n          className={minimizeButtonClass}\r\n          onClick={handleMinMaxButtons}\r\n          //disabled={editModeActive}\r\n        >\r\n          <svg className=\"CardButtons__svg\" viewBox=\"0 0 512 512\">\r\n            <use href={`${icons}#minimize`}/>\r\n          </svg>\r\n        </button>\r\n        {/* MAXIMIZE BUTTON */}\r\n        <button\r\n          className={maximizeButtonClass}\r\n          onClick={handleMinMaxButtons}\r\n          //disabled={editModeActive}\r\n        >\r\n          <svg className=\"CardButtons__svg\" viewBox=\"0 0 512 512\">\r\n            <use href={`${icons}#maximize`}/>\r\n          </svg>\r\n        </button>\r\n      </div>\r\n      \r\n      {/* REMOVE BUTTON */}\r\n      <button\r\n        className={removeButtonClass}\r\n        onClick={onRemoveButtonClick}\r\n        disabled={editModeActive || cardRotatingMode}\r\n      >\r\n        <svg className=\"CardButtons__svg\" viewBox=\"0 0 512 512\">\r\n          <use href={`${icons}#remove`}/>\r\n        </svg>\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\nexport default CardButtons;","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport '../scss/TimeDisplay.scss';\r\n\r\nconst TimeDisplay = (props) => {\r\n  const {\r\n    type,\r\n    elapsedTimeArray,\r\n    remainingTimeArray,\r\n    isElapsedMode\r\n  } = props;\r\n\r\n  const elapsedTimeResult = type === 'taskTime'\r\n    ? elapsedTimeArray.join(':')\r\n    : elapsedTimeArray.slice(0,2).join(':');\r\n\r\n  const remainingTimeResult = type === 'taskTime'\r\n    ? remainingTimeArray.join(':')\r\n    : remainingTimeArray.slice(0,2).join(':');\r\n\r\n  const elapsedTimeClass = classNames(\"TimeDisplay__type\",\r\n    \"TimeDisplay__type--elapsed\", {\r\n    \"TimeDisplay__type--visible\": isElapsedMode,\r\n    \"TimeDisplay__type--showUp\" : isElapsedMode,\r\n    \"TimeDisplay__type--hideUp\" : !isElapsedMode\r\n  });\r\n  \r\n  const remainingTimeClass = classNames(\"TimeDisplay__type\",\r\n    \"TimeDisplay__type--remaining\", {\r\n    \"TimeDisplay__type--visible\": !isElapsedMode,\r\n    \"TimeDisplay__type--showUp\" : !isElapsedMode,\r\n    \"TimeDisplay__type--hideUp\" : isElapsedMode\r\n  });\r\n\r\n  return (\r\n    <div className='TimeDisplay'>\r\n      <div className={elapsedTimeClass}>{elapsedTimeResult}</div>\r\n      <div className={remainingTimeClass}>{remainingTimeResult}</div>\r\n    </div>\r\n  );\r\n}\r\nexport default TimeDisplay;","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport TimeDisplay from './TimeDisplay';\r\nimport '../scss/Countdown.scss';\r\n\r\nconst Countdown = (props) => {\r\n\r\n  const {\r\n    modifier,\r\n    isElapsedMode,\r\n    elapsedTimeArray,\r\n    remainingTimeArray,\r\n    isCountdownVisible,\r\n    totalBreaks\r\n  } = props;\r\n\r\n  const countdownClass = classNames(`Countdown Countdown--${modifier}`, {\r\n    \"Countdown--visible\": isCountdownVisible,\r\n    \"showFromRight\": isCountdownVisible && totalBreaks > 0,\r\n    \"hideToLeft\": !isCountdownVisible,\r\n  });\r\n\r\n  return (\r\n    <div className={countdownClass}>\r\n\r\n      { /* ACTIVE MODE */\r\n        modifier === 'taskTime'\r\n        ? <h3 className=\"Countdown__heading\">Working Mode</h3>\r\n        : <h3 className=\"Countdown__heading\">Break Mode</h3>\r\n      }\r\n      { /* ELAPSED / REMAINING TIME */\r\n        isElapsedMode\r\n        ? <p className=\"Countdown__timeType\">Elapsed Time</p>\r\n        : <p className=\"Countdown__timeType\">Remaining Time</p>\r\n      }\r\n      {/* TIMER DISPLAY */}\r\n      <TimeDisplay\r\n        type={modifier}\r\n        isElapsedMode={isElapsedMode}\r\n        elapsedTimeArray={elapsedTimeArray}\r\n        remainingTimeArray={remainingTimeArray}\r\n      />\r\n    </div>\r\n  );\r\n}\r\nexport default Countdown;","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport '../scss/StopAlert.scss';\r\n\r\nconst StopAlert = (props) => {\r\n  const {\r\n    alertText,\r\n    isStopAlertVisible,\r\n    onStopCancel,\r\n    onStopConfirm\r\n  } = props;\r\n\r\n  const stopAlertClass = classNames(\"StopAlert\", {\r\n    \"StopAlert--visible\": isStopAlertVisible\r\n  });\r\n  \r\n  const containerClass = classNames(\"StopAlert__container\", {\r\n    \"StopAlert__container--visible\": isStopAlertVisible\r\n  });\r\n\r\n  return (\r\n    <section className={stopAlertClass}>\r\n      <div className={containerClass}>\r\n        <h2 className=\"StopAlert__heading\">{alertText}</h2>\r\n        <button\r\n          className=\"StopAlert__button StopAlert__button--stop\"\r\n          onClick={onStopConfirm}\r\n        >\r\n          Yes\r\n        </button>\r\n        <button\r\n          className=\"StopAlert__button StopAlert__button--cancel\"\r\n          onClick={onStopCancel}\r\n        >\r\n          Cancel\r\n        </button>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\nexport default StopAlert;","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport '../scss/Progress.scss';\r\n\r\nconst Progress = (props) => {\r\n  const {\r\n    modifier,\r\n    isVisible,\r\n    isElapsedMode,\r\n    elapsedPercent,\r\n    remainingPercent\r\n  } = props;\r\n\r\n  const progressClass = classNames(\"Progress\", {\r\n    \"Progress--visible\": isVisible,\r\n    \"Progress--taskTime\": modifier === \"taskTime\",\r\n    \"Progress--breakTime\": modifier === \"breakTime\"\r\n  });\r\n\r\n  const elapsedPercentClass = classNames(\"Progress__percent\", {\r\n    \"Progress__percent--visible\": isElapsedMode\r\n  });\r\n  const remainingPercentClass = classNames(\"Progress__percent\", {\r\n    \"Progress__percent--visible\": !isElapsedMode\r\n  });\r\n  const roundedElapsedPercent = `${Math.round(elapsedPercent)}%`;\r\n  const roundedRemainingPercent = `${Math.round(remainingPercent)}%`;\r\n  const loadingWidth = {\r\n    width: `${isElapsedMode ? elapsedPercent : remainingPercent}%`\r\n  };\r\n  const unloadingWidth = {\r\n    width: `${isElapsedMode ? remainingPercent : elapsedPercent}%`\r\n  };\r\n  \r\n  return (\r\n    <section className={progressClass}>\r\n      {/* PROGRESS HEADER */}\r\n      <header className=\"Progress__header\">\r\n        <p className={elapsedPercentClass}>{roundedElapsedPercent}</p>\r\n        <p className={remainingPercentClass}>{roundedRemainingPercent}</p>\r\n      </header>\r\n      {/* PROGRESS BAR */}\r\n      <div className=\"Progress__bar\">\r\n        <div\r\n          className=\"Progress__part Progress__part--loading\"\r\n          style={loadingWidth}\r\n        ></div>\r\n        <div\r\n          className=\"Progress__part Progress__part--unloading\"\r\n          style={unloadingWidth}\r\n        ></div>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\nexport default Progress;","import React, { Component } from 'react';\r\nimport classNames from 'classnames';\r\nimport icons from '../assets/svg/icons.svg';\r\nimport '../scss/Controls.scss';\r\n\r\nclass Controls extends Component {\r\n\r\n  handlePlayPauseButton = () => {\r\n    const {\r\n      isTaskTimeActive,\r\n      isBreakTimeActive,\r\n      onTimerStateChange } = this.props;\r\n\r\n    if (isTaskTimeActive || isBreakTimeActive) {\r\n      onTimerStateChange(prevState => ({\r\n        isTaskTimeActive: !prevState.isTaskTimeActive,\r\n        isBreakTimeActive: !prevState.isBreakTimeActive,\r\n        previousTime: Date.now()\r\n      }));\r\n    }\r\n    if (isTaskTimeActive) {\r\n      onTimerStateChange(prevState => ({\r\n        totalBreaks: prevState.totalBreaks + 1\r\n      }));\r\n    }\r\n  }\r\n\r\n  handleToggleButton = () => this.props.onDisplayModeChange();\r\n\r\n  render() {\r\n\r\n    const {\r\n      isTaskTimeActive,\r\n      onStopButtonClick,\r\n      cardRotatingMode\r\n    } = this.props;\r\n\r\n    const svgPlayClass = classNames(\"Controls__svg\", {\r\n      \"Controls__svg--hidden\": isTaskTimeActive\r\n    });\r\n    const svgPauseClass = classNames(\"Controls__svg\", {\r\n      \"Controls__svg--hidden\": !isTaskTimeActive\r\n    });\r\n\r\n    const playPauseButtonClass = classNames(\"Controls__button\",\r\n    \"Controls__button--playPause\", {\r\n      \"Controls__button--disabled\": cardRotatingMode\r\n    });\r\n\r\n    const stopButtonClass = classNames(\"Controls__button\",\r\n    \"Controls__button--stop\", {\r\n      \"Controls__button--disabled\": cardRotatingMode\r\n    });\r\n\r\n    const toggleButtonClass = classNames(\"Controls__button\",\r\n    \"Controls__button--toggle\", {\r\n      \"Controls__button--disabled\": cardRotatingMode\r\n    });\r\n\r\n    return (\r\n      <div className=\"Controls\">\r\n        {/* PLAY / PAUSE BUTTON */}\r\n        <button\r\n          className={playPauseButtonClass}\r\n          onClick={this.handlePlayPauseButton}\r\n          disabled={cardRotatingMode}\r\n        >\r\n          <svg className={svgPlayClass} viewBox=\"0 0 512 512\">\r\n            <use href={`${icons}#play`} />\r\n          </svg>\r\n          <svg className={svgPauseClass} viewBox=\"0 0 512 512\">\r\n            <use href={`${icons}#pause`} />\r\n          </svg>\r\n        </button>\r\n  \r\n        {/* STOP BUTTON */}\r\n        <button\r\n          className={stopButtonClass}\r\n          onClick={onStopButtonClick}\r\n          disabled={cardRotatingMode}\r\n        >\r\n          <svg className=\"Controls__svg\" viewBox=\"0 0 512 512\">\r\n            <use href={`${icons}#stop`} />\r\n          </svg>\r\n        </button>\r\n  \r\n        {/* TOGGLE BUTTON */}\r\n        <button\r\n          className={toggleButtonClass}\r\n          onClick={this.handleToggleButton}\r\n          disabled={cardRotatingMode}\r\n        >\r\n          <svg className=\"Controls__svg\" viewBox=\"0 0 512 512\">\r\n            <use href={`${icons}#toggle`} />\r\n          </svg>\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Controls;","import React, { Component } from 'react';\r\nimport { formatTimeResult } from '../lib/handlers';\r\nimport classNames from 'classnames';\r\nimport icons from '../assets/svg/icons.svg';\r\nimport '../scss/Finish.scss';\r\n\r\nclass Finish extends Component {\r\n\r\n  render() {\r\n\r\n    const {\r\n      taskName,\r\n      isTaskFinished,\r\n      onTaskRemove,\r\n      onTimerRestart,\r\n      id\r\n    } = this.props;\r\n    const {\r\n      totalBreaks,\r\n      elapsedBreakTime,\r\n      elapsedBreakTimeArray,\r\n      overallTime,\r\n      overallTimeArray\r\n    } = this.props.state;\r\n  \r\n    const breaksAmount = totalBreaks > 1\r\n      ? ` ${totalBreaks} breaks `\r\n      : totalBreaks === 1 ? ` ${totalBreaks} break ` : \" no brakes \";\r\n\r\n    const breakPercent = totalBreaks\r\n      ? ` ${Math.round(elapsedBreakTime / overallTime * 100)}%`\r\n      : \"\";\r\n\r\n    const overallTimeResult = formatTimeResult(overallTimeArray);\r\n    const breakTimeResult = formatTimeResult(elapsedBreakTimeArray, elapsedBreakTime);\r\n    const finishClass = classNames(\"Finish\", {\r\n      [`Finish--success`]: isTaskFinished,\r\n      [`Finish--failure`]: !isTaskFinished\r\n    });\r\n\r\n    return (\r\n      <section className={finishClass}>\r\n  \r\n        {/* FINISH HEADING */}\r\n        { isTaskFinished\r\n          ?\r\n          <h2 className=\"Finish__heading\">\r\n            Time is up!\r\n            <span className=\"Finish__emoji\" role=\"img\" aria-label=\"party\"> 🎉</span>\r\n          </h2>\r\n          :\r\n          <h2 className=\"Finish__heading\">\r\n            Too long break!\r\n            <span className=\"Finish__emoji\" role=\"img\" aria-label=\"party\"> 🙁</span>\r\n          </h2>\r\n        }\r\n        {/* TASK FINISHED MESSAGE */}\r\n        { isTaskFinished\r\n          ?\r\n          <p className=\"Finish__message\">\r\n            You have finished your task: <br />\r\n            <span className=\"Finish__accent\">{`\"${taskName}\"`}</span><br />\r\n            in\r\n            <span className=\"Finish__accent\">{overallTimeResult}</span>\r\n            {`${elapsedBreakTime > 0 ? \" including break time.\" : \".\"}`} <br />\r\n            You had\r\n            <span className=\"Finish__accent\">{breaksAmount}</span>\r\n            during this task\r\n            <span className=\"Finish__accent\">{breakTimeResult}</span>\r\n            {totalBreaks ? \" long, what makes it around\" : \"\"}\r\n            <span className=\"Finish__accent\">{breakPercent}</span>\r\n            {totalBreaks ? \" of all time.\" : \".\"}\r\n          </p>\r\n          :\r\n          <p className=\"Finish__message\">\r\n            You spent too much time on breaks! <br />\r\n            You had\r\n            <span className=\"Finish__accent\">{breaksAmount}</span>\r\n            during this task\r\n            <span className=\"Finish__accent\">{breakTimeResult}</span>\r\n            {totalBreaks ? \" long, what makes it around\" : \"\"}\r\n            <span className=\"Finish__accent\">{breakPercent}</span>\r\n            {totalBreaks ? \" of all time.\" : \".\"}\r\n          </p>\r\n        }\r\n        {/* RESTART BUTTON */}\r\n        <button\r\n          className=\"Finish__button Finish__button--restart\"\r\n          onClick={onTimerRestart}\r\n        >\r\n          <svg className=\"Finish__svg\" viewBox=\"0 0 512 512\">\r\n            <use href={`${icons}#retry`}/>\r\n          </svg>\r\n        </button>\r\n\r\n        {/* REMOVE BUTTON */}\r\n        <button\r\n          className=\"Finish__button Finish__button--remove\"\r\n          onClick={() => onTaskRemove(id)}\r\n        >\r\n          <svg className=\"Task__svg\" viewBox=\"0 0 512 512\">\r\n            <use href={`${icons}#remove`}/>\r\n          </svg>\r\n        </button>\r\n      </section>\r\n    );\r\n  }\r\n}\r\nexport default Finish;","import React, {Component} from 'react';\r\nimport classNames from 'classnames';\r\nimport Countdown from './Countdown';\r\nimport StopAlert from './StopAlert.js';\r\nimport Progress from './Progress';\r\nimport Controls from './Controls';\r\nimport Finish from './Finish.js';\r\nimport { getTimeArray, breaksAmount } from '../lib/handlers';\r\nimport { cardFlipTime } from '../lib/globalVariables';\r\nimport '../scss/Timer.scss';\r\n\r\nclass Timer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const {\r\n      startTime,\r\n      totalTaskTime,\r\n      totalBreakTime,\r\n      totalTaskTimeArray,\r\n      totalBreakTimeArray } = this.props.state;\r\n\r\n    this.state = {\r\n      isTimerStarted: false,\r\n      // visibility\r\n      isStopAlertVisible: false,\r\n      isTimerVisible: false,\r\n      // modes\r\n      isTaskTimeElapsedMode: true,\r\n      isBreakTimeElapsedMode: true,\r\n      isTaskTimeActive: true,\r\n      isBreakTimeActive: false,\r\n      isTaskFinished: false,\r\n      isBreakFinished: false,\r\n      // total\r\n      totalTaskTime,\r\n      totalBreakTime,\r\n      totalBreaks: 0,\r\n      // elapsed\r\n      elapsedTaskTime: 0,\r\n      elapsedTaskPercent: 0,\r\n      elapsedTaskTimeArray: ['00','00','00'],\r\n      elapsedBreakTime: 0,\r\n      elapsedBreakPercent: 0,\r\n      elapsedBreakTimeArray: ['00','00','00'],\r\n      //remaining\r\n      remainingTaskTime: 0,\r\n      remainingTaskPercent: 100,\r\n      remainingTaskTimeArray: totalTaskTimeArray,\r\n      remainingBreakTime: 0,\r\n      remainingBreakPercent: 100,\r\n      remainingBreakTimeArray: totalBreakTimeArray,\r\n      // overall\r\n      previousTime: startTime,\r\n      overallTime: 0,\r\n      overallTimeArray: ['00','00','00']\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.taskIntervalId = setInterval(() => this.handleTimeTick('Task'), 10);\r\n    this.breakIntervalId = setInterval(() => this.handleTimeTick('Break'), 10);\r\n\r\n    this.timeoutId = setTimeout(() => {\r\n      this.setState({\r\n        isTimerStarted: true,\r\n        isTimerVisible: true,\r\n        previousTime: Date.now()\r\n      });\r\n    }, cardFlipTime);\r\n\r\n    this.handleRotatingStatus();\r\n  }\r\n  \r\n  componentWillUnmount() {\r\n    clearInterval(this.taskIntervalId);\r\n    clearInterval(this.breakIntervalId);\r\n    clearTimeout(this.timeoutId);\r\n  }\r\n\r\n  handleRotatingStatus = () => {\r\n    const { onTaskStateChange } = this.props;\r\n    setTimeout(() => {\r\n      onTaskStateChange({\r\n        isTaskRotatingIn: true,\r\n        isTaskRotatingOut: false\r\n      })\r\n    }, cardFlipTime);\r\n\r\n    setTimeout(() => {\r\n      onTaskStateChange({\r\n        isTaskRotatingIn: false\r\n      })\r\n    }, cardFlipTime * 2)\r\n  };\r\n\r\n  handleTimerStop = () => {\r\n    const { onTaskStateChange } = this.props;\r\n\r\n    onTaskStateChange({ isTaskRotatingOut: true });\r\n\r\n    this.setState({\r\n      isTimerStarted: false,\r\n      isStopAlertVisible: false\r\n    });\r\n\r\n    this.timeoutId = setTimeout(() => {\r\n      onTaskStateChange({ isTimerMounted: false });\r\n      clearTimeout(this.timeoutId);\r\n    }, cardFlipTime);\r\n\r\n    this.handleRotatingStatus();\r\n  }\r\n\r\n  handleStateChange = (object) => this.setState(object);\r\n  \r\n  handleTimeDisplayMode = () => {\r\n    const { isTaskTimeActive } = this.state;\r\n    const type = isTaskTimeActive ? \"Task\" : \"Break\";\r\n    this.setState(prevState => ({\r\n      [`is${type}TimeElapsedMode`]: !prevState[`is${type}TimeElapsedMode`]\r\n    }));\r\n  }\r\n\r\n  handleAlertVisibility = () => {\r\n    this.setState(prevState => ({\r\n      isStopAlertVisible: !prevState.isStopAlertVisible\r\n    }));\r\n  }\r\n\r\n  handleTimeTick = (type) => {\r\n    if (this.state[`is${type}TimeActive`] && this.state.isTimerStarted) {\r\n\r\n      const { previousTime, elapsedTaskTime, elapsedBreakTime } = this.state;\r\n      const totalTime = this.state[`total${type}Time`];\r\n      const elapsedTime = this.state[`elapsed${type}Time`];\r\n      const remainingTime = this.state[`remaining${type}Time`];\r\n      const overallTime = elapsedTaskTime + elapsedBreakTime;\r\n\r\n      const now = Date.now();\r\n      const elapsedTimeArray   = getTimeArray(elapsedTime);\r\n      const totalTimeArray     = getTimeArray(totalTime);\r\n      const remainingTimeArray = getTimeArray(remainingTime);\r\n      const overallTimeArray   = getTimeArray(overallTime);\r\n      const elapsedPercent   = elapsedTime / totalTime * 100;\r\n      const remainingPercent = remainingTime / totalTime * 100;\r\n\r\n      // when task time finishes\r\n      if (elapsedTime >= totalTime) {\r\n        this.setState({\r\n          [`is${type}TimeActive`]: false,\r\n          [`elapsed${type}Time`]: totalTime,\r\n          [`elapsed${type}TimeArray`]: totalTimeArray,\r\n          [`remaining${type}TimeArray`]: ['00','00','00'],\r\n          [`elapsed${type}Percent`]: 100,\r\n          [`remaining${type}Time`]: 0,\r\n          [`remaining${type}Percent`]: 0,\r\n          [`is${type}Finished`]: true,\r\n          isStopAlertVisible: false,\r\n          isFinishVisible: true,\r\n          overallTime,\r\n          overallTimeArray,\r\n        });\r\n      // normal task time tick\r\n      } else {\r\n        this.setState({\r\n          previousTime: now,\r\n          [`elapsed${type}Time`]: elapsedTime + (now - previousTime),\r\n          [`elapsed${type}TimeArray`]: elapsedTimeArray,\r\n          [`remaining${type}Time`]: totalTime - elapsedTime,\r\n          [`remaining${type}TimeArray`]: remainingTimeArray,\r\n          [`elapsed${type}Percent`]: elapsedPercent,\r\n          [`remaining${type}Percent`]: remainingPercent\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    \r\n    const { taskName } = this.props.state;\r\n\r\n    const {\r\n      isTimerVisible,\r\n      isStopAlertVisible,\r\n      isTaskTimeElapsedMode,\r\n      isBreakTimeElapsedMode,\r\n      isTaskFinished,\r\n      isBreakFinished,\r\n      isTaskTimeActive,\r\n      isBreakTimeActive,\r\n      elapsedTaskPercent,\r\n      elapsedTaskTimeArray,\r\n      elapsedBreakPercent,\r\n      elapsedBreakTimeArray,\r\n      remainingTaskPercent,\r\n      remainingTaskTimeArray,\r\n      remainingBreakPercent,\r\n      remainingBreakTimeArray,\r\n      totalBreaks\r\n    } = this.state;\r\n\r\n    const {\r\n      id,\r\n      onTaskStateChange,\r\n      onTaskRemove,\r\n      cardRotatingMode\r\n    } = this.props;\r\n\r\n    const timerClass = classNames(\"Timer\", {\r\n      \"Timer--visible\": isTimerVisible,\r\n      \"Timer--taskTime\": isTaskTimeActive || isTaskFinished,\r\n      \"Timer--breakTime\": isBreakTimeActive || isBreakFinished\r\n    });\r\n\r\n    return (\r\n      <section className={timerClass}>\r\n        <h2 className=\"Timer__heading\">{`\"${taskName}\"`}</h2>\r\n        <div className=\"Timer__container\">\r\n          {/* TASK TIME COUNTDOWN */}\r\n          <Countdown\r\n            modifier=\"taskTime\"\r\n            isElapsedMode={isTaskTimeElapsedMode}\r\n            elapsedTimeArray={elapsedTaskTimeArray}\r\n            remainingTimeArray={remainingTaskTimeArray}\r\n            elapsedTaskPercent={elapsedTaskPercent}\r\n            remainingTaskPercent={remainingTaskPercent}\r\n            isCountdownVisible={isTaskTimeActive || isTaskFinished}\r\n            onTaskStateChange={onTaskStateChange}\r\n            totalBreaks={totalBreaks}\r\n          />\r\n          {/* BREAK TIME COUNTDOWN */}\r\n          <Countdown\r\n            modifier=\"breakTime\"\r\n            isElapsedMode={isBreakTimeElapsedMode}\r\n            elapsedTimeArray={elapsedBreakTimeArray}\r\n            remainingTimeArray={remainingBreakTimeArray}\r\n            elapsedTaskPercent={elapsedBreakPercent}\r\n            remainingTaskPercent={remainingBreakPercent}\r\n            isCountdownVisible={isBreakTimeActive || isBreakFinished}\r\n            onTaskStateChange={onTaskStateChange}\r\n            totalBreaks={totalBreaks}\r\n          />\r\n        </div>\r\n        {/* BREAKS COUNTER */}\r\n        <p className=\"Timer__breaks\">\r\n          {breaksAmount(totalBreaks)}\r\n        </p>\r\n        {/* CONTROL BUTTONS */}\r\n        <Controls\r\n          isTaskTimeActive={isTaskTimeActive}\r\n          isBreakTimeActive={isBreakTimeActive}\r\n          cardRotatingMode={cardRotatingMode}\r\n          onDisplayModeChange={this.handleTimeDisplayMode}\r\n          onTimerStateChange={this.handleStateChange}\r\n          onStopButtonClick={this.handleAlertVisibility}\r\n        />\r\n        {/* PROGRESS BAR */}\r\n        <div className=\"Timer__progress\">\r\n          <Progress\r\n            modifier=\"taskTime\"\r\n            isVisible={isTaskTimeActive || isTaskFinished}\r\n            isElapsedMode={isTaskTimeElapsedMode}\r\n            elapsedPercent={elapsedTaskPercent}\r\n            remainingPercent={remainingTaskPercent}\r\n          />\r\n          <Progress\r\n            modifier=\"breakTime\"\r\n            isVisible={isBreakTimeActive || isBreakFinished}\r\n            isElapsedMode={isBreakTimeElapsedMode}\r\n            elapsedPercent={elapsedBreakPercent}\r\n            remainingPercent={remainingBreakPercent}\r\n          />\r\n        </div>\r\n        {/* STOP TASK SECTION */}\r\n        <StopAlert\r\n          alertText=\"Do you really want to stop this task?\"\r\n          isStopAlertVisible={isStopAlertVisible}\r\n          onStopCancel={this.handleAlertVisibility}\r\n          onStopConfirm={this.handleTimerStop}\r\n        />\r\n        {/* TASK TIME EXCEEDED */}\r\n        {\r\n          isTaskFinished\r\n          ? <Finish\r\n            isTaskFinished={isTaskFinished}\r\n            taskName={taskName}\r\n            state={this.state}\r\n            onTimerStateChange={this.handleStateChange}\r\n            onTaskStateChange={onTaskStateChange}\r\n            onTaskRemove={onTaskRemove}\r\n            onTimerRestart={this.handleTimerStop}\r\n            id={id}\r\n          />\r\n          : <div></div>\r\n        }\r\n        {/* BREAK TIME EXCEEDED */}\r\n        {\r\n          isBreakFinished\r\n          ? <Finish\r\n            isTaskFinished={isTaskFinished}\r\n            taskName={taskName}\r\n            state={this.state}\r\n            onTimerStateChange={this.handleStateChange}\r\n            onTaskStateChange={onTaskStateChange}\r\n            onTaskRemove={onTaskRemove}\r\n            onTimerRestart={this.handleTimerStop}\r\n            id={id}\r\n          />\r\n          : <div></div>\r\n        }\r\n      </section>\r\n    );\r\n  }\r\n}\r\nexport default Timer;","import React, { Component } from 'react';\r\nimport classNames from 'classnames';\r\nimport EditableText from './EditableText.js';\r\nimport TotalTime from './TotalTime.js';\r\nimport CardButtons from './CardButtons';\r\nimport Timer from './Timer.js';\r\nimport StopAlert from './StopAlert.js';\r\nimport { validateTaskName, handleTimeChange } from '../lib/handlers';\r\nimport { animationStyle } from '../lib/globalVariables';\r\nimport icons from '../assets/svg/icons.svg';\r\nimport '../scss/Task.scss';\r\n\r\nclass Task extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const {\r\n      taskName,\r\n      totalTaskTime,\r\n      totalBreakTime,\r\n      totalTaskTimeArray,\r\n      totalBreakTimeArray,\r\n    } = this.props.task;\r\n\r\n    this.state = {\r\n      isMaximized: true,\r\n      isTaskRotatingIn: false,\r\n      isTaskRotatingOut: false,\r\n      isTaskMounted: false,\r\n      isTimerMounted: false,\r\n      isStopAlertVisible: false,\r\n      taskName,\r\n      taskNameLength: taskName.length,\r\n      taskMinutes: totalTaskTimeArray[0],\r\n      taskSeconds: totalTaskTimeArray[1],\r\n      breakMinutes: totalBreakTimeArray[0],\r\n      breakSeconds: totalBreakTimeArray[1],\r\n      totalTaskTime,\r\n      totalBreakTime,\r\n      totalTaskTimeArray,\r\n      totalBreakTimeArray,\r\n      isTaskNameEditMode: false,\r\n      isTaskTimeEditMode: false,\r\n      isBreakTimeEditMode: false,\r\n      isTaskNameValid: true,\r\n      isTaskTimeValid: true,\r\n      isBreakTimeValid: true\r\n    }\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.setState({ isTaskMounted: true });\r\n    /* this.timeoutId = setTimeout(() => this.setState({\r\n      isTaskRotatingIn: false\r\n    }), cardFlipTime); */\r\n  }\r\n\r\n  componentWillUnmount = () => {\r\n    clearTimeout(this.timeoutId);\r\n  }\r\n  \r\n  handleStateChange = (object) => this.setState(object);\r\n\r\n  handleTaskNameChange = (value) => {\r\n    this.setState({\r\n      taskName: value,\r\n      taskNameLength: value.length,\r\n      isTaskNameValid: validateTaskName(value)\r\n    });\r\n  }\r\n\r\n  handleAlertVisibility = () => {\r\n    this.setState(prevState => ({\r\n      isStopAlertVisible: !prevState.isStopAlertVisible\r\n    }));\r\n  }\r\n  \r\n  handleTaskRemove = () => {\r\n    const { id } = this.props;\r\n    const { onTaskRemove } = this.props;\r\n    onTaskRemove(id);\r\n  }\r\n\r\n  handleEditMode = (input) => {\r\n    const { isMaximized } = this.state;\r\n    if (isMaximized) {\r\n      this.setState({ [`is${input}EditMode`]: true });\r\n    }\r\n  }\r\n\r\n  acceptEditChange = () => {\r\n    const {\r\n      totalTaskTimeArray,\r\n      totalBreakTimeArray,\r\n      isTaskNameValid,\r\n      isTaskTimeValid,\r\n      isBreakTimeValid\r\n    } = this.state;\r\n    const [ taskMinutes, taskSeconds ] = totalTaskTimeArray;\r\n    const [ breakMinutes, breakSeconds ] = totalBreakTimeArray;\r\n\r\n    if (isTaskNameValid && isTaskTimeValid && isBreakTimeValid) {\r\n      this.setState({\r\n        isTaskNameEditMode: false,\r\n        isTaskTimeEditMode: false,\r\n        isBreakTimeEditMode: false,\r\n        taskMinutes,\r\n        taskSeconds,\r\n        breakMinutes,\r\n        breakSeconds,\r\n      });\r\n    }\r\n  }\r\n\r\n  handleTimeChange = (minutes, seconds, units, type) => {\r\n    const object = handleTimeChange(minutes, seconds, units, type);\r\n\r\n    if (type === 'task') {\r\n      if (units === 'minutes') {\r\n        const {\r\n          taskMinutes, totalTaskTime, totalTaskTimeArray, isTaskTimeValid\r\n        } = object;\r\n        this.setState({\r\n          taskMinutes, totalTaskTime, totalTaskTimeArray, isTaskTimeValid\r\n        });\r\n      } else if (units === 'seconds') {\r\n        const {\r\n          taskSeconds, totalTaskTime, totalTaskTimeArray, isTaskTimeValid\r\n        } = object;\r\n        this.setState({\r\n          taskSeconds, totalTaskTime, totalTaskTimeArray, isTaskTimeValid\r\n        });\r\n      }\r\n    } else if (type === 'break') {\r\n      if (units === 'minutes') {\r\n        const {\r\n          breakMinutes, totalBreakTime, totalBreakTimeArray, isBreakTimeValid\r\n        } = object;\r\n        this.setState({\r\n          breakMinutes, totalBreakTime, totalBreakTimeArray, isBreakTimeValid\r\n        });\r\n      } else if (units === 'seconds') {\r\n        const {\r\n          breakSeconds, totalBreakTime, totalBreakTimeArray, isBreakTimeValid\r\n        } = object;\r\n        this.setState({\r\n          breakSeconds, totalBreakTime, totalBreakTimeArray, isBreakTimeValid\r\n        });\r\n      }\r\n    }\r\n    //this.setState({ alertTimeFlag });\r\n  }\r\n\r\n  handleStartButton = () => {\r\n    this.setState({\r\n      isTaskRotatingOut: true,\r\n      isTimerMounted: true\r\n    });\r\n  }\r\n\r\n  handleKeyPress = (key) => {\r\n    const {\r\n      isTaskNameEditMode,\r\n      isTaskTimeEditMode,\r\n      isBreakTimeEditMode\r\n    } = this.state;\r\n    const editModeActive = isTaskNameEditMode || isTaskTimeEditMode || isBreakTimeEditMode;\r\n    \r\n    if (key === \"Enter\" && editModeActive) this.acceptEditChange();\r\n  }\r\n\r\n  handleMaximizeCard = () => {\r\n    const { isMaximized } = this.state;\r\n    if (!isMaximized) {\r\n      this.setState({ isMaximized: true });\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    const { id, onCardStateChange } = this.props;\r\n    const {\r\n      isMaximized,\r\n      isTaskMounted,\r\n      isTaskRotatingIn,\r\n      isTaskRotatingOut,\r\n      isStopAlertVisible,\r\n      taskName,\r\n      taskNameLength,\r\n      taskMinutes,\r\n      taskSeconds,\r\n      breakMinutes,\r\n      breakSeconds,\r\n      isTaskNameEditMode,\r\n      isTaskTimeEditMode,\r\n      isBreakTimeEditMode,\r\n      isTaskNameValid,\r\n      isTaskTimeValid,\r\n      isBreakTimeValid\r\n    } = this.state;\r\n\r\n    const editModeActive = isTaskNameEditMode || isTaskTimeEditMode || isBreakTimeEditMode;\r\n    const inputInvalid = !isTaskNameValid || !isTaskTimeValid || !isBreakTimeValid;\r\n    const cardRotatingMode = isTaskRotatingIn || isTaskRotatingOut;\r\n    const taskNameDisabled = isTaskTimeEditMode || isBreakTimeEditMode || cardRotatingMode;\r\n    const taskTimeDisabled = isTaskNameEditMode || isBreakTimeEditMode || cardRotatingMode;\r\n    const breakTimeDisabled = isTaskNameEditMode || isTaskTimeEditMode || cardRotatingMode;\r\n\r\n    const taskClass = classNames(\"Task\", {\r\n      \"Task--visible\": isTaskMounted,\r\n      \"Task--maximized\": isMaximized,\r\n      \"Task--editMode\": editModeActive,\r\n      \"Task--rotateIn\": isTaskRotatingIn && isTaskMounted,\r\n      \"Task--rotateOut\": isTaskRotatingOut && isTaskMounted\r\n    });\r\n\r\n    const startButtonClass = classNames(\"Task__startButton\", {\r\n      \"Task__startButton--maximized\": isMaximized,\r\n      \"Task__startButton--disabled\": editModeActive || cardRotatingMode\r\n    });\r\n    \r\n    return (\r\n      <section\r\n        className={taskClass}\r\n        style={animationStyle}\r\n        onClick={this.handleMaximizeCard}\r\n      >\r\n        {/* TASK  NAME */}\r\n        <EditableText\r\n          output={taskName}\r\n          isValid={isTaskNameValid}\r\n          isMaximized={isMaximized}\r\n          taskNameLength={taskNameLength}\r\n          isDisabled={taskNameDisabled}\r\n          isEditMode={isTaskNameEditMode}\r\n          onEditModeChange={() => this.handleEditMode('TaskName')}\r\n          onTaskNameChange={this.handleTaskNameChange}\r\n        />\r\n\r\n        {/* TOTAL TASK TIME */}\r\n        <TotalTime\r\n          labelName=\"Task Time\"\r\n          modifier=\"taskTime\"\r\n          id={id}\r\n          isMaximized={isMaximized}\r\n          minutes={taskMinutes}\r\n          seconds={taskSeconds}\r\n          isValid={isTaskTimeValid}\r\n          isDisabled={taskTimeDisabled}\r\n          onEditModeChange={() => this.handleEditMode('TaskTime')}\r\n          isEditMode={isTaskTimeEditMode}\r\n          onKeyPress={this.handleKeyPress}\r\n          onMinutesChange={(value) => \r\n            this.handleTimeChange(value, taskSeconds, 'minutes', 'task')}\r\n          onSecondsChange={(value) => \r\n            this.handleTimeChange(taskMinutes, value, 'seconds', 'task')}\r\n        />\r\n        \r\n        {/* TOTAL BREAK TIME */}\r\n        <TotalTime\r\n          labelName=\"Break Time\"\r\n          modifier=\"breakTime\"\r\n          id={id}\r\n          isMaximized={isMaximized}\r\n          minutes={breakMinutes}\r\n          seconds={breakSeconds}\r\n          isValid={isBreakTimeValid}\r\n          isDisabled={breakTimeDisabled}\r\n          onEditModeChange={() => this.handleEditMode('BreakTime')}\r\n          isEditMode={isBreakTimeEditMode}\r\n          onKeyPress={this.handleKeyPress}\r\n          onMinutesChange={(value) => \r\n            this.handleTimeChange(value, breakSeconds, 'minutes', 'break')}\r\n          onSecondsChange={(value) => \r\n            this.handleTimeChange(breakMinutes, value, 'seconds', 'break')}\r\n        />\r\n\r\n        {/* CARD BUTTONS */}\r\n        <CardButtons\r\n          isMaximized={isMaximized}\r\n          editModeActive={editModeActive}\r\n          inputInvalid={inputInvalid}\r\n          cardRotatingMode={cardRotatingMode}\r\n          onAcceptButtonClick={this.acceptEditChange}\r\n          onRemoveButtonClick={this.handleAlertVisibility}\r\n          onTaskStateChange={this.handleStateChange}\r\n        />\r\n\r\n        {/* START BUTTON */}\r\n        <button\r\n          className={startButtonClass}\r\n          disabled={editModeActive || cardRotatingMode}\r\n          onClick={this.handleStartButton}\r\n        >\r\n          <svg className=\"Task__svg\" viewBox=\"0 0 512 512\">\r\n            <use href={`${icons}#play`} />\r\n          </svg>\r\n        </button>\r\n        \r\n        {/* TIMER COMPONENT */}\r\n        {\r\n          this.state.isTimerMounted\r\n          ? <Timer\r\n              onTaskStateChange={this.handleStateChange}\r\n              state={this.state}\r\n              id={id}\r\n              onTaskRemove={this.handleTaskRemove}\r\n              cardRotatingMode={cardRotatingMode}\r\n              onCardStateChange={onCardStateChange}\r\n            />\r\n          : <div className=\"empty\"></div>\r\n        }\r\n\r\n        {/* REMOVE TASK ALERT */}\r\n        <StopAlert\r\n          alertText=\"Do you really want to remove this task?\"\r\n          isStopAlertVisible={isStopAlertVisible}\r\n          onStopCancel={this.handleAlertVisibility}\r\n          onStopConfirm={(id) => this.handleTaskRemove(id)}\r\n        />\r\n      </section>\r\n    );\r\n  }\r\n}\r\nexport default Task;","import React, { Component } from 'react';\r\nimport classNames from 'classnames';\r\nimport Task from './Task';\r\nimport '../scss/Card.scss';\r\n\r\nclass Card extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.card = React.createRef();\r\n    this.draggable = React.createRef();\r\n    this.transitionTime = 1000;\r\n    this.state = {\r\n      isDragging: false,\r\n      originalX: 0,\r\n      originalY: 0,\r\n      translateX: 0,\r\n      translateY: 0\r\n    }\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('mousemove', this.handleMouseMove);\r\n    window.removeEventListener('mouseup', this.handleMouseUp);\r\n  }\r\n\r\n  getHoveredCardSizes = (index) => {\r\n    const {cardIndex, cardsSizes } = this.props;\r\n    return index >= 0\r\n    ? index !== cardIndex\r\n      ? cardsSizes[index]\r\n      : null\r\n    : null; \r\n  }\r\n  \r\n  handleStateChange = (object) => this.setState(object);\r\n\r\n  handleMouseDown = ({ clientX, clientY }) => {\r\n\r\n    const { onAppStateChange } = this.props;\r\n\r\n    window.addEventListener('mousemove', this.handleMouseMove);\r\n    window.addEventListener('mouseup', this.handleMouseUp);\r\n\r\n    // get array of objects containing each card size and offset\r\n    const appNodes = this.card.current.parentNode.children;\r\n    const cardsSizes = [...appNodes]\r\n    .filter(node => node.classList.contains('Card'))\r\n    .map(card => {\r\n      const { offsetHeight, offsetLeft, offsetTop, offsetWidth } = card;\r\n      return {\r\n        height: offsetHeight,\r\n          width: offsetWidth,\r\n          left: offsetLeft,\r\n          top: offsetTop\r\n        }\r\n      }\r\n    );\r\n      \r\n    this.setState({\r\n      originalX: clientX + window.scrollX,\r\n      originalY: clientY + window.scrollY\r\n    });\r\n\r\n    onAppStateChange({ cardsSizes });\r\n  };\r\n\r\n  handleMouseMove = ({ clientX, clientY }) => {\r\n    \r\n    const { onAppStateChange, cardIndex, cardsSizes } = this.props;\r\n    const xPosition = clientX + window.scrollX;\r\n    const yPosition = clientY + window.scrollY;\r\n    const draggedCardSizes = cardsSizes[cardIndex];\r\n\r\n    // find index of hovered card\r\n    const hoveredCardIndex = [...cardsSizes].findIndex(card => {\r\n      const { left, top, width, height } = card;\r\n      const isInsideHorizontally = xPosition >= left && xPosition <= left + width;\r\n      const isInsideVertically = yPosition >= top && yPosition <= top + height;\r\n      //return isInsideHorizontally && isInsideVertically;\r\n      return isInsideHorizontally && isInsideVertically;\r\n    });\r\n    const hoveredCardSizes = this.getHoveredCardSizes(hoveredCardIndex);\r\n\r\n    // set translated position of dragged card\r\n    this.setState(prevState => ({\r\n      translateX: xPosition - prevState.originalX,\r\n      translateY: yPosition - prevState.originalY,\r\n      isDragging: true,\r\n    }));\r\n\r\n    // set translation offsets of hovered card\r\n    if (hoveredCardSizes) {;\r\n      const offsetX = draggedCardSizes.left - hoveredCardSizes.left;\r\n      const offsetY = draggedCardSizes.top - hoveredCardSizes.top;\r\n  \r\n      onAppStateChange({\r\n        hoveredOffsetX: offsetX,\r\n        hoveredOffsetY: offsetY\r\n      });\r\n    }\r\n\r\n    onAppStateChange({\r\n      isDraggingMode: true,\r\n      draggedCardIndex: cardIndex,\r\n      hoveredCardIndex: cardIndex !== hoveredCardIndex ? hoveredCardIndex : -1\r\n    });\r\n  };\r\n  \r\n  handleMouseUp = () => {\r\n\r\n    const {\r\n      onAppStateChange,\r\n      draggedCardIndex,\r\n      hoveredCardIndex,\r\n      cardsSizes } = this.props;\r\n    \r\n    const draggedCardSizes = cardsSizes[draggedCardIndex];\r\n    const hoveredCardSizes = this.getHoveredCardSizes(hoveredCardIndex);\r\n      \r\n    window.removeEventListener('mousemove', this.handleMouseMove);\r\n    window.removeEventListener('mouseup', this.handleMouseUp);\r\n\r\n    // if there is no other card hovered\r\n    if (hoveredCardIndex < 0) {\r\n      this.setState({\r\n        originalX: 0,\r\n        originalY: 0,\r\n        translateX: 0,\r\n        translateY: 0,\r\n        isDragging: false\r\n      });\r\n\r\n    } else {\r\n\r\n      const { onTaskOrderChange } = this.props;\r\n      \r\n      if (hoveredCardSizes) {\r\n        const offsetX = hoveredCardSizes.left - draggedCardSizes.left;\r\n        const offsetY = hoveredCardSizes.top - draggedCardSizes.top;\r\n\r\n        const draggedOffsetX =  -1 * (offsetX - this.state.translateX);\r\n        const draggedOffsetY = -1 * (offsetY - this.state.translateY);\r\n\r\n        this.setState({\r\n          originalX: 0,\r\n          originalY: 0,\r\n          translateX: draggedOffsetX,\r\n          translateY: draggedOffsetY\r\n        });\r\n      }\r\n\r\n      setTimeout(() => {\r\n        this.setState({\r\n          translateX: 0,\r\n          translateY: 0,\r\n          isDragging: false\r\n        });\r\n\r\n        onAppStateChange({\r\n          draggedCardIndex: -1,\r\n          hoveredCardIndex: -1\r\n        });\r\n      }, 30);\r\n      \r\n      onTaskOrderChange(draggedCardIndex, hoveredCardIndex);\r\n    }\r\n\r\n    onAppStateChange({\r\n      isDraggingMode: false\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      task,\r\n      onTaskRemove,\r\n      cardIndex,\r\n      isDraggingMode,\r\n      draggedCardIndex,\r\n      hoveredCardIndex,\r\n      hoveredOffsetX,\r\n      hoveredOffsetY\r\n    } = this.props;\r\n\r\n    const {\r\n      isDragging,\r\n      translateX,\r\n      translateY,\r\n    } = this.state;\r\n    \r\n    const cardStyle = cardIndex === hoveredCardIndex && isDraggingMode\r\n    ? { transform: `translate(${hoveredOffsetX}px, ${hoveredOffsetY}px)` }\r\n    : { transform: `translate(${translateX}px, ${translateY}px)` };\r\n\r\n    const cardClass = classNames(\"Card\", {\r\n      \"Card--dragged\": isDragging,\r\n      \"Card--hovered\": cardIndex === hoveredCardIndex && isDraggingMode,\r\n      \"Card--noTransition\": isDragging ||\r\n      (cardIndex === draggedCardIndex && hoveredCardIndex !== -1)\r\n    });\r\n\r\n    return (\r\n      <div\r\n        className={cardClass}\r\n        style={cardStyle}\r\n        ref={this.card}\r\n        onMouseDown={this.handleMouseDown}\r\n      >\r\n        <Task\r\n          task={task}\r\n          id={task.dateCreated}\r\n          key={task.dateCreated}\r\n          onTaskRemove={onTaskRemove}\r\n          onCardStateChange={this.handleStateChange}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Card;","import React, { Component } from 'react';\r\nimport classNames from 'classnames';\r\nimport '../scss/Intro.scss';\r\n\r\nclass Intro extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      totalTime: 4000,\r\n      timeInterval: 10,\r\n      maxDistance: 4,\r\n      elapsedDistance: 0,\r\n      elapsedAngle: 120,\r\n      elapsedTime: 0,\r\n      xTranslation: 0,\r\n      yTranslation: 0,\r\n      isIntroFadingOut: false\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { timeInterval } = this.state;\r\n    this.intervalId = setInterval(this.handleShadowPostion, timeInterval);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.intervalId);\r\n    clearTimeout(this.timeoutId);\r\n  }\r\n\r\n  handleShadowPostion = () => {\r\n    if (this.props.isIntroVisible) {\r\n      const {\r\n        totalTime,\r\n        timeInterval,\r\n        elapsedTime,\r\n        maxDistance,\r\n        elapsedDistance,\r\n        elapsedAngle\r\n      } = this.state;\r\n\r\n      const totalIntervals = totalTime / timeInterval;\r\n      const distanceIncrement = maxDistance / totalIntervals;\r\n      const factor = 3;\r\n      const easeOut = factor / Math.pow(factor, 2 * (elapsedTime / totalTime));\r\n      const angleIncrement = 360 / totalIntervals * easeOut; // ! to fix\r\n\r\n      const radians = elapsedAngle * (Math.PI / 180);\r\n      const x = Math.sin(radians) * (elapsedDistance);\r\n      const y = Math.cos(radians) * (elapsedDistance);\r\n\r\n      this.setState(prevState => ({\r\n        elapsedTime: elapsedTime + timeInterval,\r\n        elapsedDistance: prevState.elapsedDistance + distanceIncrement,\r\n        elapsedAngle: prevState.elapsedAngle - angleIncrement,\r\n        xTranslation: x,\r\n        yTranslation: y\r\n      }));\r\n\r\n      if ( this.state.elapsedTime >= this.state.totalTime ) {\r\n        const { onAppStateChange } = this.props;\r\n        this.setState({ isIntroFadingOut: true });\r\n        this.timeoutId = setTimeout(() => {\r\n          onAppStateChange({ isIntroVisible: false });\r\n        }, 1000);\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { isIntroFadingOut, xTranslation, yTranslation } = this.state;\r\n\r\n    const introClass = classNames(\"Intro\", {\r\n      \"Intro--visible\": !isIntroFadingOut\r\n    });\r\n\r\n    const styleObject = {\r\n      transform: `\r\n        translate(${xTranslation}%, ${yTranslation}%)\r\n        rotate(0.01deg)\r\n      `\r\n    };\r\n\r\n    return (\r\n      <div className={introClass}>\r\n        <svg className=\"logo\" viewBox=\"0 0 600 600\">\r\n          {/* MASK */}\r\n          <mask id=\"mask\" className=\"logo__mask\">\r\n            <rect width=\"600\" height=\"600\" fill=\"#fff\"/>\r\n            <rect\r\n              x=\"200\"\r\n              y=\"50\"\r\n              width=\"200\"\r\n              height=\"35\"\r\n              rx=\"17.5\"\r\n              ry=\"17.5\"\r\n              fill=\"#000\"\r\n            />\r\n            <circle cx=\"300\" cy=\"300\" r=\"180\" fill=\"#000\"/>\r\n            <circle cx=\"300\" cy=\"300\" r=\"145\" fill=\"#fff\"/>\r\n            <rect\r\n              x=\"282.5\"\r\n              y=\"282.5\"\r\n              width=\"35\"\r\n              height=\"125\"\r\n              rx=\"17.5\"\r\n              ry=\"17.5\"\r\n              fill=\"#000\"\r\n              className=\"logo__clockHand\"\r\n            />\r\n          </mask>\r\n          {/* ELEMENTS */}\r\n          <rect width=\"600\" height=\"600\" className=\"logo__background\"/>\r\n          <rect\r\n            x=\"199\"\r\n            y=\"49\"\r\n            width=\"202\"\r\n            height=\"37\"\r\n            className=\"logo__letter logo__letter--top\"\r\n          />\r\n          <circle\r\n            cx=\"300\"\r\n            cy=\"300\"\r\n            r=\"140\"\r\n            className=\"logo__letter logo__letter--circle\"\r\n          />\r\n          <rect\r\n            width=\"600\"\r\n            height=\"600\"\r\n            className=\"logo__shadow\"\r\n            mask=\"url(#mask)\"\r\n            style={styleObject}\r\n          />\r\n          <rect\r\n            width=\"600\"\r\n            height=\"600\"\r\n            className=\"logo__foreground\"\r\n            mask=\"url(#mask)\"\r\n          />\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Intro;","import React, {Component} from 'react';\r\nimport classNames from 'classnames';\r\nimport Creator from './Creator';\r\nimport Card from './Card';\r\nimport Intro from './Intro';\r\nimport '../scss/App.scss';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.replacedCard = React.createRef();\r\n    this.state = {\r\n      // visibility\r\n      isIntroVisible: false,\r\n      isBoardVisible: false,\r\n      isCreatorVisible: false,\r\n      isDraggingMode: false,\r\n      tasks: [\r\n        {\r\n          taskName: \"Add some feature to TaskTimer App\",\r\n          taskMinutes: 20,\r\n          taskSeconds: 0,\r\n          breakMinutes: 5,\r\n          breakSeconds: 0,\r\n          totalTaskTime: 2000000,\r\n          totalBreakTime: 500000,\r\n          totalTaskTimeArray: [\"20\",\"00\",\"00\"],\r\n          totalBreakTimeArray: [\"05\",\"00\",\"00\"],\r\n          id: 56436543654,\r\n          dateCreated: 56436543654\r\n        },\r\n        {\r\n          taskName: \"Do exercices\",\r\n          taskMinutes: 0,\r\n          taskSeconds: 1,\r\n          breakMinutes: 0,\r\n          breakSeconds: 1,\r\n          totalTaskTime: 1000,\r\n          totalBreakTime: 1000,\r\n          totalTaskTimeArray: [\"00\",\"01\",\"00\"],\r\n          totalBreakTimeArray: [\"00\",\"01\",\"00\"],\r\n          id: 6546567854,\r\n          dateCreated: 6546567854\r\n        },\r\n        {\r\n          taskName: \"Test task for preview purposes\",\r\n          taskMinutes: 30,\r\n          taskSeconds: 0,\r\n          breakMinutes: 10,\r\n          breakSeconds: 0,\r\n          totalTaskTime: 500000,\r\n          totalBreakTime: 100000,\r\n          totalTaskTimeArray: [\"05\",\"00\",\"00\"],\r\n          totalBreakTimeArray: [\"01\",\"00\",\"00\"],\r\n          id: 90798758576,\r\n          dateCreated: 90798758576\r\n        },\r\n        {\r\n          taskName: \"Another task for testing\",\r\n          taskMinutes: 0,\r\n          taskSeconds: 1,\r\n          breakMinutes: 0,\r\n          breakSeconds: 1,\r\n          totalTaskTime: 1000,\r\n          totalBreakTime: 1000,\r\n          totalTaskTimeArray: [\"00\",\"01\",\"00\"],\r\n          totalBreakTimeArray: [\"00\",\"01\",\"00\"],\r\n          id: 654765387657985,\r\n          dateCreated: 654765387657985\r\n        }\r\n      ],\r\n      // cards\r\n      cardsSizes: [],\r\n      draggedCardIndex: -1,\r\n      hoveredCardIndex: -1,\r\n      hoveredOffsetX: 0,\r\n      hoveredOffsetY: 0,\r\n      noTransitionMode: false,\r\n      // validity\r\n      isTaskNameValid: false,\r\n      isTimeInputValid: false\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.setState({isBoardVisible: true});\r\n  }\r\n\r\n  handleStateChange = (object) => this.setState(object);\r\n\r\n  handleTaskOrder = (dragIndex, dropIndex) => {\r\n    const { tasks } = this.state;\r\n    this.setState(prevState => {\r\n      const newTasks = [...prevState.tasks];\r\n      newTasks.splice(dragIndex, 1, tasks[dropIndex]);\r\n      newTasks.splice(dropIndex, 1, tasks[dragIndex]);\r\n      return { tasks: newTasks };\r\n    });\r\n  };\r\n  \r\n  handleTaskRemove = (id) => this.setState(prevState => ({\r\n    tasks: prevState.tasks.filter(task => task.id !== id)\r\n  }));\r\n  \r\n  handleNewTaskButton = () => {\r\n    this.setState({ isCreatorVisible: true });\r\n  }\r\n\r\n  render() {\r\n\r\n    const {\r\n      isIntroVisible,\r\n      isBoardVisible,\r\n      isCreatorVisible,\r\n      tasks,\r\n      isDraggingMode,\r\n      hoveredCardIndex,\r\n      draggedCardIndex,\r\n      hoveredOffsetX,\r\n      hoveredOffsetY,\r\n      cardsSizes\r\n    } = this.state;\r\n\r\n    const boardClass = classNames(\"App__board\", {\r\n      \"App__board--visible\": isBoardVisible\r\n    });\r\n\r\n    const newTaskButtonClass = classNames(\"App__newTaskButton\", {\r\n      \"App__newTaskButton--visible\": !isCreatorVisible\r\n    });\r\n\r\n    const creatorContainerClass = classNames(\"App__creator\", {\r\n      \"App__creator--maximized\": isCreatorVisible\r\n    });\r\n\r\n    return (\r\n      <React.StrictMode>\r\n        <div className=\"App\">\r\n          <h1 className=\"App__heading visuallyhidden\">Task Timer App</h1>\r\n\r\n          { /* LOGO ANIMATION */\r\n            isIntroVisible\r\n            ?\r\n            <Intro\r\n              isIntroVisible={isIntroVisible}\r\n              onAppStateChange={this.handleStateChange}\r\n            />\r\n            : <div className=\"empty\"></div>\r\n          }\r\n\r\n          {/* BOARD OF TASKS */}\r\n          <section className={boardClass}>\r\n            {/* TASK CARDS */}\r\n            {tasks.map((task, index) => (\r\n              <Card\r\n                id={`dnd-${task.dateCreated}`}\r\n                key={`dnd-${task.dateCreated}`}\r\n                task={task}\r\n                cardIndex={index}\r\n                onTaskOrderChange={this.handleTaskOrder}\r\n                onAppStateChange={this.handleStateChange}\r\n                onTaskRemove={this.handleTaskRemove}\r\n                isDraggingMode={isDraggingMode}\r\n                hoveredCardIndex={hoveredCardIndex}\r\n                draggedCardIndex={draggedCardIndex}\r\n                hoveredOffsetX={hoveredOffsetX}\r\n                hoveredOffsetY={hoveredOffsetY}\r\n                cardsSizes={cardsSizes}\r\n              />\r\n            ))}\r\n\r\n            {/* CREATE NEW TASK */}\r\n            <section className={creatorContainerClass}>\r\n              <button\r\n                className={newTaskButtonClass}\r\n                onClick={this.handleNewTaskButton}\r\n              >\r\n                Add New Task\r\n              </button>\r\n              {\r\n                isCreatorVisible\r\n                ? <Creator\r\n                    isVisible={isCreatorVisible}\r\n                    onAppStateChange={this.handleStateChange}\r\n                  />\r\n                : <div className=\"empty\"></div>\r\n              }\r\n            </section>\r\n          </section>\r\n        </div>\r\n      </React.StrictMode>\r\n    );\r\n  }\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();"],"sourceRoot":""}