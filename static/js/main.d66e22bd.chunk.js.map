{"version":3,"sources":["assets/svg/icons.svg","assets/svg/logo.svg","components/Intro.js","components/UserInput.js","lib/globalVariables.js","lib/handlers.js","lib/classes.js","components/UserForm.js","components/UserPanel.js","components/UserEdit.js","components/Sidebar.js","components/CreatorInput.js","components/Creator.js","components/EditableText.js","components/EditableTime.js","components/Spinners.js","components/TotalTime.js","components/CardButtons.js","components/StopAlert.js","components/TimeDisplay.js","components/Countdown.js","components/Progress.js","components/Controls.js","components/Finish.js","components/Timer.js","components/Card.js","components/CardPlaceholder.js","components/Board.js","components/Logo.js","lib/initialUsers.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Intro","props","handleShadowPostion","isIntroVisible","state","totalTime","timeInterval","elapsedTime","maxDistance","elapsedDistance","elapsedAngle","totalIntervals","distanceIncrement","angleIncrement","Math","pow","radians","PI","x","sin","y","cos","setState","prevState","xTranslation","yTranslation","onAppStateChange","isIntroFadingOut","clearInterval","intervalId","timeoutId","setTimeout","this","setInterval","clearTimeout","introClass","classNames","styleObject","transform","className","viewBox","id","width","height","fill","rx","ry","cx","cy","r","mask","style","Component","UserInput","inputId","inputName","parentName","value","label","isInputValid","isAlertVisible","alertText","isDisabled","isPreviewMode","onPreviewModeChange","onInputBlur","onInputChange","userInputClass","labelClass","inputClass","inputType","alertBoxClass","passedClass","previewClass","htmlFor","name","type","spellCheck","maxLength","disabled","onBlur","e","handleInputBlur","target","onChange","onClick","href","icons","animationStyle","animationDuration","validateTaskName","length","validateTaskTime","time","total","test","validateBreakTime","getCapitalized","string","charAt","toUpperCase","substring","getTotalTime","minutes","seconds","parseInt","makeTwoDigits","getTimeArray","floor","handleTimeChange","units","totalTaskTime","taskMinutes","totalTaskTimeArray","isTaskTimeValid","taskSeconds","totalBreakTime","breakMinutes","totalBreakTimeArray","isBreakTimeValid","breakSeconds","formatTimeResult","elapsedBreakTime","taskNameProgressStyle","getTotalDays","date","getDateString","Date","toISOString","slice","currentDate","currentDateStr","startDateStr","totalDays","limit","setDate","getDate","User","login","password","rememberMe","createdAt","tasks","stats","finishedTasks","avgTaskTime","avgBreakTime","avgTasksPerDay","dateCreated","getCreationDate","dateTime","split","reverse","join","hourTime","UserForm","componentDidMount","block","users","rememberedUser","Object","values","find","user","isLoginValid","isPasswordValid","handleCardToggle","onCardToggle","handleFormReset","handleAlert","input","getInputAlert","isEmpty","doesContainWhiteSpaces","isPasswordTooShort","doesLoginExist","map","handleLoginValidation","isInvalid","isLoginAlertVisible","handlePasswordValidation","isPasswordAlertVisible","isPasswordPreviewed","confirm","isConfirmValid","isConfirmAlertVisible","isConfirmPreviewMode","isConfirmDisabled","handleConfirmValidation","isConfirmPreviewed","handlePasswordPreview","handleRememberMe","isPasswordPreviewMode","handleFormSubmit","preventDefault","onUserLogin","isLoginPasswordCorrect","passwordAlertText","newUser","loginAlertText","confirmAlertText","isLoginForm","title","loginButtonName","loginButtonType","submitButtonType","onLoginButtonClick","undefined","onSignupButtonClick","checkboxClass","onSubmit","UserPanel","isLoginFormVisible","isSignupFormVisible","isUserPanelLoaded","userPanelClass","loginClass","signupClass","UserEdit","isEditMode","editedSetting","handleOldPasswordValidation","handleNewPasswordValidation","oldPassword","isOldPasswordValid","isOldPasswordAlertVisible","oldPasswordAlertText","isOldPasswordPreviewMode","newPassword","isNewPasswordValid","isNewPasswordAlertVisible","newPasswordAlertText","isNewPasswordPreviewMode","userEditClass","Fragment","Sidebar","handleStateChange","object","loggedUserId","userLogin","isOldPasswordPreviewed","isNewPasswordPreviewed","handleUserEdit","setting","onUserUpdate","onUserLogout","onUserRemove","handleInputsReset","isSidebarVisible","userEditLabels","statsLabels","statsLabelsKeys","keys","sidebarClass","editButtonsClass","confirmButtonsClass","button","index","buttonClass","tabIndexVal","key","tabIndex","isConfirmButtonDisabled","scope","CreatorInput","isVisible","isValid","modifier","placeholder","slideDirection","taskNameLength","onTaskNameChange","onMinutesChange","onSecondsChange","alertFlag","creatorInputClass","textInputClass","timeInputsClass","minutesInputClass","secondsInputClass","Creator","componentWillUnmount","timeoutOutroId","handleTaskName","creatorTaskName","isTaskNameValid","addNewTask","onBoardStateChange","onTaskEdit","newTask","taskName","creatorTaskMinutes","creatorTaskSeconds","creatorBreakMinutes","creatorBreakSeconds","creatorTotalTaskTime","creatorTotalBreakTime","creatorTaskTimeArray","creatorBreakTimeArray","now","isCreatorVisible","newTime","handleBackButton","isTaskTimeVisible","isBreakTimeVisible","isTaskNameVisible","handleNextButton","isCreatorValid","isCreatorRotatingOut","handleCreatorClose","isNextButtonVisible","creatorClass","backButtonClass","nextButtonClass","progressBarLoadedStyle","EditableText","output","isMaximized","onEditModeChange","editableTextClass","textClass","inputContainerClass","progressClass","EditableTime","unit","onTimeChange","timeClass","Spinners","handleValueChange","operation","newValue","lowerLimit","upperLimit","getNumFromRange","spinnersClass","TotalTime","labelName","isCardEditMode","onKeyPress","totalTimeClass","displayClass","onKeyDown","CardButtons","editModeActive","inputInvalid","cardRotatingMode","onAcceptButtonClick","onRemoveButtonClick","onTaskStateChange","onDrag","cardButtonsClass","acceptButtonClass","isPlaceholderVisible","onMouseDown","StopAlert","isStopAlertVisible","onStopCancel","onStopConfirm","stopAlertClass","containerClass","TimeDisplay","elapsedTimeArray","remainingTimeArray","isElapsedMode","elapsedTimeResult","remainingTimeResult","elapsedTimeClass","remainingTimeClass","Countdown","isCountdownVisible","totalBreaks","countdownClass","Progress","elapsedPercent","remainingPercent","elapsedPercentClass","remainingPercentClass","loadingClass","unloadingClass","roundedElapsedPercent","round","roundedRemainingPercent","loadingWidth","unloadingWidth","Controls","handlePlayPauseButton","isTaskTimeActive","isBreakTimeActive","onTimerStateChange","onCardStateChange","previousTime","onStopButtonClick","onDisplayModeChange","svgPlayClass","svgPauseClass","playPauseButtonClass","stopButtonClass","toggleButtonClass","Finish","isTaskFinished","onTaskRemove","onTimerRestart","elapsedBreakTimeArray","overallTime","overallTimeArray","breaksAmount","breakPercent","overallTimeResult","breakTimeResult","finishClass","Timer","handleRotatingStatus","isTaskRotatingIn","isTaskRotatingOut","cardFlipTime","handleTimerStop","isTimerStarted","isTimerMounted","handleTimeDisplayMode","handleAlertVisibility","handleTimeTick","elapsedTaskTime","onTaskFinish","remainingTime","totalTimeArray","startTime","isTimerVisible","isTaskTimeElapsedMode","isBreakTimeElapsedMode","isBreakFinished","elapsedTaskPercent","elapsedTaskTimeArray","elapsedBreakPercent","remainingTaskTime","remainingTaskPercent","remainingTaskTimeArray","remainingBreakTime","remainingBreakPercent","remainingBreakTimeArray","taskIntervalId","breakIntervalId","timerClass","Card","isTaskMounted","getHoveredCardSizes","cardIndex","cardsSizes","handleCardsSizes","appNodes","card","current","parentNode","children","filter","node","classList","contains","offsetHeight","offsetLeft","offsetTop","offsetWidth","left","top","handleCardDrag","handleMouseDown","clientX","clientY","window","addEventListener","handleMouseMove","handleMouseUp","originalX","scrollX","originalY","scrollY","xPosition","yPosition","draggedCardSizes","hoveredCardIndex","findIndex","hoveredCardSizes","translateX","translateY","isDragging","hoveredOffsetX","hoveredOffsetY","isDraggingMode","draggedCardIndex","removeEventListener","onTaskOrderChange","offsetX","offsetY","draggedOffsetX","draggedOffsetY","handleKeyPress","isTaskNameEditMode","isTaskTimeEditMode","isBreakTimeEditMode","acceptEditChange","handleMaximizeCard","handleTaskNameChange","handleEditMode","task","handleTaskRemove","handleStartButton","React","createRef","transitionTime","taskNameDisabled","taskTimeDisabled","breakTimeDisabled","cardStyle","cardClass","taskClass","startButtonClass","ref","CardPlaceholder","placeholderIndex","placeholderStyle","placeholderClass","Board","handleWindowResize","handleSidebar","handleSidebarQuit","handleNewTaskButton","boardClass","newTaskButtonClass","creatorContainerClass","boardLogoClass","Logo","App","localStorage","getItem","taskTimerUsers","JSON","parse","isAppLoaded","initialUsers","day","month","year","hr","min","userId","getTime","taskMin","taskSec","breakMin","breakSec","formattedAvgTaskTime","formattedAvgBreakTime","exportUsers","componentDidUpdate","setItem","stringify","handleUserLogin","form","entries","isUserPanelVisible","isBoardVisible","handleUserLogout","handleUserRemove","handleTaskOrder","dragIndex","dropIndex","updatedTasks","splice","handleUserUpdate","prop","handleTaskFinish","results","updatedFinishedTasks","updatedTotalTaskTime","updatedTotalBreakTime","handleTaskEdit","option","editedIndex","indexOf","idx","StrictMode","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d66e22bd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icons.5e951e40.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.84c2435d.svg\";","import React, { Component } from 'react';\r\nimport classNames from 'classnames';\r\nimport '../scss/Intro.scss';\r\n\r\nclass Intro extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      totalTime: 5000,\r\n      timeInterval: 10,\r\n      maxDistance: 4,\r\n      elapsedDistance: 0,\r\n      elapsedAngle: 120,\r\n      elapsedTime: 0,\r\n      xTranslation: 0,\r\n      yTranslation: 0,\r\n      isIntroFadingOut: false\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { timeInterval } = this.state;\r\n    this.intervalId = setInterval(this.handleShadowPostion, timeInterval);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.intervalId);\r\n    clearTimeout(this.timeoutId);\r\n  }\r\n\r\n  handleShadowPostion = () => {\r\n    if (this.props.isIntroVisible) {\r\n      const {\r\n        totalTime,\r\n        timeInterval,\r\n        elapsedTime,\r\n        maxDistance,\r\n        elapsedDistance,\r\n        elapsedAngle\r\n      } = this.state;\r\n\r\n      const totalIntervals = totalTime / timeInterval;\r\n      const distanceIncrement = maxDistance / totalIntervals;\r\n      const factor = 3;\r\n      const easeOut = factor / Math.pow(factor, 2 * (elapsedTime / totalTime));\r\n      const angleIncrement = 360 / totalIntervals * easeOut;\r\n\r\n      const radians = elapsedAngle * (Math.PI / 180);\r\n      const x = Math.sin(radians) * (elapsedDistance);\r\n      const y = Math.cos(radians) * (elapsedDistance);\r\n\r\n      this.setState(prevState => ({\r\n        elapsedTime: elapsedTime + timeInterval,\r\n        elapsedDistance: prevState.elapsedDistance + distanceIncrement,\r\n        elapsedAngle: prevState.elapsedAngle - angleIncrement,\r\n        xTranslation: x,\r\n        yTranslation: y\r\n      }));\r\n\r\n      if ( this.state.elapsedTime >= this.state.totalTime ) {\r\n        const { onAppStateChange } = this.props;\r\n        \r\n        this.setState({ isIntroFadingOut: true });\r\n        clearInterval(this.intervalId);\r\n        this.timeoutId = setTimeout(() => {\r\n          onAppStateChange({ isIntroVisible: false });\r\n        }, 1000);\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { isIntroFadingOut, xTranslation, yTranslation } = this.state;\r\n\r\n    const introClass = classNames(\"Intro\", {\r\n      \"Intro--visible\": !isIntroFadingOut\r\n    });\r\n\r\n    const styleObject = {\r\n      transform: `\r\n        translate(${xTranslation}%, ${yTranslation}%)\r\n        rotate(0.01deg)\r\n      `\r\n    };\r\n\r\n    return (\r\n      <div className={introClass}>\r\n        <svg className=\"logo\" viewBox=\"0 0 600 600\">\r\n          {/* MASK */}\r\n          <mask id=\"mask\" className=\"logo__mask\">\r\n            <rect width=\"600\" height=\"600\" fill=\"#fff\"/>\r\n            <rect\r\n              x=\"200\"\r\n              y=\"50\"\r\n              width=\"200\"\r\n              height=\"35\"\r\n              rx=\"17.5\"\r\n              ry=\"17.5\"\r\n              fill=\"#000\"\r\n            />\r\n            <circle cx=\"300\" cy=\"300\" r=\"180\" fill=\"#000\"/>\r\n            <circle cx=\"300\" cy=\"300\" r=\"145\" fill=\"#fff\"/>\r\n            <rect\r\n              x=\"282.5\"\r\n              y=\"282.5\"\r\n              width=\"35\"\r\n              height=\"125\"\r\n              rx=\"17.5\"\r\n              ry=\"17.5\"\r\n              fill=\"#000\"\r\n              className=\"logo__clockHand\"\r\n            />\r\n          </mask>\r\n          {/* ELEMENTS */}\r\n          <rect width=\"600\" height=\"600\" className=\"logo__background\"/>\r\n          <rect\r\n            x=\"199\"\r\n            y=\"49\"\r\n            width=\"202\"\r\n            height=\"37\"\r\n            className=\"logo__letter logo__letter--top\"\r\n          />\r\n          <circle\r\n            cx=\"300\"\r\n            cy=\"300\"\r\n            r=\"140\"\r\n            className=\"logo__letter logo__letter--circle\"\r\n          />\r\n          <rect\r\n            width=\"600\"\r\n            height=\"600\"\r\n            className=\"logo__shadow\"\r\n            mask=\"url(#mask)\"\r\n            style={styleObject}\r\n          />\r\n          <rect\r\n            width=\"600\"\r\n            height=\"600\"\r\n            className=\"logo__foreground\"\r\n            mask=\"url(#mask)\"\r\n          />\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Intro;","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport icons from '../assets/svg/icons.svg';\r\nimport '../scss/UserInput.scss';\r\n\r\nconst UserInput = (props) => {\r\n  \r\n  const {\r\n    inputId,\r\n    inputName,\r\n    parentName,\r\n    value,\r\n    label,\r\n    isInputValid,\r\n    isAlertVisible,\r\n    alertText,\r\n    isDisabled,\r\n    isPreviewMode,\r\n    onPreviewModeChange,\r\n    onInputBlur,\r\n    onInputChange\r\n  } = props;\r\n\r\n  const handleInputBlur = (value) => {\r\n    if (!isInputValid) onInputBlur(value, inputName);\r\n  }\r\n\r\n  // #region [ Horizon ] CLASS NAMES\r\n\r\n  const userInputClass = `\r\n    UserInput UserInput--${parentName} UserInput--${inputName}\r\n  `;\r\n\r\n  const labelClass = classNames(\r\n    'UserInput__label',\r\n    `UserInput__label--${parentName}`, {\r\n    'UserInput__label--disabled': isDisabled\r\n  });\r\n\r\n  const inputClass = classNames(\r\n    'UserInput__input',\r\n    `UserInput__input--${parentName}`, {\r\n    'UserInput__input--disabled': isDisabled\r\n  });\r\n\r\n  const inputType = inputName === 'login'\r\n  ? 'text'\r\n  : isPreviewMode ? 'text' : 'password'\r\n\r\n  const alertBoxClass = classNames(\r\n    'UserInput__alertBox',\r\n    `UserInput__alertBox--${parentName}`, {\r\n    'UserInput__alertBox--visible': isAlertVisible\r\n  });\r\n\r\n  const passedClass = classNames(\r\n    'inputPassed',\r\n    `inputPassed--${parentName}`, {\r\n    'inputPassed--visible': isInputValid\r\n  });\r\n\r\n  const previewClass = classNames(\r\n    'previewPassword',\r\n    `previewPassword--${parentName}`, {\r\n    'previewPassword--active': isPreviewMode,\r\n    'previewPassword--disabled': isDisabled\r\n  });\r\n\r\n  // #endregion\r\n  \r\n  return (\r\n    <div className={userInputClass}>\r\n      {/* LABEL */}\r\n      <label htmlFor={inputId} className={labelClass}>\r\n        {label}\r\n      </label>\r\n\r\n      {/* INPUT */}\r\n      <input\r\n        id={inputId}\r\n        name={inputId}\r\n        value={value}\r\n        type={inputType}\r\n        className={inputClass}\r\n        spellCheck=\"false\"\r\n        maxLength=\"20\"\r\n        disabled={isDisabled}\r\n        onBlur={(e) => handleInputBlur(e.target.value)}\r\n        onChange={(e) => onInputChange(e.target.value)}\r\n      />\r\n\r\n      {/* ALERT */}\r\n      <div className={alertBoxClass}>\r\n        <p className=\"UserInput__alert\">{alertText}</p>\r\n      </div>\r\n\r\n      {/* INDICATORS */}\r\n      <div className=\"UserInput__icons\">\r\n        {/* PREVIEW PASSWORD */}\r\n        {\r\n        inputName === 'login'\r\n        ? <div className=\"empty\"></div>\r\n        : <button\r\n            type=\"button\"\r\n            className={previewClass}\r\n            onClick={() => onPreviewModeChange(inputName)}\r\n          >\r\n            <svg className=\"previewPassword__svg\" viewBox=\"0 0 100 100\">\r\n              <use href={`${icons}#preview`} />\r\n            </svg>\r\n          </button>\r\n        }\r\n        {/* INPUT CORRECT BADGE */}\r\n        {\r\n        (parentName === 'loginForm' && inputName === 'password') ||\r\n        (parentName === 'userEdit' && inputName === 'oldPassword')\r\n        ? <div className=\"empty\"></div>\r\n        : <div className={passedClass}>\r\n            <svg className=\"inputPassed__svg\" viewBox=\"0 0 100 100\">\r\n              <use href={`${icons}#passed`} />\r\n            </svg>\r\n          </div>\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default UserInput;","export const cardFlipTime = 200;\r\nexport const maxTaskNameLength = 80;\r\n\r\nexport const animationStyle = {\r\n  animationDuration: `${cardFlipTime}ms`\r\n}","import { maxTaskNameLength } from './globalVariables';\r\n\r\nexport const validateTaskName = (name) => name.length > 0 ? true : false;\r\nexport const validateTaskTime = (time, total) => /^\\d*$/.test(time) && total > 0;\r\nexport const validateBreakTime = (time) => /^\\d*$/.test(time);\r\n\r\nexport const getCapitalized = (string) => {\r\n  return string.charAt(0).toUpperCase() + string.substring(1);\r\n}\r\n\r\nconst getTotalTime = (minutes, seconds) => {\r\n  minutes = !minutes ? 0 : parseInt(minutes);\r\n  seconds = !seconds ? 0 : parseInt(seconds);\r\n  return (minutes * 60000) + (seconds * 1000);\r\n}\r\n\r\nexport const makeTwoDigits = (value) => value < 10 ? `0${value}` : `${value}`;\r\n\r\n\r\nexport const getNumFromRange = (value, operation, lowerLimit, upperLimit) => {\r\n  const newValue = operation === \"increase\"\r\n  ? parseInt(value) + 1 : parseInt(value) - 1;\r\n\r\n  return newValue >= lowerLimit && newValue <= upperLimit\r\n  ? makeTwoDigits(newValue)\r\n  : newValue < lowerLimit\r\n    ? makeTwoDigits(lowerLimit)\r\n    : makeTwoDigits(upperLimit);\r\n}\r\n\r\nexport const getTimeArray = (time) => {\r\n  return [\r\n    makeTwoDigits(Math.floor(time / 60000)),\r\n    makeTwoDigits(Math.floor(time / 1000 % 60)),\r\n    makeTwoDigits(Math.floor(time / 10 % 100))\r\n  ]\r\n}\r\n\r\nexport const handleTimeChange = (minutes, seconds, units, type) => {\r\n  \r\n  if (type === 'task') {\r\n    const totalTaskTime = getTotalTime(minutes, seconds);\r\n    if (units === 'minutes') {\r\n      return {\r\n        taskMinutes: minutes,\r\n        totalTaskTime,\r\n        totalTaskTimeArray: getTimeArray(totalTaskTime),\r\n        isTaskTimeValid: validateTaskTime(minutes, totalTaskTime)\r\n      };\r\n    } else if (units === 'seconds') {\r\n      return {\r\n        taskSeconds: seconds,\r\n        totalTaskTime,\r\n        totalTaskTimeArray: getTimeArray(totalTaskTime),\r\n        isTaskTimeValid: validateTaskTime(seconds, totalTaskTime)\r\n      };\r\n    }\r\n  } else if (type === 'break') {\r\n    const totalBreakTime = getTotalTime(minutes, seconds);\r\n    if (units === 'minutes') {\r\n      return {\r\n        breakMinutes: minutes,\r\n        totalBreakTime,\r\n        totalBreakTimeArray: getTimeArray(totalBreakTime),\r\n        isBreakTimeValid: validateBreakTime(minutes)\r\n      };\r\n    } else if (units === 'seconds') {\r\n      return {\r\n        breakSeconds: seconds,\r\n        totalBreakTime,\r\n        totalBreakTimeArray: getTimeArray(totalBreakTime),\r\n        isBreakTimeValid: validateBreakTime(seconds)\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport const formatTimeResult = ([minutes, seconds], elapsedBreakTime) => {\r\n  minutes = parseInt(minutes);\r\n  seconds = parseInt(seconds);\r\n  return `\r\n    ${ minutes > 1\r\n    ? ` ${minutes} minutes` : minutes === 1\r\n    ? ` ${minutes} minute` : \"\" }\r\n    ${ minutes > 0 && (elapsedBreakTime ? elapsedBreakTime !== 0 : seconds !== 0)\r\n    ? \"and\" : \"\" }\r\n    ${ seconds > 1\r\n    ? ` ${seconds} seconds` : seconds === 1\r\n    ? ` ${seconds} second` : elapsedBreakTime && elapsedBreakTime !== 0\r\n    ? \" a split second\" : \"\" }\r\n  `;\r\n}\r\n\r\nexport const taskNameProgressStyle = (length) => {\r\n  return { width: `${length / maxTaskNameLength * 100}%` };\r\n};\r\n\r\nexport const breaksAmount = (totalBreaks) => `${totalBreaks}\r\n${totalBreaks === 1 ? \"break\" : \"breaks\"} used\r\n`;\r\n\r\nexport const getTotalDays = (date) => {\r\n  \r\n  const getDateString = (date) => new Date(date).toISOString().slice(0,10);\r\n  \r\n  const currentDate = new Date();\r\n  let currentDateStr = getDateString(currentDate);\r\n  const startDateStr = getDateString(date);\r\n  let totalDays = 1;\r\n  let limit = 200;\r\n\r\n  while (startDateStr !== currentDateStr && limit > 0) {\r\n    currentDate.setDate(currentDate.getDate() - 1);\r\n    currentDateStr = getDateString(new Date(currentDate));\r\n    totalDays++;\r\n    limit--;\r\n  }\r\n  return totalDays;\r\n}","export class User {\r\n  constructor(date) {\r\n    this.login = \"\";\r\n    this.password = null;\r\n    this.rememberMe = false;\r\n    this.createdAt = date;\r\n    this.tasks = [];\r\n    this.stats = {\r\n      finishedTasks: 0,\r\n      avgTaskTime: \"finish some task first\",\r\n      avgBreakTime: \"no breaks so far\",\r\n      avgTasksPerDay: 0,\r\n      dateCreated: this.getCreationDate(date),\r\n      totalTaskTime: 0,\r\n      totalBreakTime: 0,\r\n    };\r\n  }\r\n\r\n  getCreationDate(date) {\r\n    const dateTime = date\r\n      .toISOString()\r\n      .slice(0, 10)\r\n      .split(\"-\")\r\n      .reverse()\r\n      .join(\"-\");\r\n    const hourTime = date.toISOString().slice(11, 16);\r\n    return `${dateTime} ${hourTime}`;\r\n  }\r\n}\r\n","import React, {Component} from \"react\";\r\nimport classNames from \"classnames\";\r\nimport UserInput from \"./UserInput\";\r\nimport icons from \"../assets/svg/icons.svg\";\r\nimport {getCapitalized} from \"../lib/handlers.js\";\r\nimport {User} from \"../lib/classes.js\";\r\nimport \"../scss/UserForm.scss\";\r\n\r\nclass UserForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      rememberMe: false,\r\n      // login\r\n      login: \"\",\r\n      isLoginValid: false,\r\n      isLoginAlertVisible: false,\r\n      loginAlertText: \"Please enter your login\",\r\n      // password\r\n      password: \"\",\r\n      isPasswordValid: false,\r\n      isPasswordAlertVisible: false,\r\n      passwordAlertText: \"Please enter your password\",\r\n      isPasswordPreviewMode: false,\r\n      // password confirm\r\n      confirm: \"\",\r\n      isConfirmValid: false,\r\n      isConfirmAlertVisible: false,\r\n      confirmAlertText: \"Please confirm your password\",\r\n      isConfirmPreviewMode: false,\r\n      isConfirmDisabled: true,\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    const {block, users} = this.props;\r\n    const rememberedUser = Object.values(users).find((user) => user.rememberMe);\r\n\r\n    if (block === \"loginForm\") {\r\n      if (rememberedUser) {\r\n        const {login, password} = rememberedUser;\r\n\r\n        this.setState({\r\n          login,\r\n          isLoginValid: true,\r\n          password,\r\n          isPasswordValid: true,\r\n          rememberMe: true,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  handleCardToggle = () => {\r\n    const {onCardToggle} = this.props;\r\n    onCardToggle();\r\n    this.handleFormReset();\r\n  };\r\n\r\n  handleAlert = (value, input) => {\r\n    const inputName = getCapitalized(input);\r\n    const alertText = this.getInputAlert(value, input);\r\n\r\n    this.setState({\r\n      [`is${inputName}AlertVisible`]: true,\r\n      [`${input}AlertText`]: alertText,\r\n    });\r\n  };\r\n\r\n  getInputAlert = (value, input) => {\r\n    const {password} = this.state;\r\n    const isEmpty = value === \"\";\r\n    const doesContainWhiteSpaces = /\\s/g.test(value);\r\n    const isPasswordTooShort = value.length < 6;\r\n\r\n    switch (input) {\r\n      case \"login\":\r\n        const {block, users} = this.props;\r\n\r\n        const doesLoginExist = Object.values(users)\r\n          .map((user) => user.login)\r\n          .find((login) => login === value);\r\n\r\n        const isLoginIncorrect = block === \"loginForm\" && !doesLoginExist;\r\n        const isNewLoginIncorrect =\r\n          (block === \"signupForm\" || block === \"userEdit\") && doesLoginExist;\r\n\r\n        return isEmpty\r\n          ? \"Please enter your login\"\r\n          : isLoginIncorrect\r\n          ? \"There is no user with this login\"\r\n          : isNewLoginIncorrect\r\n          ? \"This login already exist. Try another one\"\r\n          : false;\r\n\r\n      case \"password\":\r\n        return isEmpty\r\n          ? \"Please enter your password\"\r\n          : doesContainWhiteSpaces\r\n          ? \"Password cannot contain any spaces\"\r\n          : isPasswordTooShort\r\n          ? \"Password should have at least 6 characters\"\r\n          : false;\r\n\r\n      case \"confirm\":\r\n        const doPasswordsMatch = password === value;\r\n\r\n        return isEmpty\r\n          ? \"Please confirm your password\"\r\n          : !doPasswordsMatch\r\n          ? \"Passwords do not match!\"\r\n          : false;\r\n\r\n      default:\r\n        return false;\r\n    }\r\n  };\r\n\r\n  handleLoginValidation = (value) => {\r\n    const isInvalid = this.getInputAlert(value, \"login\") ? true : false;\r\n\r\n    this.setState({\r\n      login: value,\r\n      isLoginValid: !isInvalid,\r\n      isLoginAlertVisible: false,\r\n    });\r\n  };\r\n\r\n  handlePasswordValidation = (value) => {\r\n    const isInvalid = this.getInputAlert(value, \"password\") ? true : false;\r\n\r\n    this.setState({\r\n      password: value,\r\n      isPasswordValid: !isInvalid,\r\n      isPasswordAlertVisible: false,\r\n      isPasswordPreviewed: false,\r\n\r\n      confirm: \"\",\r\n      isConfirmValid: false,\r\n      isConfirmAlertVisible: false,\r\n      isConfirmPreviewMode: false,\r\n      isConfirmDisabled: isInvalid,\r\n    });\r\n  };\r\n\r\n  handleConfirmValidation = (value) => {\r\n    const isInvalid = this.getInputAlert(value, \"confirm\") ? true : false;\r\n\r\n    this.setState({\r\n      confirm: value,\r\n      isConfirmValid: !isInvalid,\r\n      isConfirmAlertVisible: false,\r\n      isConfirmPreviewed: false,\r\n    });\r\n  };\r\n\r\n  handlePasswordPreview = (input) => {\r\n    const inputName = getCapitalized(input);\r\n\r\n    this.setState((prevState) => ({\r\n      [`is${inputName}PreviewMode`]: !prevState[`is${inputName}PreviewMode`],\r\n    }));\r\n  };\r\n\r\n  handleRememberMe = () => {\r\n    this.setState((prevState) => ({rememberMe: !prevState.rememberMe}));\r\n  };\r\n\r\n  handleFormReset = () => {\r\n    this.setState({\r\n      rememberMe: false,\r\n      login: \"\",\r\n      isLoginValid: false,\r\n      isLoginAlertVisible: false,\r\n      password: \"\",\r\n      isPasswordValid: false,\r\n      isPasswordAlertVisible: false,\r\n      isPasswordPreviewMode: false,\r\n      confirm: \"\",\r\n      isConfirmValid: false,\r\n      isConfirmAlertVisible: false,\r\n      isConfirmPreviewMode: false,\r\n      isConfirmDisabled: true,\r\n    });\r\n  };\r\n\r\n  handleFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    const {block, users, onUserLogin} = this.props;\r\n    const {\r\n      login,\r\n      password,\r\n      isLoginValid,\r\n      isPasswordValid,\r\n      isConfirmValid,\r\n      rememberMe,\r\n    } = this.state;\r\n\r\n    const user = Object.values(users).find((user) => user.login === login);\r\n\r\n    const isLoginPasswordCorrect =\r\n      block === \"loginForm\" && isLoginValid && user.password === password;\r\n\r\n    if (block === \"loginForm\") {\r\n      if (isLoginPasswordCorrect) {\r\n        user.rememberMe = rememberMe;\r\n        onUserLogin(user, block);\r\n        this.handleFormReset();\r\n      } else {\r\n        this.setState({\r\n          password: \"\",\r\n          isPasswordValid: false,\r\n          isPasswordAlertVisible: true,\r\n          passwordAlertText: \"Password is wrong!\",\r\n          isPasswordPreviewMode: false,\r\n        });\r\n      }\r\n    } else if (block === \"signupForm\") {\r\n      if (isLoginValid && isPasswordValid && isConfirmValid) {\r\n        const date = new Date();\r\n        const newUser = new User(date);\r\n        newUser.login = login;\r\n        newUser.password = password;\r\n        newUser.rememberMe = rememberMe;\r\n\r\n        onUserLogin(newUser, block);\r\n        this.handleFormReset();\r\n      } else return;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {className, block} = this.props;\r\n\r\n    const {\r\n      rememberMe,\r\n      login,\r\n      isLoginValid,\r\n      isLoginAlertVisible,\r\n      loginAlertText,\r\n      password,\r\n      isPasswordValid,\r\n      isPasswordAlertVisible,\r\n      passwordAlertText,\r\n      isPasswordPreviewMode,\r\n      confirm,\r\n      isConfirmValid,\r\n      isConfirmAlertVisible,\r\n      confirmAlertText,\r\n      isConfirmPreviewMode,\r\n      isConfirmDisabled,\r\n    } = this.state;\r\n\r\n    const isLoginForm = block === \"loginForm\";\r\n    const title = isLoginForm ? \"Log In\" : \"Sign Up\";\r\n    const loginButtonName = isLoginForm ? \"Log In\" : \"Cancel\";\r\n    const loginButtonType = isLoginForm ? \"submit\" : \"button\";\r\n    const submitButtonType = isLoginForm ? \"button\" : \"submit\";\r\n    const onLoginButtonClick = isLoginForm ? undefined : this.handleCardToggle;\r\n    const onSignupButtonClick = isLoginForm ? this.handleCardToggle : undefined;\r\n\r\n    const checkboxClass = classNames(\r\n      \"remember__checkbox\",\r\n      `remember__checkbox--${block}`,\r\n      {\r\n        \"remember__checkbox--visible\": rememberMe,\r\n      }\r\n    );\r\n\r\n    return (\r\n      <form className={className} onSubmit={this.handleFormSubmit}>\r\n        <h2 className={`${block}__heading`}>{title}</h2>\r\n\r\n        {/* LOGIN */}\r\n        <UserInput\r\n          inputId={`${block}Login`}\r\n          inputName=\"login\"\r\n          parentName={block}\r\n          value={login}\r\n          label=\"Login:\"\r\n          isInputValid={isLoginValid}\r\n          isAlertVisible={isLoginAlertVisible}\r\n          alertText={loginAlertText}\r\n          onInputBlur={this.handleAlert}\r\n          onInputChange={this.handleLoginValidation}\r\n        />\r\n\r\n        {/* PASSWORD */}\r\n        <UserInput\r\n          inputId={`${block}Password`}\r\n          inputName=\"password\"\r\n          parentName={block}\r\n          value={password}\r\n          label=\"Password:\"\r\n          isInputValid={isPasswordValid}\r\n          isAlertVisible={isPasswordAlertVisible}\r\n          alertText={passwordAlertText}\r\n          isPreviewMode={isPasswordPreviewMode}\r\n          onPreviewModeChange={this.handlePasswordPreview}\r\n          onInputBlur={this.handleAlert}\r\n          onInputChange={this.handlePasswordValidation}\r\n        />\r\n\r\n        {\r\n          /* PASSWORD CONFIRM */\r\n          isLoginForm ? (\r\n            <div className=\"empty\"></div>\r\n          ) : (\r\n            <UserInput\r\n              inputId={`${block}Confirm`}\r\n              inputName=\"confirm\"\r\n              parentName={block}\r\n              value={confirm}\r\n              label=\"Confirm:\"\r\n              isInputValid={isConfirmValid}\r\n              isAlertVisible={isConfirmAlertVisible}\r\n              alertText={confirmAlertText}\r\n              isDisabled={isConfirmDisabled}\r\n              isPreviewMode={isConfirmPreviewMode}\r\n              onPreviewModeChange={this.handlePasswordPreview}\r\n              onInputBlur={this.handleAlert}\r\n              onInputChange={this.handleConfirmValidation}\r\n            />\r\n          )\r\n        }\r\n\r\n        {/* REMEMBER ME */}\r\n        <div className=\"remember\">\r\n          <div\r\n            className={`remember__field remember__field--${block}`}\r\n            onClick={this.handleRememberMe}>\r\n            <svg className={checkboxClass}>\r\n              <use href={`${icons}#check`}></use>\r\n            </svg>\r\n          </div>\r\n          <input\r\n            id={`${block}Remember`}\r\n            name={`${block}Remember`}\r\n            className={`remember__input remember__input--${block}`}\r\n            type=\"checkbox\"\r\n          />\r\n          <label\r\n            htmlFor={`${block}Remember`}\r\n            className={`remember__label remember__label--${block}`}\r\n            onClick={this.handleRememberMe}>\r\n            Remember Me\r\n          </label>\r\n        </div>\r\n\r\n        {/* BUTTONS */}\r\n        <button\r\n          className={`${block}__button ${block}__button--login`}\r\n          onClick={onLoginButtonClick}\r\n          type={loginButtonType}>\r\n          {loginButtonName}\r\n        </button>\r\n        <button\r\n          className={`${block}__button ${block}__button--signup`}\r\n          onClick={onSignupButtonClick}\r\n          type={submitButtonType}>\r\n          Sign Up\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\nexport default UserForm;\r\n","import React, {Component} from \"react\";\r\nimport classNames from \"classnames\";\r\nimport UserForm from \"./UserForm\";\r\nimport \"../scss/UserPanel.scss\";\r\n\r\nclass UserPanel extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isUserPanelLoaded: false,\r\n      isLoginFormVisible: false,\r\n      isSignupFormVisible: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      isUserPanelLoaded: true,\r\n      isLoginFormVisible: true,\r\n    });\r\n  }\r\n\r\n  handleCardToggle = () => {\r\n    this.setState((prevState) => ({\r\n      isLoginFormVisible: !prevState.isLoginFormVisible,\r\n      isSignupFormVisible: !prevState.isSignupFormVisible,\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    const {onUserLogin, users} = this.props;\r\n    const {\r\n      isUserPanelLoaded,\r\n      isLoginFormVisible,\r\n      isSignupFormVisible,\r\n    } = this.state;\r\n\r\n    const userPanelClass = classNames(\"UserPanel\", {\r\n      \"UserPanel--visible\": isUserPanelLoaded,\r\n    });\r\n\r\n    const loginClass = classNames(\"loginForm\", {\r\n      \"loginForm--rotateIn\": isLoginFormVisible,\r\n      \"loginForm--rotateOut\": !isLoginFormVisible,\r\n    });\r\n\r\n    const signupClass = classNames(\"signupForm\", {\r\n      \"signupForm--rotateIn\": isSignupFormVisible,\r\n      \"signupForm--rotateOut\": !isSignupFormVisible,\r\n    });\r\n\r\n    return (\r\n      <div className={userPanelClass}>\r\n        <p className=\"UserPanel__logo\">\r\n          task<span className=\"UserPanel__logo--color\">Timer</span>\r\n        </p>\r\n        <div className=\"UserPanel__container\">\r\n          {/* LOGIN FORM */}\r\n          <UserForm\r\n            className={loginClass}\r\n            block=\"loginForm\"\r\n            onUserLogin={onUserLogin}\r\n            users={users}\r\n            onCardToggle={this.handleCardToggle}\r\n          />\r\n          {/* SIGNUP FORM */}\r\n          <UserForm\r\n            className={signupClass}\r\n            block=\"signupForm\"\r\n            onUserLogin={onUserLogin}\r\n            users={users}\r\n            onCardToggle={this.handleCardToggle}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default UserPanel;\r\n","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport UserInput from './UserInput';\r\nimport '../scss/UserEdit.scss';\r\n\r\nconst UserEdit = (props) => {\r\n\r\n  const {\r\n    parentName,\r\n    isEditMode,\r\n    editedSetting,\r\n    onPreviewModeChange,\r\n    onInputBlur,\r\n    handleLoginValidation,\r\n    handleOldPasswordValidation,\r\n    handleNewPasswordValidation,\r\n    handleConfirmValidation,\r\n\r\n    state: {\r\n      login,\r\n      isLoginValid,\r\n      isLoginAlertVisible,\r\n      loginAlertText,\r\n      oldPassword,\r\n      isOldPasswordValid,\r\n      isOldPasswordAlertVisible,\r\n      oldPasswordAlertText,\r\n      isOldPasswordPreviewMode,\r\n      newPassword,\r\n      isNewPasswordValid,\r\n      isNewPasswordAlertVisible,\r\n      newPasswordAlertText,\r\n      isNewPasswordPreviewMode,\r\n      confirm,\r\n      isConfirmValid,\r\n      isConfirmAlertVisible,\r\n      confirmAlertText,\r\n      isConfirmPreviewMode,\r\n      isConfirmDisabled\r\n    }\r\n  } = props;\r\n\r\n  const userEditClass = classNames('UserEdit', {\r\n    'UserEdit--hidden': !isEditMode,\r\n    [`UserEdit--${editedSetting}`]: isEditMode\r\n  })\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {\r\n      editedSetting === 'login' ?\r\n      /* USER LOGIN EDIT */\r\n      <div className={userEditClass}>\r\n        <UserInput\r\n          inputId={`${parentName}Login`}\r\n          inputName=\"login\"\r\n          parentName={parentName}\r\n          value={login}\r\n          label=\"New Login:\"\r\n          isInputValid={isLoginValid}\r\n          isAlertVisible={isLoginAlertVisible}\r\n          alertText={loginAlertText}\r\n          onInputBlur={onInputBlur}\r\n          onInputChange={handleLoginValidation}\r\n        />\r\n      </div>\r\n\r\n      : editedSetting === 'password' ?\r\n      /* USER PASSWORD EDIT */\r\n      <div className={userEditClass}>\r\n        {/* OLD PASSWORD */}\r\n        <UserInput\r\n          inputId={`${parentName}OldPassword`}\r\n          inputName=\"oldPassword\"\r\n          parentName={parentName}\r\n          value={oldPassword}\r\n          label=\"Old Password:\"\r\n          isInputValid={isOldPasswordValid}\r\n          isAlertVisible={isOldPasswordAlertVisible}\r\n          alertText={oldPasswordAlertText}\r\n          isPreviewMode={isOldPasswordPreviewMode}\r\n          onPreviewModeChange={onPreviewModeChange}\r\n          onInputBlur={onInputBlur}\r\n          onInputChange={handleOldPasswordValidation}\r\n        />\r\n        {/* NEW PASSWORD */}\r\n        <UserInput\r\n          inputId={`${parentName}NewPassword`}\r\n          inputName=\"newPassword\"\r\n          parentName={parentName}\r\n          value={newPassword}\r\n          label=\"New Password:\"\r\n          isInputValid={isNewPasswordValid}\r\n          isAlertVisible={isNewPasswordAlertVisible}\r\n          alertText={newPasswordAlertText}\r\n          isPreviewMode={isNewPasswordPreviewMode}\r\n          onPreviewModeChange={onPreviewModeChange}\r\n          onInputBlur={onInputBlur}\r\n          onInputChange={handleNewPasswordValidation}\r\n        />\r\n        {/* CONFIRM PASSWORD */}\r\n        <UserInput\r\n          inputId={`${parentName}Confirm`}\r\n          inputName=\"confirm\"\r\n          parentName={parentName}\r\n          value={confirm}\r\n          label=\"Confirm:\"\r\n          isInputValid={isConfirmValid}\r\n          isAlertVisible={isConfirmAlertVisible}\r\n          alertText={confirmAlertText}\r\n          isDisabled={isConfirmDisabled}\r\n          isPreviewMode={isConfirmPreviewMode}\r\n          onPreviewModeChange={onPreviewModeChange}\r\n          onInputBlur={onInputBlur}\r\n          onInputChange={handleConfirmValidation}\r\n        />\r\n      </div>\r\n\r\n      : editedSetting === 'logout' ?\r\n      /* USER LOGOUT CONFIRM */\r\n      <div className={userEditClass}>\r\n        <p className=\"UserEdit__text\">\r\n          Log out?\r\n        </p>\r\n      </div>\r\n\r\n      :\r\n      /* USER REMOVE CONFIRM */\r\n      <div className={userEditClass}>\r\n        <p className=\"UserEdit__text\">\r\n          Remove user?\r\n        </p>\r\n      </div>\r\n      }\r\n    </React.Fragment>\r\n  );\r\n}\r\nexport default UserEdit;","import React, {Component} from \"react\";\r\nimport classNames from \"classnames\";\r\nimport UserEdit from \"./UserEdit\";\r\nimport icons from \"../assets/svg/icons.svg\";\r\nimport {getCapitalized} from \"../lib/handlers.js\";\r\nimport \"../scss/Sidebar.scss\";\r\n\r\nclass Sidebar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isEditMode: false,\r\n      editedSetting: null,\r\n      // login\r\n      login: \"\",\r\n      isLoginValid: false,\r\n      isLoginAlertVisible: false,\r\n      loginAlertText: \"Please enter your login\",\r\n      // password\r\n      oldPassword: \"\",\r\n      isOldPasswordValid: false,\r\n      isOldPasswordAlertVisible: false,\r\n      oldPasswordAlertText: \"Please enter your old password\",\r\n      isOldPasswordPreviewMode: false,\r\n      // new password\r\n      newPassword: \"\",\r\n      isNewPasswordValid: false,\r\n      isNewPasswordAlertVisible: false,\r\n      newPasswordAlertText: \"Please enter your new password\",\r\n      isNewPasswordPreviewMode: false,\r\n      // password confirm\r\n      confirm: \"\",\r\n      isConfirmValid: false,\r\n      isConfirmAlertVisible: false,\r\n      confirmAlertText: \"Please confirm your password\",\r\n      isConfirmPreviewMode: false,\r\n      isConfirmDisabled: true,\r\n    };\r\n  }\r\n\r\n  handleStateChange = (object) => this.setState(object);\r\n\r\n  handleAlert = (value, input) => {\r\n    const inputName = getCapitalized(input);\r\n    const alertText = this.getInputAlert(value, input);\r\n\r\n    this.setState({\r\n      [`is${inputName}AlertVisible`]: true,\r\n      [`${input}AlertText`]: alertText,\r\n    });\r\n  };\r\n\r\n  getInputAlert = (value, input) => {\r\n    const {newPassword} = this.state;\r\n    const isEmpty = value === \"\";\r\n    const doesContainWhiteSpaces = /\\s/g.test(value);\r\n    const isPasswordTooShort = value.length < 6;\r\n\r\n    switch (input) {\r\n      case \"login\":\r\n        const {block, users, loggedUserId} = this.props;\r\n        const {login} = users[loggedUserId];\r\n\r\n        const doesLoginExist = Object.values(users)\r\n          .map((user) => user.login)\r\n          .find((userLogin) => userLogin === value && userLogin !== login);\r\n\r\n        const isLoginIncorrect = block === \"loginForm\" && !doesLoginExist;\r\n        const isNewLoginIncorrect =\r\n          (block === \"signupForm\" || block === \"userEdit\") && doesLoginExist;\r\n\r\n        return isEmpty\r\n          ? \"Please enter your login\"\r\n          : isLoginIncorrect\r\n          ? \"There is no user with this login\"\r\n          : isNewLoginIncorrect\r\n          ? \"This login already exist. Try another one\"\r\n          : false;\r\n\r\n      case \"password\":\r\n      case \"oldPassword\":\r\n      case \"newPassword\":\r\n        return isEmpty\r\n          ? \"Please enter your password\"\r\n          : doesContainWhiteSpaces\r\n          ? \"Password cannot contain any spaces\"\r\n          : isPasswordTooShort\r\n          ? \"Password should have at least 6 characters\"\r\n          : false;\r\n\r\n      case \"confirm\":\r\n        const doPasswordsMatch = newPassword === value;\r\n\r\n        return isEmpty\r\n          ? \"Please confirm your password\"\r\n          : !doPasswordsMatch\r\n          ? \"Passwords do not match!\"\r\n          : false;\r\n\r\n      default:\r\n        return false;\r\n    }\r\n  };\r\n\r\n  handleLoginValidation = (value) => {\r\n    const isInvalid = this.getInputAlert(value, \"login\") ? true : false;\r\n\r\n    this.setState({\r\n      login: value,\r\n      isLoginValid: !isInvalid,\r\n      isLoginAlertVisible: false,\r\n    });\r\n  };\r\n\r\n  handleOldPasswordValidation = (value) => {\r\n    const isInvalid = this.getInputAlert(value, \"password\") ? true : false;\r\n\r\n    this.setState({\r\n      oldPassword: value,\r\n      isOldPasswordValid: !isInvalid,\r\n      isOldPasswordAlertVisible: false,\r\n      isOldPasswordPreviewed: false,\r\n    });\r\n  };\r\n\r\n  handleNewPasswordValidation = (value) => {\r\n    const isInvalid = this.getInputAlert(value, \"password\") ? true : false;\r\n\r\n    this.setState({\r\n      newPassword: value,\r\n      isNewPasswordValid: !isInvalid,\r\n      isNewPasswordAlertVisible: false,\r\n      isNewPasswordPreviewed: false,\r\n\r\n      confirm: \"\",\r\n      isConfirmValid: false,\r\n      isConfirmAlertVisible: false,\r\n      isConfirmPreviewMode: false,\r\n      isConfirmDisabled: isInvalid,\r\n    });\r\n  };\r\n\r\n  handleConfirmValidation = (value) => {\r\n    const isInvalid = this.getInputAlert(value, \"confirm\") ? true : false;\r\n\r\n    this.setState({\r\n      confirm: value,\r\n      isConfirmValid: !isInvalid,\r\n      isConfirmAlertVisible: false,\r\n      isConfirmPreviewed: false,\r\n    });\r\n  };\r\n\r\n  handlePasswordPreview = (input) => {\r\n    const inputName = getCapitalized(input);\r\n\r\n    this.setState((prevState) => ({\r\n      [`is${inputName}PreviewMode`]: !prevState[`is${inputName}PreviewMode`],\r\n    }));\r\n  };\r\n\r\n  handleUserEdit = (setting) => {\r\n    const {\r\n      onUserUpdate,\r\n      onUserLogout,\r\n      onUserRemove,\r\n      users,\r\n      loggedUserId,\r\n    } = this.props;\r\n\r\n    const {editedSetting, login, oldPassword, newPassword} = this.state;\r\n    const user = users[loggedUserId];\r\n\r\n    if (setting === \"confirm\") {\r\n      switch (editedSetting) {\r\n        case \"login\":\r\n          onUserUpdate(login, \"login\");\r\n          this.setState({isEditMode: false});\r\n          break;\r\n\r\n        case \"password\":\r\n          if (oldPassword !== user.password) {\r\n            this.handleInputsReset();\r\n            this.setState({\r\n              isOldPasswordAlertVisible: true,\r\n              oldPasswordAlertText: \"Password is wrong!\",\r\n            });\r\n          } else {\r\n            onUserUpdate(newPassword, \"password\");\r\n            this.setState({isEditMode: false});\r\n            this.handleInputsReset();\r\n          }\r\n          break;\r\n\r\n        case \"logout\":\r\n          onUserLogout();\r\n          break;\r\n        case \"remove\":\r\n          onUserRemove();\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    } else if (setting === \"cancel\") {\r\n      this.setState({isEditMode: false});\r\n      this.handleInputsReset();\r\n    } else {\r\n      this.setState({isEditMode: true, editedSetting: setting});\r\n    }\r\n  };\r\n\r\n  handleInputsReset = () => {\r\n    this.setState({\r\n      login: \"\",\r\n      isLoginValid: false,\r\n      isLoginAlertVisible: false,\r\n      loginAlertText: \"Please enter your login\",\r\n      oldPassword: \"\",\r\n      isOldPasswordValid: false,\r\n      isOldPasswordAlertVisible: false,\r\n      oldPasswordAlertText: \"Please enter your old password\",\r\n      isOldPasswordPreviewMode: false,\r\n      newPassword: \"\",\r\n      isNewPasswordValid: false,\r\n      isNewPasswordAlertVisible: false,\r\n      newPasswordAlertText: \"Please enter your new password\",\r\n      isNewPasswordPreviewMode: false,\r\n      confirm: \"\",\r\n      isConfirmValid: false,\r\n      isConfirmAlertVisible: false,\r\n      confirmAlertText: \"Please confirm your password\",\r\n      isConfirmPreviewMode: false,\r\n      isConfirmDisabled: true,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {block, isSidebarVisible, users, loggedUserId} = this.props;\r\n\r\n    const {\r\n      isEditMode,\r\n      editedSetting,\r\n      isLoginValid,\r\n      isOldPasswordValid,\r\n      isNewPasswordValid,\r\n      isConfirmValid,\r\n    } = this.state;\r\n\r\n    const {login, stats} = users[loggedUserId];\r\n\r\n    const userEditButtons = [\"login\", \"password\", \"logout\", \"remove\"];\r\n    const userEditLabels = [\r\n      \"Change your login\",\r\n      \"Change your password\",\r\n      \"Log out to main app\",\r\n      \"Remove your profile\",\r\n    ];\r\n    const userConfirmButtons = [\"confirm\", \"cancel\"];\r\n\r\n    const statsLabels = {\r\n      finishedTasks: \"Tasks finished:\",\r\n      avgTaskTime: \"Average task time:\",\r\n      avgBreakTime: \"Average break time:\",\r\n      avgTasksPerDay: \"Average tasks per day:\",\r\n      dateCreated: \"Profile created at:\",\r\n    };\r\n    const statsLabelsKeys = Object.keys(statsLabels);\r\n\r\n    //#region [ Horizon ] CLASS NAMES\r\n\r\n    const sidebarClass = classNames(\"Sidebar\", {\r\n      \"Sidebar--visible\": isSidebarVisible,\r\n    });\r\n\r\n    const editButtonsClass = classNames(\"userButtons\", \"userButtons--edit\", {\r\n      \"userButtons--visible\": !isEditMode,\r\n    });\r\n\r\n    const confirmButtonsClass = classNames(\r\n      \"userButtons\",\r\n      \"userButtons--confirm\",\r\n      {\r\n        \"userButtons--visible\": isEditMode,\r\n      }\r\n    );\r\n\r\n    //#endregion CLASS NAMES\r\n\r\n    return (\r\n      <section className={sidebarClass}>\r\n        {/* USER LOGIN */}\r\n        <h2 className=\"Sidebar__userLogin\">{login}</h2>\r\n\r\n        <UserEdit\r\n          parentName={block}\r\n          state={this.state}\r\n          isEditMode={isEditMode}\r\n          editedSetting={editedSetting}\r\n          onPreviewModeChange={this.handlePasswordPreview}\r\n          onInputBlur={this.handleAlert}\r\n          handleLoginValidation={this.handleLoginValidation}\r\n          handleOldPasswordValidation={this.handleOldPasswordValidation}\r\n          handleNewPasswordValidation={this.handleNewPasswordValidation}\r\n          handleConfirmValidation={this.handleConfirmValidation}\r\n        />\r\n\r\n        {/* USER PANEL BUTTONS */}\r\n        <div className=\"Sidebar__buttons\">\r\n          {/* EDIT BUTTONS */}\r\n          <div className={editButtonsClass}>\r\n            {userEditButtons.map((button, index) => {\r\n              const buttonClass = classNames(\r\n                \"userButtons__button\",\r\n                `userButtons__button--${button}`,\r\n                {\r\n                  \"userButtons__button--visible\": !isEditMode,\r\n                }\r\n              );\r\n              const tabIndexVal = isSidebarVisible && !isEditMode ? \"0\" : \"-1\";\r\n\r\n              return (\r\n                <button\r\n                  className={buttonClass}\r\n                  key={button}\r\n                  title={userEditLabels[index]}\r\n                  onClick={() => this.handleUserEdit(button)}\r\n                  tabIndex={tabIndexVal}>\r\n                  <svg className=\"userButtons__svg\" viewBox=\"0 0 100 100\">\r\n                    <use href={`${icons}#${button}Edit`}></use>\r\n                  </svg>\r\n                </button>\r\n              );\r\n            })}\r\n          </div>\r\n\r\n          {/* CONFIRMATION BUTTONS */}\r\n          <div className={confirmButtonsClass}>\r\n            {userConfirmButtons.map((button) => {\r\n              const isButtonDisabled =\r\n                editedSetting === \"login\"\r\n                  ? !isLoginValid\r\n                  : editedSetting === \"password\"\r\n                  ? !isOldPasswordValid ||\r\n                    !isNewPasswordValid ||\r\n                    !isConfirmValid\r\n                  : false;\r\n              const isConfirmButtonDisabled =\r\n                isButtonDisabled && button === \"confirm\";\r\n\r\n              const buttonClass = classNames(\r\n                \"userButtons__button\",\r\n                `userButtons__button--${button}`,\r\n                {\r\n                  \"userButtons__button--visible\": isEditMode,\r\n                  \"userButtons__button--disabled\": isConfirmButtonDisabled,\r\n                }\r\n              );\r\n              const tabIndexVal = isSidebarVisible && isEditMode ? \"0\" : \"-1\";\r\n\r\n              return (\r\n                <button\r\n                  className={buttonClass}\r\n                  key={button}\r\n                  onClick={() => this.handleUserEdit(button)}\r\n                  disabled={isConfirmButtonDisabled}\r\n                  tabIndex={tabIndexVal}>\r\n                  <svg className=\"userButtons__svg\" viewBox=\"0 0 100 100\">\r\n                    <use href={`${icons}#${button}Edit`}></use>\r\n                  </svg>\r\n                </button>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n\r\n        {/* USER STATS */}\r\n        <section className=\"Sidebar__section\">\r\n          <h3 className=\"Sidebar__heading\">Stats</h3>\r\n          <table className=\"stats\">\r\n            <caption className=\"stats__caption visuallyhidden\">Stats</caption>\r\n            <thead className=\"stats__header visuallyhidden\">\r\n              <tr className=\"stats__row\">\r\n                <th className=\"stats__cell\">Name</th>\r\n                <th className=\"stats__cell\">Value</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody className=\"stats__body\">\r\n              {[...statsLabelsKeys].map((key) => (\r\n                <tr className=\"stats__row\" key={key}>\r\n                  <th className=\"stats__cell stats__cell--name\" scope=\"row\">\r\n                    {statsLabels[key]}\r\n                  </th>\r\n                  <td className=\"stats__cell stats__cell--value\">\r\n                    {stats[key]}\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </section>\r\n\r\n        {/* USER COLOR PROFILE */}\r\n        <section className=\"Sidebar__section\">\r\n          <h3 className=\"Sidebar__heading\">Color Theme</h3>\r\n          <p className=\"Sidebar__text\">To be added soon...</p>\r\n        </section>\r\n      </section>\r\n    );\r\n  }\r\n}\r\nexport default Sidebar;\r\n","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport '../scss/CreatorInput.scss';\r\nimport { maxTaskNameLength } from '../lib/globalVariables';\r\nimport { taskNameProgressStyle } from '../lib/handlers';\r\n\r\nconst CreatorInput = (props) => {\r\n\r\n  const {\r\n    isVisible,\r\n    isValid,\r\n    modifier,\r\n    title,\r\n    label,\r\n    minutes,\r\n    seconds,\r\n    placeholder,\r\n    slideDirection,\r\n    taskNameLength,\r\n    onTaskNameChange,\r\n    onMinutesChange,\r\n    onSecondsChange,\r\n    alertFlag\r\n  } = props;\r\n\r\n  const creatorInputClass = classNames(\"CreatorInput\", {\r\n    [`CreatorInput--${modifier}`]: isVisible,\r\n    \"showFromRight\": isVisible && slideDirection === 'toRight',\r\n    \"hideToLeft\": !isVisible && slideDirection === 'toRight',\r\n    \"showFromLeft\": isVisible && slideDirection === 'toLeft',\r\n    \"hideToRight\": !isVisible && slideDirection === 'toLeft'\r\n  });\r\n\r\n  const textInputClass = classNames(\"CreatorInput__text\", {\r\n    \"CreatorInput__text--invalid\": !isValid && alertFlag\r\n  });\r\n\r\n  const timeInputsClass = classNames(\"CreatorInput__inputs\", {\r\n    \"CreatorInput__inputs--invalid\": !isValid && alertFlag\r\n  });\r\n\r\n  const minutesInputClass = classNames(\"CreatorInput__input\",\r\n    \"CreatorInput__input--minutes\", {\r\n      \"CreatorInput__input--invalid\": !isValid && alertFlag\r\n    });\r\n\r\n  const secondsInputClass = classNames(\"CreatorInput__input\",\r\n    \"CreatorInput__input--seconds\", {\r\n      \"CreatorInput__input--invalid\": !isValid && alertFlag\r\n    });\r\n\r\n  return (\r\n    <div className={creatorInputClass}>\r\n\r\n      {/* INPUT LABEL */}\r\n      <label\r\n        htmlFor={modifier}\r\n        className=\"CreatorInput__label\"\r\n      >\r\n        {label}\r\n      </label>\r\n\r\n      {\r\n        modifier === \"taskName\"\r\n        ? /* TEXT INPUT */\r\n        <div className=\"CreatorInput__textContainer\">\r\n          <textarea\r\n            id={modifier}\r\n            className={textInputClass}\r\n            placeholder={placeholder}\r\n            spellCheck=\"false\"\r\n            maxLength={maxTaskNameLength}\r\n            value={title}\r\n            onChange={(e) => onTaskNameChange(e.target.value)}\r\n          ></textarea>\r\n          <div\r\n            className=\"CreatorInput__progress\"\r\n            style={taskNameProgressStyle(taskNameLength)}\r\n          ></div>\r\n        </div>\r\n\r\n        : /* TIME INPUT */\r\n        <div className={timeInputsClass}>\r\n          <input\r\n            id={modifier}\r\n            name={`${modifier}Minutes`}\r\n            className={minutesInputClass}\r\n            placeholder=\"min\"\r\n            maxLength=\"2\"\r\n            value={minutes}\r\n            onChange={(e) => onMinutesChange(e.target.value)}\r\n          />\r\n          <span className=\"CreatorInput__colon\">:</span>\r\n          <input\r\n            name={`${modifier}Seconds`}\r\n            className={secondsInputClass}\r\n            placeholder=\"sec\"\r\n            maxLength=\"2\"\r\n            value={seconds}\r\n            onChange={(e) => onSecondsChange(e.target.value)}\r\n          />\r\n        </div>\r\n      }\r\n    </div>\r\n  )\r\n}\r\nexport default CreatorInput;","import React, { Component } from 'react';\r\nimport classNames from 'classnames';\r\nimport CreatorInput from './CreatorInput';\r\nimport { validateTaskName, handleTimeChange } from '../lib/handlers';\r\nimport { cardFlipTime, animationStyle } from '../lib/globalVariables';\r\nimport icons from '../assets/svg/icons.svg';\r\nimport '../scss/Creator.scss';\r\n\r\nclass Creator extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      // visibility\r\n      isCreatorRotatingOut: false,\r\n      isTaskNameVisible: true,\r\n      isTaskTimeVisible: false,\r\n      isBreakTimeVisible: false,\r\n      // inputs\r\n      creatorTaskName: \"\",\r\n      creatorTaskMinutes: \"\",\r\n      creatorTaskSeconds: \"\",\r\n      creatorBreakMinutes: \"\",\r\n      creatorBreakSeconds: \"\",\r\n      creatorTotalTaskTime: 0,\r\n      creatorTotalBreakTime: 0,\r\n      taskNameLength: 0,\r\n      creatorTaskTimeArray: [\"00\",\"00\"],\r\n      creatorBreakTimeArray: [\"00\",\"00\"],\r\n      // validation\r\n      isTaskNameValid: false,\r\n      isTaskTimeValid: false,\r\n      isBreakTimeValid: true,\r\n      isCreatorValid: false,\r\n      alertFlag: false,\r\n\r\n      slideDirection: null\r\n    };\r\n  }\r\n\r\n  componentWillUnmount = () => {\r\n    clearTimeout(this.timeoutOutroId);\r\n  }\r\n\r\n  handleStateChange = (object) => this.setState(object);\r\n\r\n  handleTaskName = (value) => {\r\n    this.setState({\r\n      creatorTaskName: value,\r\n      taskNameLength: value.length,\r\n      isTaskNameValid: validateTaskName(value),\r\n      alertFlag: true\r\n    });\r\n  }\r\n\r\n  addNewTask = () => {\r\n    const { onBoardStateChange, onTaskEdit } = this.props;\r\n    const {\r\n      creatorTaskName,\r\n      creatorTaskMinutes,\r\n      creatorTaskSeconds,\r\n      creatorBreakMinutes,\r\n      creatorBreakSeconds,\r\n      creatorTotalTaskTime,\r\n      creatorTotalBreakTime,\r\n      creatorTaskTimeArray,\r\n      creatorBreakTimeArray\r\n    } = this.state;\r\n\r\n    const date = Date.now();\r\n    // new task data\r\n    const newTask = {\r\n      taskName: creatorTaskName,\r\n      taskMinutes: creatorTaskMinutes,\r\n      taskSeconds: creatorTaskSeconds,\r\n      breakMinutes: creatorBreakMinutes,\r\n      breakSeconds: creatorBreakSeconds,\r\n      totalTaskTime: creatorTotalTaskTime,\r\n      totalBreakTime: creatorTotalBreakTime,\r\n      totalTaskTimeArray: creatorTaskTimeArray,\r\n      totalBreakTimeArray: creatorBreakTimeArray,\r\n      id: date\r\n    };\r\n    // add new task to app state\r\n    onBoardStateChange({ isCreatorVisible: false });\r\n    onTaskEdit(newTask, 'add');\r\n  }\r\n\r\n  /* handleKeyPress = (e) => {\r\n    const { onStateChange } = this.props;\r\n    const keyPressed = e.key || null;\r\n\r\n    if (keyPressed === \"Escape\" || keyPressed === null) {\r\n      onStateChange({\r\n        isTaskVisible: true,\r\n        isTimeVisible: false,\r\n        isTaskNameChangeActive: true\r\n      })\r\n    }\r\n  } */\r\n\r\n  handleTimeChange = (minutes, seconds, units, type) => {\r\n    const newTime = handleTimeChange(minutes, seconds, units, type);\r\n\r\n    if (type === 'task') {\r\n      if (units === 'minutes') {\r\n        const { taskMinutes, totalTaskTime, totalTaskTimeArray, isTaskTimeValid } = newTime;\r\n        this.setState({\r\n          creatorTaskMinutes: taskMinutes,\r\n          creatorTotalTaskTime: totalTaskTime,\r\n          creatorTaskTimeArray: totalTaskTimeArray,\r\n          isTaskTimeValid,\r\n          alertFlag: true\r\n        });\r\n      } else if (units === 'seconds') {\r\n        const { taskSeconds, totalTaskTime, totalTaskTimeArray, isTaskTimeValid } = newTime;\r\n        this.setState({\r\n          creatorTaskSeconds: taskSeconds,\r\n          creatorTotalTaskTime: totalTaskTime,\r\n          creatorTaskTimeArray: totalTaskTimeArray,\r\n          isTaskTimeValid,\r\n          alertFlag: true\r\n        });\r\n      }\r\n    } else if (type === 'break') {\r\n      if (units === 'minutes') {\r\n        const { breakMinutes, totalBreakTime, totalBreakTimeArray, isBreakTimeValid } = newTime;\r\n        this.setState({\r\n          creatorBreakMinutes: breakMinutes,\r\n          creatorTotalBreakTime: totalBreakTime,\r\n          creatorBreakTimeArray: totalBreakTimeArray,\r\n          isBreakTimeValid,\r\n          alertFlag: true\r\n        });\r\n      } else if (units === 'seconds') {\r\n        const { breakSeconds, totalBreakTime, totalBreakTimeArray, isBreakTimeValid } = newTime;\r\n        this.setState({\r\n          creatorBreakSeconds: breakSeconds,\r\n          creatorTotalBreakTime: totalBreakTime,\r\n          creatorBreakTimeArray: totalBreakTimeArray,\r\n          isBreakTimeValid,\r\n          alertFlag: true\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  handleBackButton = (e) => {\r\n    e.preventDefault();\r\n    const {\r\n      isTaskTimeVisible,\r\n      isBreakTimeVisible\r\n    } = this.state;\r\n\r\n    if (isTaskTimeVisible) {\r\n      this.setState({\r\n        isTaskNameVisible: true,\r\n        isTaskTimeVisible: false,\r\n        slideDirection: \"toLeft\"\r\n      });\r\n    }\r\n\r\n    if (isBreakTimeVisible) {\r\n      this.setState({\r\n        isTaskTimeVisible: true,\r\n        isBreakTimeVisible: false,\r\n        slideDirection: \"toLeft\"\r\n      });\r\n    }\r\n  }\r\n  \r\n  handleNextButton = (e) => {\r\n    e.preventDefault();\r\n\r\n    const {\r\n      isTaskNameVisible,\r\n      isTaskTimeVisible,\r\n      isBreakTimeVisible,\r\n      isTaskNameValid,\r\n      isTaskTimeValid,\r\n      isBreakTimeValid\r\n    } = this.state;\r\n\r\n    if (isTaskNameVisible && isTaskNameValid) {\r\n      this.setState({\r\n        isTaskNameVisible: false,\r\n        isTaskTimeVisible: true,\r\n        alertFlag: false,\r\n        slideDirection: \"toRight\"\r\n      });\r\n    }\r\n\r\n    if (isTaskTimeVisible && isTaskTimeValid) {\r\n      this.setState({\r\n        isTaskTimeVisible: false,\r\n        isBreakTimeVisible: true,\r\n        alertFlag: false,\r\n        slideDirection: \"toRight\"\r\n      });\r\n    }\r\n\r\n    if (isBreakTimeVisible && isBreakTimeValid) {\r\n      this.setState({\r\n        isCreatorValid: true,\r\n        alertFlag: false,\r\n        isCreatorRotatingOut: true,\r\n        slideDirection: \"toRight\"\r\n      });\r\n      this.timeoutOutroId = setTimeout(() => this.addNewTask(),\r\n      cardFlipTime);\r\n    }\r\n  }\r\n\r\n  handleCreatorClose = (e) => {\r\n    e.preventDefault();\r\n    const { onBoardStateChange } = this.props;\r\n    onBoardStateChange({ isCreatorVisible: false });\r\n  }\r\n\r\n  render() {\r\n\r\n    const {\r\n      // visibility\r\n      isCreatorRotatingOut,\r\n      isTaskNameVisible,\r\n      isTaskTimeVisible,\r\n      isBreakTimeVisible,\r\n      // inputs\r\n      creatorTaskName,\r\n      creatorTaskMinutes,\r\n      creatorTaskSeconds,\r\n      creatorBreakMinutes,\r\n      creatorBreakSeconds,\r\n      taskNameLength,\r\n      // validation\r\n      isTaskNameValid,\r\n      isTaskTimeValid,\r\n      isBreakTimeValid,\r\n      isCreatorValid,\r\n      alertFlag,\r\n      \r\n      slideDirection\r\n    } = this.state;\r\n\r\n    const isNextButtonVisible = \r\n    (isTaskNameVisible && isTaskNameValid) ||\r\n    (isTaskTimeVisible && isTaskTimeValid) ||\r\n    (isBreakTimeVisible && isBreakTimeValid);\r\n\r\n    const creatorClass = classNames(\"Creator\", {\r\n      \"Creator--rotateOut\": isCreatorRotatingOut\r\n    });\r\n  \r\n    const backButtonClass = classNames(\"Creator__button\",\r\n      \"Creator__button--back\", {\r\n      \"Creator__button--visible\": !isTaskNameVisible\r\n    });\r\n    \r\n    const nextButtonClass = classNames(\"Creator__button\",\r\n      \"Creator__button--next\", {\r\n      \"Creator__button--visible\": isNextButtonVisible\r\n    });\r\n    \r\n    const closeButtonClass = \"Creator__button Creator__button--visible Creator__button--close\";\r\n\r\n    const progressBarLoadedStyle = {\r\n      width: isTaskTimeVisible ? `${1/3 * 100}%`\r\n      : isBreakTimeVisible ?\r\n        isCreatorValid ? \"100%\" : `${2/3 * 100}%`\r\n      : 0\r\n    }\r\n\r\n    return (\r\n      <form\r\n        className={creatorClass}\r\n        style={animationStyle}\r\n        //onSubmit={this.handleFormSubmit}\r\n        //onKeyDown={(e) => this.handleKeyboard(e)}\r\n      >\r\n        {/* TASK NAME INPUT */}\r\n        <CreatorInput\r\n          isVisible={isTaskNameVisible}\r\n          isValid={isTaskNameValid}\r\n          modifier=\"taskName\"\r\n          title={creatorTaskName}\r\n          label=\"Enter task name\"\r\n          placeholder=\"What would be your next task?\"\r\n          alertFlag={alertFlag}\r\n          onTaskNameChange={this.handleTaskName}\r\n          slideDirection={slideDirection}\r\n          taskNameLength={taskNameLength}\r\n        />\r\n\r\n        {/* TASK TIME INPUT */}\r\n        <CreatorInput\r\n          isVisible={isTaskTimeVisible}\r\n          isValid={isTaskTimeValid}\r\n          modifier=\"taskTime\"\r\n          label=\"Enter task time\"\r\n          placeholder=\"Enter time here...\"\r\n          minutes={creatorTaskMinutes}\r\n          seconds={creatorTaskSeconds}\r\n          alertFlag={alertFlag}\r\n          slideDirection={slideDirection}\r\n          onMinutesChange={(value) =>\r\n            this.handleTimeChange(value, creatorTaskSeconds, 'minutes', 'task')}\r\n          onSecondsChange={(value) =>\r\n            this.handleTimeChange(creatorTaskMinutes, value, 'seconds', 'task')}\r\n        />\r\n        \r\n        {/* BREAK TIME INPUT */}\r\n        <CreatorInput\r\n          isVisible={isBreakTimeVisible}\r\n          isValid={isBreakTimeValid}\r\n          modifier=\"breakTime\"\r\n          label=\"Enter max break time\"\r\n          placeholder=\"Enter time here...\"\r\n          minutes={creatorBreakMinutes}\r\n          seconds={creatorBreakSeconds}\r\n          alertFlag={alertFlag}\r\n          slideDirection={slideDirection}\r\n          onMinutesChange={(value) =>\r\n            this.handleTimeChange(value, creatorBreakSeconds, 'minutes', 'break')}\r\n          onSecondsChange={(value) =>\r\n            this.handleTimeChange(creatorBreakMinutes, value, 'seconds', 'break')}\r\n        />\r\n\r\n        {/* GO BACK BUTTON */}\r\n        <button\r\n          className={backButtonClass}\r\n          onClick={this.handleBackButton}\r\n        >\r\n          <svg className=\"Creator__svg\" viewBox=\"0 0 512 512\">\r\n            <use href={`${icons}#arrow-left`}></use>\r\n          </svg>\r\n        </button>\r\n  \r\n        {/* GO NEXT BUTTON */}\r\n        <button\r\n          className={nextButtonClass}\r\n          onClick={this.handleNextButton}\r\n        >\r\n          <svg className=\"Creator__svg\" viewBox=\"0 0 512 512\">\r\n            <use href={`${icons}#arrow-right`}></use>\r\n          </svg>\r\n        </button>\r\n\r\n        {/* CLOSE NEW TASK */}\r\n        <button\r\n          className={closeButtonClass}\r\n          onClick={this.handleCreatorClose}\r\n        >\r\n          <svg className=\"Creator__svg\" viewBox=\"0 0 512 512\">\r\n            <use href={`${icons}#remove`}/>\r\n          </svg>\r\n        </button>\r\n\r\n        {/* PROGRESS BAR */}\r\n        <div className=\"progressBar\">\r\n          <div\r\n            className=\"progressBar__loaded\"\r\n            style={progressBarLoadedStyle}\r\n          ></div>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\nexport default Creator;","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport { maxTaskNameLength } from '../lib/globalVariables';\r\nimport { taskNameProgressStyle } from '../lib/handlers';\r\nimport '../scss/EditableText.scss';\r\n\r\nconst EditableText = (props) => {\r\n    \r\n  const {\r\n    output,\r\n    isValid,\r\n    isMaximized,\r\n    taskNameLength,\r\n    isDisabled,\r\n    isEditMode,\r\n    onTaskNameChange,\r\n    onEditModeChange\r\n  } = props;\r\n\r\n  const editableTextClass = classNames(\"taskName\", {\r\n    \"taskName--disabled\": isDisabled,\r\n    \"taskName--maximized\": isMaximized\r\n  });\r\n\r\n  const textClass = classNames(\"taskName__text\", {\r\n    \"taskName__text--visible\": !isEditMode\r\n  })\r\n\r\n  const inputContainerClass = classNames(\"taskName__inputContainer\", {\r\n    \"taskName__inputContainer--visible\": isEditMode\r\n  })\r\n\r\n  const inputClass = classNames(\"taskName__input\", {\r\n    \"taskName__input--incorrect\": !isValid\r\n  })\r\n\r\n  const progressClass = classNames(\"taskName__progress\", {\r\n    \"taskName__progress--visible\": isEditMode\r\n  })\r\n\r\n  return (\r\n    <div className={editableTextClass}>\r\n      {/* TEXT TITLE */}\r\n      <h2 className={textClass} onClick={onEditModeChange}>\r\n        {`\"${output}\"`}\r\n      </h2>\r\n      {/* TEXT CONTAINER */}\r\n      <div className={inputContainerClass}>\r\n        {/* INPUT */}\r\n        <textarea\r\n          className={inputClass}\r\n          value={output}\r\n          spellCheck=\"false\"\r\n          maxLength={maxTaskNameLength}\r\n          onChange={(e) => onTaskNameChange(e.target.value)}\r\n        ></textarea>\r\n        {/* TEXT PROGRESS */}\r\n        <div\r\n          className={progressClass}\r\n          style={taskNameProgressStyle(taskNameLength)}\r\n        ></div>\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default EditableText;","import React from 'react';\r\nimport classNames from 'classnames';\r\n\r\nconst EditableTime = (props) => {\r\n  const {\r\n    id,\r\n    name,\r\n    unit,\r\n    time,\r\n    isEditMode,\r\n    onTimeChange,\r\n    onEditModeChange\r\n  } = props;\r\n  \r\n  const textClass = classNames(\"TotalTime__text\", {\r\n    \"TotalTime__text--visible\": !isEditMode\r\n  });\r\n\r\n  const timeClass = classNames(\"TotalTime__input\",\r\n    `TotalTime__input--${unit}`, {\r\n    \"TotalTime__input--visible\": isEditMode\r\n  });\r\n\r\n  const placeholder = unit.slice(0,3);\r\n\r\n  return (\r\n    <div className={`TotalTime__unit TotalTime__unit--${unit}`}>\r\n      {/* TEXT */}\r\n      <p className={textClass} onClick={onEditModeChange}>\r\n        {time}\r\n      </p>\r\n      {/* INPUT */}\r\n      <input\r\n        id={id}\r\n        name={name}\r\n        className={timeClass}\r\n        placeholder={placeholder}\r\n        maxLength=\"2\"\r\n        value={time}\r\n        onChange={(e) => onTimeChange(e.target.value)}\r\n      />\r\n    </div>\r\n  );\r\n}\r\nexport default EditableTime;","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport icons from '../assets/svg/icons.svg';\r\nimport { getNumFromRange } from '../lib/handlers';\r\nimport '../scss/Spinners.scss';\r\n\r\nconst Spinners = (props) => {\r\n\r\n  const {\r\n    modifier,\r\n    value,\r\n    isValid,\r\n    isEditMode,\r\n    onTimeChange\r\n  } = props;\r\n\r\n  const handleValueChange = (value, operation) => {\r\n    value = value === \"\" ? 0 : value;\r\n    const newValue = getNumFromRange(value, operation, 0, 99);\r\n    onTimeChange(newValue);\r\n  }\r\n\r\n  const spinnersClass = classNames(\"Spinners\", [`Spinners--${modifier}`], {\r\n    \"Spinners--visible\": isEditMode,\r\n    \"Spinners--disabled\": !isValid\r\n  });\r\n\r\n  return (\r\n    <div className={spinnersClass}>\r\n      {/* INCREASE BUTTON */}\r\n      <button\r\n        className=\"Spinners__button Spinners__button--increase\"\r\n        onClick={() => handleValueChange(value, \"increase\")}\r\n        disabled={!isValid}\r\n      >\r\n        <svg className=\"Spinners__svg\" viewBox=\"0 0 512 512\">\r\n          <use href={`${icons}#arrow-up`}></use>\r\n        </svg>\r\n      </button>\r\n      {/* DECREASE BUTTON */}\r\n      <button\r\n        className=\"Spinners__button Spinners__button--decrease\"\r\n        onClick={() => handleValueChange(value, \"decrease\")}\r\n        disabled={!isValid}\r\n      >\r\n        <svg className=\"Spinners__svg\" viewBox=\"0 0 512 512\">\r\n          <use href={`${icons}#arrow-down`}></use>\r\n        </svg>\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\nexport default Spinners;","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport EditableTime from './EditableTime';\r\nimport Spinners from './Spinners'\r\nimport '../scss/TotalTime.scss';\r\n\r\nconst TotalTime = (props) => {\r\n\r\n  const {\r\n    labelName,\r\n    modifier,\r\n    id,\r\n    isMaximized,\r\n    minutes,\r\n    seconds,\r\n    isValid,\r\n    isDisabled,\r\n    isEditMode,\r\n    isCardEditMode,\r\n    onEditModeChange,\r\n    onMinutesChange,\r\n    onSecondsChange,\r\n    onKeyPress\r\n  } = props;\r\n\r\n  const totalTimeClass = classNames(`TotalTime TotalTime--${modifier}`, {\r\n    \"TotalTime--maximized\": isMaximized,\r\n    \"TotalTime--disabled\": isDisabled,\r\n    \"TotalTime--main\": !isCardEditMode && modifier === \"taskTime\"\r\n  });\r\n\r\n  const labelClass = classNames(\"TotalTime__label\", {\r\n    \"TotalTime__label--editMode\": isEditMode\r\n  });\r\n\r\n  const displayClass = classNames(\"TotalTime__display\", {\r\n    \"TotalTime__display--editMode\": isEditMode,\r\n    \"TotalTime__display--incorrect\": !isValid\r\n  });\r\n\r\n  return (\r\n    <div className={totalTimeClass}>\r\n      {/* LABEL */}\r\n      <label\r\n        className={labelClass}\r\n        htmlFor={`${modifier}-${id}`}\r\n        onClick={onEditModeChange}\r\n      >\r\n        {labelName}\r\n      </label>\r\n      <div\r\n        className={displayClass}\r\n        onKeyDown={(e) => onKeyPress(e.key)}\r\n      >\r\n        <Spinners\r\n          modifier=\"minutes\"\r\n          value={minutes}\r\n          isValid={isValid}\r\n          isEditMode={isEditMode}\r\n          onTimeChange={(value) => onMinutesChange(value)}\r\n        />\r\n        {/* MINUTES */}\r\n        <EditableTime\r\n          id={`${modifier}-${id}`}\r\n          name={`${modifier}Minutes`}\r\n          unit=\"minutes\"\r\n          time={minutes}\r\n          isEditMode={isEditMode}\r\n          onTimeChange={(value) => onMinutesChange(value)}\r\n          onEditModeChange={onEditModeChange}\r\n        />\r\n        {/* SEPARATOR */}\r\n        <span className=\"TotalTime__colon\">{` : `}</span>\r\n        {/* SECONDS */}\r\n        <EditableTime\r\n          name={`${modifier}Seconds`}\r\n          unit=\"seconds\"\r\n          time={seconds}\r\n          isEditMode={isEditMode}\r\n          onTimeChange={(value) => onSecondsChange(value)}\r\n          onEditModeChange={onEditModeChange}\r\n        />\r\n        <Spinners\r\n          modifier=\"seconds\"\r\n          value={seconds}\r\n          isValid={isValid}\r\n          isEditMode={isEditMode}\r\n          onTimeChange={(value) => onSecondsChange(value)}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default TotalTime;","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport icons from '../assets/svg/icons.svg';\r\nimport '../scss/CardButtons.scss';\r\n\r\nconst CardButtons = (props) => {\r\n\r\n  const {\r\n    isMaximized,\r\n    editModeActive,\r\n    inputInvalid,\r\n    cardRotatingMode,\r\n    onAcceptButtonClick,\r\n    onRemoveButtonClick,\r\n    onTaskStateChange,\r\n    onBoardStateChange,\r\n    onDrag\r\n  } = props;\r\n\r\n  const handleMaximize = () => {\r\n    onTaskStateChange(prevState => ({\r\n      isMaximized: !prevState.isMaximized\r\n    }));\r\n    onBoardStateChange({ isPlaceholderVisible: false });\r\n  }\r\n\r\n  const cardButtonsClass = classNames(\"CardButtons\", {\r\n    \"CardButtons--maximized\": isMaximized\r\n  });\r\n\r\n  const acceptButtonClass = classNames(\"CardButtons__button\",\r\n  \"CardButtons__button--accept\", {\r\n    \"CardButtons__button--visible\": editModeActive,\r\n    \"CardButtons__button--disabled\": inputInvalid || cardRotatingMode\r\n  });\r\n\r\n  const buttonClass = classNames(\"CardButtons__button\", {\r\n    \"CardButtons__button--disabled\": editModeActive || cardRotatingMode,\r\n    \"CardButtons__button--visible\": isMaximized\r\n  });\r\n  \r\n  return (\r\n    <div className={cardButtonsClass}>\r\n      {/* ACCEPT BUTTON */}\r\n      <button\r\n        className={acceptButtonClass}\r\n        onClick={onAcceptButtonClick}\r\n      >\r\n        <svg className=\"CardButtons__svg\" viewBox=\"0 0 512 512\">\r\n          <use href={`${icons}#tick`}/>\r\n        </svg>\r\n      </button>\r\n\r\n      {/* MINIMIZE BUTTON */}\r\n      <button\r\n        className={buttonClass}\r\n        onClick={handleMaximize}\r\n        disabled={editModeActive || cardRotatingMode}\r\n      >\r\n        <svg className=\"CardButtons__svg\" viewBox=\"0 0 512 512\">\r\n          <use href={`${icons}#minimize`}/>\r\n        </svg>\r\n      </button>\r\n\r\n      {/* DRAG BUTTON */}\r\n      <button\r\n        className={buttonClass}\r\n        onMouseDown={onDrag}\r\n        disabled={editModeActive || cardRotatingMode}\r\n      >\r\n        <svg className=\"CardButtons__svg\" viewBox=\"0 0 100 100\">\r\n          <use href={`${icons}#drag`}/>\r\n        </svg>\r\n      </button>\r\n      \r\n      {/* REMOVE BUTTON */}\r\n      <button\r\n        className={buttonClass}\r\n        onClick={onRemoveButtonClick}\r\n        disabled={editModeActive || cardRotatingMode}\r\n      >\r\n        <svg className=\"CardButtons__svg\" viewBox=\"0 0 512 512\">\r\n          <use href={`${icons}#remove`}/>\r\n        </svg>\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\nexport default CardButtons;","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport '../scss/StopAlert.scss';\r\n\r\nconst StopAlert = (props) => {\r\n  const {\r\n    alertText,\r\n    isStopAlertVisible,\r\n    onStopCancel,\r\n    onStopConfirm\r\n  } = props;\r\n\r\n  const stopAlertClass = classNames(\"StopAlert\", {\r\n    \"StopAlert--visible\": isStopAlertVisible\r\n  });\r\n  \r\n  const containerClass = classNames(\"StopAlert__container\", {\r\n    \"StopAlert__container--visible\": isStopAlertVisible\r\n  });\r\n\r\n  return (\r\n    <section className={stopAlertClass}>\r\n      <div className={containerClass}>\r\n        <h2 className=\"StopAlert__heading\">{alertText}</h2>\r\n        <button\r\n          className=\"StopAlert__button StopAlert__button--stop\"\r\n          onClick={onStopConfirm}\r\n        >\r\n          Yes\r\n        </button>\r\n        <button\r\n          className=\"StopAlert__button StopAlert__button--cancel\"\r\n          onClick={onStopCancel}\r\n        >\r\n          Cancel\r\n        </button>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\nexport default StopAlert;","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport '../scss/TimeDisplay.scss';\r\n\r\nconst TimeDisplay = (props) => {\r\n  const {\r\n    type,\r\n    elapsedTimeArray,\r\n    remainingTimeArray,\r\n    isElapsedMode\r\n  } = props;\r\n\r\n  const elapsedTimeResult = type === 'taskTime'\r\n    ? elapsedTimeArray.join(' : ')\r\n    : elapsedTimeArray.slice(0,2).join(' : ');\r\n\r\n  const remainingTimeResult = type === 'taskTime'\r\n    ? remainingTimeArray.join(' : ')\r\n    : remainingTimeArray.slice(0,2).join(' : ');\r\n\r\n  const elapsedTimeClass = classNames(\"TimeDisplay__type\",\r\n    \"TimeDisplay__type--elapsed\", {\r\n    \"TimeDisplay__type--visible\": isElapsedMode,\r\n    \"TimeDisplay__type--showUp\" : isElapsedMode,\r\n    \"TimeDisplay__type--hideUp\" : !isElapsedMode\r\n  });\r\n  \r\n  const remainingTimeClass = classNames(\"TimeDisplay__type\",\r\n    \"TimeDisplay__type--remaining\", {\r\n    \"TimeDisplay__type--visible\": !isElapsedMode,\r\n    \"TimeDisplay__type--showUp\" : !isElapsedMode,\r\n    \"TimeDisplay__type--hideUp\" : isElapsedMode\r\n  });\r\n\r\n  return (\r\n    <div className='TimeDisplay'>\r\n      <div className={elapsedTimeClass}>{elapsedTimeResult}</div>\r\n      <div className={remainingTimeClass}>{remainingTimeResult}</div>\r\n    </div>\r\n  );\r\n}\r\nexport default TimeDisplay;","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport TimeDisplay from './TimeDisplay';\r\nimport '../scss/Countdown.scss';\r\n\r\nconst Countdown = (props) => {\r\n\r\n  const {\r\n    modifier,\r\n    isElapsedMode,\r\n    elapsedTimeArray,\r\n    remainingTimeArray,\r\n    isCountdownVisible,\r\n    totalBreaks\r\n  } = props;\r\n\r\n  const countdownClass = classNames(`Countdown Countdown--${modifier}`, {\r\n    \"Countdown--visible\": isCountdownVisible,\r\n    \"showFromRight\": isCountdownVisible && totalBreaks > 0,\r\n    \"hideToLeft\": !isCountdownVisible,\r\n  });\r\n\r\n  return (\r\n    <div className={countdownClass}>\r\n\r\n      { /* ACTIVE MODE */\r\n        modifier === 'taskTime'\r\n        ? <h3 className=\"Countdown__heading\">Working Mode</h3>\r\n        : <h3 className=\"Countdown__heading\">Break Mode</h3>\r\n      }\r\n      { /* ELAPSED / REMAINING TIME */\r\n        isElapsedMode\r\n        ? <p className=\"Countdown__timeType\">Elapsed Time</p>\r\n        : <p className=\"Countdown__timeType\">Remaining Time</p>\r\n      }\r\n      {/* TIMER DISPLAY */}\r\n      <TimeDisplay\r\n        type={modifier}\r\n        isElapsedMode={isElapsedMode}\r\n        elapsedTimeArray={elapsedTimeArray}\r\n        remainingTimeArray={remainingTimeArray}\r\n      />\r\n    </div>\r\n  );\r\n}\r\nexport default Countdown;","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport '../scss/Progress.scss';\r\n\r\nconst Progress = (props) => {\r\n  const {\r\n    modifier,\r\n    isVisible,\r\n    isElapsedMode,\r\n    elapsedPercent,\r\n    remainingPercent\r\n  } = props;\r\n\r\n  const progressClass = classNames(\"Progress\",\r\n  `Progress--${modifier}`, {\r\n    \"Progress--visible\": isVisible\r\n  });\r\n\r\n  const elapsedPercentClass = classNames(\"Progress__percent\",\r\n  `Progress__percent--${modifier}`, {\r\n    \"Progress__percent--visible\": isElapsedMode\r\n  });\r\n  const remainingPercentClass = classNames(\"Progress__percent\",\r\n    `Progress__percent--${modifier}`, {\r\n    \"Progress__percent--visible\": !isElapsedMode\r\n  });\r\n  const loadingClass = `\r\n    Progress__part Progress__part--loading Progress__part--${modifier}\r\n  `;\r\n  const unloadingClass = `\r\n    Progress__part Progress__part--unloading Progress__part--${modifier}\r\n  `;\r\n\r\n\r\n  const roundedElapsedPercent = `${Math.round(elapsedPercent)}%`;\r\n  const roundedRemainingPercent = `${Math.round(remainingPercent)}%`;\r\n  const loadingWidth = {\r\n    width: `${isElapsedMode ? elapsedPercent : remainingPercent}%`\r\n  };\r\n  const unloadingWidth = {\r\n    width: `${isElapsedMode ? remainingPercent : elapsedPercent}%`\r\n  };\r\n  \r\n  return (\r\n    <section className={progressClass}>\r\n      {/* PROGRESS HEADER */}\r\n      <header className=\"Progress__header\">\r\n        <p className={elapsedPercentClass}>{roundedElapsedPercent}</p>\r\n        <p className={remainingPercentClass}>{roundedRemainingPercent}</p>\r\n      </header>\r\n      {/* PROGRESS BAR */}\r\n      <div className=\"Progress__bar\">\r\n        <div\r\n          className={loadingClass}\r\n          style={loadingWidth}\r\n        ></div>\r\n        <div\r\n          className={unloadingClass}\r\n          style={unloadingWidth}\r\n        ></div>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\nexport default Progress;","import React, { Component } from 'react';\r\nimport classNames from 'classnames';\r\nimport icons from '../assets/svg/icons.svg';\r\nimport '../scss/Controls.scss';\r\n\r\nclass Controls extends Component {\r\n\r\n  handlePlayPauseButton = () => {\r\n    const {\r\n      isTaskTimeActive,\r\n      isBreakTimeActive,\r\n      onTimerStateChange,\r\n      onCardStateChange,\r\n    } = this.props;\r\n\r\n    if (isTaskTimeActive || isBreakTimeActive) {\r\n      onCardStateChange(prevState => ({\r\n        isTaskTimeActive: !prevState.isTaskTimeActive,\r\n        isBreakTimeActive: !prevState.isBreakTimeActive\r\n      }));\r\n      onTimerStateChange({ previousTime: Date.now() });\r\n    }\r\n    if (isTaskTimeActive) {\r\n      onTimerStateChange(prevState => ({\r\n        totalBreaks: prevState.totalBreaks + 1\r\n      }));\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    const {\r\n      isTaskTimeActive,\r\n      onStopButtonClick,\r\n      cardRotatingMode,\r\n      onDisplayModeChange\r\n    } = this.props;\r\n\r\n    const svgPlayClass = classNames(\"Controls__svg\", {\r\n      \"Controls__svg--hidden\": isTaskTimeActive\r\n    });\r\n    const svgPauseClass = classNames(\"Controls__svg\", {\r\n      \"Controls__svg--hidden\": !isTaskTimeActive\r\n    });\r\n\r\n    const playPauseButtonClass = classNames(\"Controls__button\",\r\n    \"Controls__button--playPause\", {\r\n      \"Controls__button--disabled\": cardRotatingMode\r\n    });\r\n\r\n    const stopButtonClass = classNames(\"Controls__button\",\r\n    \"Controls__button--stop\", {\r\n      \"Controls__button--disabled\": cardRotatingMode\r\n    });\r\n\r\n    const toggleButtonClass = classNames(\"Controls__button\",\r\n    \"Controls__button--toggle\", {\r\n      \"Controls__button--disabled\": cardRotatingMode\r\n    });\r\n\r\n    return (\r\n      <div className=\"Controls\">\r\n        {/* PLAY / PAUSE BUTTON */}\r\n        <button\r\n          className={playPauseButtonClass}\r\n          onClick={this.handlePlayPauseButton}\r\n          disabled={cardRotatingMode}\r\n        >\r\n          <svg className={svgPlayClass} viewBox=\"0 0 100 100\">\r\n            <use href={`${icons}#play`} />\r\n          </svg>\r\n          <svg className={svgPauseClass} viewBox=\"0 0 100 100\">\r\n            <use href={`${icons}#pause`} />\r\n          </svg>\r\n        </button>\r\n  \r\n        {/* STOP BUTTON */}\r\n        <button\r\n          className={stopButtonClass}\r\n          onClick={onStopButtonClick}\r\n          disabled={cardRotatingMode}\r\n        >\r\n          <svg className=\"Controls__svg\" viewBox=\"0 0 100 100\">\r\n            <use href={`${icons}#stop`} />\r\n          </svg>\r\n        </button>\r\n  \r\n        {/* TOGGLE BUTTON */}\r\n        <button\r\n          className={toggleButtonClass}\r\n          onClick={onDisplayModeChange}\r\n          disabled={cardRotatingMode}\r\n        >\r\n          <svg className=\"Controls__svg\" viewBox=\"0 0 100 100\">\r\n            <use href={`${icons}#toggle`} />\r\n          </svg>\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Controls;","import React, { Component } from 'react';\r\nimport { formatTimeResult } from '../lib/handlers';\r\nimport classNames from 'classnames';\r\nimport icons from '../assets/svg/icons.svg';\r\nimport '../scss/Finish.scss';\r\n\r\nclass Finish extends Component {\r\n\r\n  render() {\r\n\r\n    const {\r\n      taskName,\r\n      isTaskFinished,\r\n      onTaskRemove,\r\n      onTimerRestart,\r\n      id\r\n    } = this.props;\r\n    const {\r\n      totalBreakTime,\r\n      totalBreaks,\r\n      elapsedBreakTime,\r\n      elapsedBreakTimeArray,\r\n      overallTime,\r\n      overallTimeArray\r\n    } = this.props.state;\r\n  \r\n    const breaksAmount = totalBreaks > 1\r\n      ? ` ${totalBreaks} breaks `\r\n      : totalBreaks === 1 ? ` ${totalBreaks} break ` : \" no brakes \";\r\n\r\n    const breakPercent = totalBreaks\r\n      ? ` ${Math.round(elapsedBreakTime / overallTime * 100)}%`\r\n      : \"\";\r\n\r\n    const overallTimeResult = formatTimeResult(overallTimeArray);\r\n    const breakTimeResult = formatTimeResult(elapsedBreakTimeArray, elapsedBreakTime);\r\n    const finishClass = classNames(\"Finish\", {\r\n      [`Finish--success`]: isTaskFinished,\r\n      [`Finish--failure`]: !isTaskFinished\r\n    });\r\n\r\n    return (\r\n      <section className={finishClass}>\r\n  \r\n        {/* FINISH HEADING */}\r\n        { isTaskFinished\r\n          ?\r\n          <h2 className=\"Finish__heading\">\r\n            Time is up!\r\n          </h2>\r\n          :\r\n          totalBreakTime === 0\r\n            ?\r\n            <h2 className=\"Finish__heading\">\r\n              No breaks allowed!\r\n            </h2>\r\n            :\r\n            <h2 className=\"Finish__heading\">\r\n              Too long break!\r\n            </h2>\r\n        }\r\n        {/* TASK FINISHED MESSAGE */}\r\n        { isTaskFinished\r\n          ?\r\n          <p className=\"Finish__message\">\r\n            You have finished your task: <br />\r\n            <span className=\"Finish__accent\">{`\"${taskName}\"`}</span><br />\r\n            in\r\n            <span className=\"Finish__accent\">{overallTimeResult}</span>\r\n            {`${elapsedBreakTime > 0 ? \" including break time.\" : \".\"}`} <br />\r\n            You had\r\n            <span className=\"Finish__accent\">{breaksAmount}</span>\r\n            during this task\r\n            <span className=\"Finish__accent\">{breakTimeResult}</span>\r\n            {totalBreaks ? \" long, what makes it around\" : \"\"}\r\n            <span className=\"Finish__accent\">{breakPercent}</span>\r\n            {totalBreaks ? \" of all time.\" : \".\"}\r\n          </p>\r\n          :\r\n          totalBreakTime === 0\r\n          ? <p className=\"Finish__message\">\r\n              You cannot have any breaks during this task! Try again..\r\n            </p>\r\n            :\r\n            <p className=\"Finish__message\">\r\n              You spent too much time on breaks! <br />\r\n              You had\r\n              <span className=\"Finish__accent\">{breaksAmount}</span>\r\n              during this task\r\n              <span className=\"Finish__accent\">{breakTimeResult}</span>\r\n              {totalBreaks ? \" long, what makes it around\" : \"\"}\r\n              <span className=\"Finish__accent\">{breakPercent}</span>\r\n              {totalBreaks ? \" of all time.\" : \".\"}\r\n            </p>\r\n        }\r\n        {/* RESTART BUTTON */}\r\n        <button\r\n          className=\"Finish__button Finish__button--restart\"\r\n          onClick={onTimerRestart}\r\n        >\r\n          <svg className=\"Finish__svg\" viewBox=\"0 0 100 100\">\r\n            <use href={`${icons}#retry`}/>\r\n          </svg>\r\n        </button>\r\n\r\n        {/* REMOVE BUTTON */}\r\n        <button\r\n          className=\"Finish__button Finish__button--remove\"\r\n          onClick={() => onTaskRemove(id)}\r\n        >\r\n          <svg className=\"Task__svg\" viewBox=\"0 0 512 512\">\r\n            <use href={`${icons}#remove`}/>\r\n          </svg>\r\n        </button>\r\n      </section>\r\n    );\r\n  }\r\n}\r\nexport default Finish;","import React, {Component} from 'react';\r\nimport classNames from 'classnames';\r\nimport Countdown from './Countdown';\r\nimport StopAlert from './StopAlert.js';\r\nimport Progress from './Progress';\r\nimport Controls from './Controls';\r\nimport Finish from './Finish.js';\r\nimport { getTimeArray, breaksAmount } from '../lib/handlers';\r\nimport { cardFlipTime } from '../lib/globalVariables';\r\nimport '../scss/Timer.scss';\r\n\r\nclass Timer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const {\r\n      startTime,\r\n      totalTaskTime,\r\n      totalBreakTime,\r\n      totalTaskTimeArray,\r\n      totalBreakTimeArray\r\n    } = this.props.state;\r\n\r\n    this.state = {\r\n      // visibility\r\n      isStopAlertVisible: false,\r\n      isTimerVisible: false,\r\n      // modes\r\n      isTaskTimeElapsedMode: true,\r\n      isBreakTimeElapsedMode: true,\r\n      isTaskFinished: false,\r\n      isBreakFinished: false,\r\n      // total\r\n      totalTaskTime,\r\n      totalBreakTime,\r\n      totalBreaks: 0,\r\n      // elapsed\r\n      elapsedTaskTime: 0,\r\n      elapsedTaskPercent: 0,\r\n      elapsedTaskTimeArray: ['00','00','00'],\r\n      elapsedBreakTime: 0,\r\n      elapsedBreakPercent: 0,\r\n      elapsedBreakTimeArray: ['00','00','00'],\r\n      //remaining\r\n      remainingTaskTime: 0,\r\n      remainingTaskPercent: 100,\r\n      remainingTaskTimeArray: totalTaskTimeArray,\r\n      remainingBreakTime: 0,\r\n      remainingBreakPercent: 100,\r\n      remainingBreakTimeArray: totalBreakTimeArray,\r\n      // overall\r\n      previousTime: startTime,\r\n      overallTime: 0,\r\n      overallTimeArray: ['00','00','00']\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { onCardStateChange } = this.props;\r\n\r\n    onCardStateChange({ isTaskTimeActive: true });\r\n\r\n    this.taskIntervalId = setInterval(() => this.handleTimeTick('Task'), 10);\r\n    this.breakIntervalId = setInterval(() => this.handleTimeTick('Break'), 10);\r\n\r\n    this.timeoutId = setTimeout(() => {\r\n      this.setState({\r\n        isTimerVisible: true,\r\n        previousTime: Date.now()\r\n      });\r\n      onCardStateChange({ isTimerStarted: true });\r\n    }, cardFlipTime);\r\n\r\n    this.handleRotatingStatus();\r\n  }\r\n  \r\n  componentWillUnmount() {\r\n    clearInterval(this.taskIntervalId);\r\n    clearInterval(this.breakIntervalId);\r\n    clearTimeout(this.timeoutId);\r\n    this.props.onCardStateChange({\r\n      isTaskTimeActive: false,\r\n      isBreakTimeActive: false\r\n    });\r\n  }\r\n\r\n  handleRotatingStatus = () => {\r\n    const { onCardStateChange } = this.props;\r\n    setTimeout(() => {\r\n      onCardStateChange({\r\n        isTaskRotatingIn: true,\r\n        isTaskRotatingOut: false\r\n      })\r\n    }, cardFlipTime);\r\n\r\n    setTimeout(() => {\r\n      onCardStateChange({\r\n        isTaskRotatingIn: false\r\n      })\r\n    }, cardFlipTime * 2)\r\n  };\r\n\r\n  handleTimerStop = () => {\r\n    const { onCardStateChange } = this.props;\r\n\r\n    onCardStateChange({\r\n      isTaskRotatingOut: true,\r\n      isTimerStarted: false\r\n    });\r\n\r\n    this.setState({ isStopAlertVisible: false });\r\n\r\n    this.timeoutId = setTimeout(() => {\r\n      onCardStateChange({ isTimerMounted: false });\r\n      clearTimeout(this.timeoutId);\r\n    }, cardFlipTime);\r\n\r\n    this.handleRotatingStatus();\r\n  }\r\n\r\n  handleStateChange = (object) => this.setState(object);\r\n  \r\n  handleTimeDisplayMode = () => {\r\n    const { isTaskTimeActive } = this.props.state;\r\n    const type = isTaskTimeActive ? \"Task\" : \"Break\";\r\n    this.setState(prevState => ({\r\n      [`is${type}TimeElapsedMode`]: !prevState[`is${type}TimeElapsedMode`]\r\n    }));\r\n  }\r\n\r\n  handleAlertVisibility = () => {\r\n    this.setState(prevState => ({\r\n      isStopAlertVisible: !prevState.isStopAlertVisible\r\n    }));\r\n  }\r\n\r\n  handleTimeTick = (type) => { // type = task or break\r\n\r\n    if (this.props.state[`is${type}TimeActive`] && this.props.state.isTimerStarted) {\r\n\r\n      const { previousTime, elapsedTaskTime, elapsedBreakTime } = this.state;\r\n      const { onTaskFinish, onCardStateChange } = this.props;\r\n      const totalTime = this.state[`total${type}Time`];\r\n      const elapsedTime = this.state[`elapsed${type}Time`];\r\n      const remainingTime = this.state[`remaining${type}Time`];\r\n      const overallTime = elapsedTaskTime + elapsedBreakTime;\r\n\r\n      const now = Date.now();\r\n      const elapsedTimeArray   = getTimeArray(elapsedTime);\r\n      const totalTimeArray     = getTimeArray(totalTime);\r\n      const remainingTimeArray = getTimeArray(remainingTime);\r\n      const overallTimeArray   = getTimeArray(overallTime);\r\n      const elapsedPercent   = elapsedTime / totalTime * 100;\r\n      const remainingPercent = remainingTime / totalTime * 100;\r\n\r\n      // when task time finishes\r\n      if (elapsedTime >= totalTime) {\r\n        this.setState({\r\n          [`is${type}TimeActive`]: false,\r\n          [`elapsed${type}Time`]: totalTime,\r\n          [`elapsed${type}TimeArray`]: totalTimeArray,\r\n          [`remaining${type}TimeArray`]: ['00','00','00'],\r\n          [`elapsed${type}Percent`]: 100,\r\n          [`remaining${type}Time`]: 0,\r\n          [`remaining${type}Percent`]: 0,\r\n          [`is${type}Finished`]: true,\r\n          isStopAlertVisible: false,\r\n          isFinishVisible: true,\r\n          overallTime,\r\n          overallTimeArray,\r\n        });\r\n        onCardStateChange({ [`is${type}TimeActive`]: false })\r\n        // update app state\r\n        onTaskFinish({ elapsedTaskTime, elapsedBreakTime });\r\n      // normal task time tick\r\n      } else {\r\n        this.setState({\r\n          previousTime: now,\r\n          [`elapsed${type}Time`]: elapsedTime + (now - previousTime),\r\n          [`elapsed${type}TimeArray`]: elapsedTimeArray,\r\n          [`remaining${type}Time`]: totalTime - elapsedTime,\r\n          [`remaining${type}TimeArray`]: remainingTimeArray,\r\n          [`elapsed${type}Percent`]: elapsedPercent,\r\n          [`remaining${type}Percent`]: remainingPercent\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    \r\n    const {\r\n      taskName,\r\n      isTaskTimeActive,\r\n      isBreakTimeActive\r\n    } = this.props.state;\r\n\r\n    const {\r\n      isTimerVisible,\r\n      isStopAlertVisible,\r\n      isTaskTimeElapsedMode,\r\n      isBreakTimeElapsedMode,\r\n      isTaskFinished,\r\n      isBreakFinished,\r\n      elapsedTaskPercent,\r\n      elapsedTaskTimeArray,\r\n      elapsedBreakPercent,\r\n      elapsedBreakTimeArray,\r\n      remainingTaskPercent,\r\n      remainingTaskTimeArray,\r\n      remainingBreakPercent,\r\n      remainingBreakTimeArray,\r\n      totalBreaks\r\n    } = this.state;\r\n\r\n    const {\r\n      id,\r\n      onTaskRemove,\r\n      cardRotatingMode,\r\n      onCardStateChange\r\n    } = this.props;\r\n\r\n    const timerClass = classNames(\"Timer\", {\r\n      \"Timer--visible\": isTimerVisible,\r\n      \"Timer--taskTime\": isTaskTimeActive || isTaskFinished,\r\n      \"Timer--breakTime\": isBreakTimeActive || isBreakFinished\r\n    });\r\n\r\n    return (\r\n      <section className={timerClass}>\r\n        <h2 className=\"Timer__heading\">{`\"${taskName}\"`}</h2>\r\n        <div className=\"Timer__container\">\r\n          {/* TASK TIME COUNTDOWN */}\r\n          <Countdown\r\n            modifier=\"taskTime\"\r\n            isElapsedMode={isTaskTimeElapsedMode}\r\n            elapsedTimeArray={elapsedTaskTimeArray}\r\n            remainingTimeArray={remainingTaskTimeArray}\r\n            elapsedTaskPercent={elapsedTaskPercent}\r\n            remainingTaskPercent={remainingTaskPercent}\r\n            isCountdownVisible={isTaskTimeActive || isTaskFinished}\r\n            totalBreaks={totalBreaks}\r\n          />\r\n          {/* BREAK TIME COUNTDOWN */}\r\n          <Countdown\r\n            modifier=\"breakTime\"\r\n            isElapsedMode={isBreakTimeElapsedMode}\r\n            elapsedTimeArray={elapsedBreakTimeArray}\r\n            remainingTimeArray={remainingBreakTimeArray}\r\n            elapsedTaskPercent={elapsedBreakPercent}\r\n            remainingTaskPercent={remainingBreakPercent}\r\n            isCountdownVisible={isBreakTimeActive || isBreakFinished}\r\n            totalBreaks={totalBreaks}\r\n          />\r\n        </div>\r\n        {/* BREAKS COUNTER */}\r\n        <p className=\"Timer__breaks\">\r\n          {breaksAmount(totalBreaks)}\r\n        </p>\r\n        {/* CONTROL BUTTONS */}\r\n        <Controls\r\n          isTaskTimeActive={isTaskTimeActive}\r\n          isBreakTimeActive={isBreakTimeActive}\r\n          cardRotatingMode={cardRotatingMode}\r\n          onCardStateChange={onCardStateChange}\r\n          onDisplayModeChange={this.handleTimeDisplayMode}\r\n          onTimerStateChange={this.handleStateChange}\r\n          onStopButtonClick={this.handleAlertVisibility}\r\n        />\r\n        {/* PROGRESS BAR */}\r\n        <div className=\"Timer__progress\">\r\n          <Progress\r\n            modifier=\"taskTime\"\r\n            isVisible={isTaskTimeActive || isTaskFinished}\r\n            isElapsedMode={isTaskTimeElapsedMode}\r\n            elapsedPercent={elapsedTaskPercent}\r\n            remainingPercent={remainingTaskPercent}\r\n          />\r\n          <Progress\r\n            modifier=\"breakTime\"\r\n            isVisible={isBreakTimeActive || isBreakFinished}\r\n            isElapsedMode={isBreakTimeElapsedMode}\r\n            elapsedPercent={elapsedBreakPercent}\r\n            remainingPercent={remainingBreakPercent}\r\n          />\r\n        </div>\r\n        {/* STOP TASK SECTION */}\r\n        <StopAlert\r\n          alertText=\"Do you really want to stop this task?\"\r\n          isStopAlertVisible={isStopAlertVisible}\r\n          onStopCancel={this.handleAlertVisibility}\r\n          onStopConfirm={this.handleTimerStop}\r\n        />\r\n        {/* TASK TIME EXCEEDED */}\r\n        {\r\n          isTaskFinished\r\n          ? <Finish\r\n            isTaskFinished={isTaskFinished}\r\n            taskName={taskName}\r\n            state={this.state}\r\n            onTimerStateChange={this.handleStateChange}\r\n            onTaskRemove={onTaskRemove}\r\n            onTimerRestart={this.handleTimerStop}\r\n            id={id}\r\n          />\r\n          : <div></div>\r\n        }\r\n        {/* BREAK TIME EXCEEDED */}\r\n        {\r\n          isBreakFinished\r\n          ? <Finish\r\n            isTaskFinished={isTaskFinished}\r\n            taskName={taskName}\r\n            state={this.state}\r\n            onTimerStateChange={this.handleStateChange}\r\n            onTaskRemove={onTaskRemove}\r\n            onTimerRestart={this.handleTimerStop}\r\n            id={id}\r\n          />\r\n          : <div></div>\r\n        }\r\n      </section>\r\n    );\r\n  }\r\n}\r\nexport default Timer;","import React, { Component } from 'react';\r\nimport classNames from 'classnames';\r\nimport EditableText from './EditableText.js';\r\nimport TotalTime from './TotalTime.js';\r\nimport CardButtons from './CardButtons';\r\nimport StopAlert from './StopAlert.js';\r\nimport Timer from './Timer.js';\r\nimport { validateTaskName, handleTimeChange } from '../lib/handlers';\r\nimport { cardFlipTime, animationStyle } from '../lib/globalVariables';\r\nimport icons from '../assets/svg/icons.svg';\r\nimport '../scss/Card.scss';\r\n\r\nclass Card extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.card = React.createRef();\r\n    this.transitionTime = 1000;\r\n    const {\r\n      taskName,\r\n      totalTaskTime,\r\n      totalBreakTime,\r\n      totalTaskTimeArray,\r\n      totalBreakTimeArray\r\n    } = this.props.task;\r\n\r\n    const [taskMinutes, taskSeconds] = totalTaskTimeArray;\r\n    const [breakMinutes, breakSeconds] = totalBreakTimeArray;\r\n    \r\n    this.state = {\r\n      isDragging: false,\r\n      isMaximized: true,\r\n      isTaskRotatingIn: true,\r\n      isTaskRotatingOut: false,\r\n      isTaskMounted: false,\r\n      // timer\r\n      isTimerMounted: false,\r\n      isTimerStarted: false,\r\n      isTaskTimeActive: false,\r\n      isBreakTimeActive: false,\r\n      isStopAlertVisible: false,\r\n      originalX: 0,\r\n      originalY: 0,\r\n      translateX: 0,\r\n      translateY: 0,\r\n      taskName,\r\n      taskNameLength: taskName.length,\r\n      taskMinutes,\r\n      taskSeconds,\r\n      breakMinutes,\r\n      breakSeconds,\r\n      totalTaskTime,\r\n      totalBreakTime,\r\n      totalTaskTimeArray,\r\n      totalBreakTimeArray,\r\n      isTaskNameEditMode: false,\r\n      isTaskTimeEditMode: false,\r\n      isBreakTimeEditMode: false,\r\n      isTaskNameValid: true,\r\n      isTaskTimeValid: true,\r\n      isBreakTimeValid: true\r\n    };\r\n  }\r\n  \r\n  componentDidMount = () => {\r\n    this.setState({\r\n      isTaskMounted: true\r\n    });\r\n    this.timeoutId = setTimeout(() => this.setState({\r\n      isTaskRotatingIn: false\r\n    }), cardFlipTime);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('mousemove', this.handleMouseMove);\r\n    window.removeEventListener('mouseup', this.handleMouseUp);\r\n    clearTimeout(this.timeoutId);\r\n  }\r\n\r\n  handleStateChange = (object) => this.setState(object);\r\n\r\n  getHoveredCardSizes = (index) => {\r\n    const {cardIndex, cardsSizes } = this.props;\r\n    return index >= 0\r\n    ? index !== cardIndex\r\n      ? cardsSizes[index]\r\n      : null\r\n    : null; \r\n  }\r\n  \r\n  handleCardsSizes = () => {\r\n    const { onBoardStateChange } = this.props;\r\n    const appNodes = this.card.current.parentNode.children;\r\n\r\n    const cardsSizes = [...appNodes]\r\n    .filter(node => node.classList.contains('Card'))\r\n    .map(card => {\r\n      const { offsetHeight, offsetLeft, offsetTop, offsetWidth } = card;\r\n      return {\r\n        height: offsetHeight,\r\n          width: offsetWidth,\r\n          left: offsetLeft,\r\n          top: offsetTop\r\n        }\r\n      }\r\n    );\r\n    onBoardStateChange({ cardsSizes });\r\n  }\r\n\r\n  handleCardDrag = (e) => {\r\n    const { isMaximized } = this.state;\r\n    if (!isMaximized) {\r\n      this.handleMouseDown(e);\r\n    }\r\n  }\r\n\r\n  //#region [ Horizon ] MOUSE EVENTS\r\n\r\n  handleMouseDown = ({ clientX, clientY }) => {\r\n    const { onBoardStateChange } = this.props;\r\n\r\n    window.addEventListener('mousemove', this.handleMouseMove);\r\n    window.addEventListener('mouseup', this.handleMouseUp);\r\n      \r\n    this.setState({\r\n      originalX: clientX + window.scrollX,\r\n      originalY: clientY + window.scrollY\r\n    });\r\n    this.handleCardsSizes();\r\n\r\n    onBoardStateChange({\r\n      isPlaceholderVisible: true\r\n    });\r\n  };\r\n\r\n  handleMouseMove = ({ clientX, clientY }) => {\r\n    \r\n    const { onBoardStateChange, cardIndex, cardsSizes } = this.props;\r\n    const xPosition = clientX + window.scrollX;\r\n    const yPosition = clientY + window.scrollY;\r\n    const draggedCardSizes = cardsSizes[cardIndex];\r\n\r\n    // find index of hovered card\r\n    const hoveredCardIndex = [...cardsSizes].findIndex(card => {\r\n      const { left, top, width, height } = card;\r\n      const isInsideHorizontally = xPosition >= left && xPosition <= left + width;\r\n      const isInsideVertically = yPosition >= top && yPosition <= top + height;\r\n      //return isInsideHorizontally && isInsideVertically;\r\n      return isInsideHorizontally && isInsideVertically;\r\n    });\r\n    const hoveredCardSizes = this.getHoveredCardSizes(hoveredCardIndex);\r\n\r\n    // set translated position of dragged card\r\n    this.setState(prevState => ({\r\n      translateX: xPosition - prevState.originalX,\r\n      translateY: yPosition - prevState.originalY,\r\n      isDragging: true,\r\n    }));\r\n\r\n    // set translation offsets of hovered card\r\n    if (hoveredCardSizes) {;\r\n      const offsetX = draggedCardSizes.left - hoveredCardSizes.left;\r\n      const offsetY = draggedCardSizes.top - hoveredCardSizes.top;\r\n  \r\n      onBoardStateChange({\r\n        hoveredOffsetX: offsetX,\r\n        hoveredOffsetY: offsetY\r\n      });\r\n    }\r\n\r\n    onBoardStateChange({\r\n      isDraggingMode: true,\r\n      draggedCardIndex: cardIndex,\r\n      hoveredCardIndex: cardIndex !== hoveredCardIndex ? hoveredCardIndex : -1\r\n    });\r\n  };\r\n  \r\n  handleMouseUp = () => {\r\n\r\n    const {\r\n      onBoardStateChange,\r\n      draggedCardIndex,\r\n      hoveredCardIndex,\r\n      cardsSizes } = this.props;\r\n    const delay = 30;    \r\n    const draggedCardSizes = cardsSizes[draggedCardIndex];\r\n    const hoveredCardSizes = this.getHoveredCardSizes(hoveredCardIndex);\r\n      \r\n    window.removeEventListener('mousemove', this.handleMouseMove);\r\n    window.removeEventListener('mouseup', this.handleMouseUp);\r\n\r\n    // if there is no other card hovered\r\n    if (hoveredCardIndex < 0) {\r\n      this.setState({\r\n        originalX: 0,\r\n        originalY: 0,\r\n        translateX: 0,\r\n        translateY: 0,\r\n        isDragging: false\r\n      });\r\n\r\n    } else {\r\n\r\n      const { onTaskOrderChange } = this.props;\r\n      \r\n      if (hoveredCardSizes) {\r\n        const offsetX = hoveredCardSizes.left - draggedCardSizes.left;\r\n        const offsetY = hoveredCardSizes.top - draggedCardSizes.top;\r\n\r\n        const draggedOffsetX =  -1 * (offsetX - this.state.translateX);\r\n        const draggedOffsetY = -1 * (offsetY - this.state.translateY);\r\n\r\n        this.setState({\r\n          originalX: 0,\r\n          originalY: 0,\r\n          translateX: draggedOffsetX,\r\n          translateY: draggedOffsetY\r\n        });\r\n      }\r\n\r\n      const timeoutId = setTimeout(() => {\r\n        this.setState({\r\n          translateX: 0,\r\n          translateY: 0,\r\n          isDragging: false\r\n        });\r\n        this.handleCardsSizes();\r\n        clearTimeout(timeoutId);\r\n      }, delay);\r\n      \r\n      onTaskOrderChange(draggedCardIndex, hoveredCardIndex);\r\n    }\r\n\r\n    onBoardStateChange({\r\n      isDraggingMode: false\r\n    });\r\n\r\n    const timeoutId = setTimeout(() => {\r\n      onBoardStateChange({\r\n        draggedCardIndex: -1,\r\n        hoveredCardIndex: -1\r\n      });\r\n      clearTimeout(timeoutId);\r\n    }, delay);\r\n  };\r\n\r\n  //#endregion\r\n  \r\n  handleKeyPress = (key) => {\r\n    const {\r\n      isTaskNameEditMode,\r\n      isTaskTimeEditMode,\r\n      isBreakTimeEditMode\r\n    } = this.state;\r\n    const editModeActive = isTaskNameEditMode || isTaskTimeEditMode || isBreakTimeEditMode;\r\n    \r\n    if (key === \"Enter\" && editModeActive) this.acceptEditChange();\r\n  }\r\n  \r\n  handleMaximizeCard = () => {\r\n    const { onBoardStateChange } = this.props;\r\n    const { isMaximized } = this.state;\r\n    if (!isMaximized) {\r\n      this.setState({ isMaximized: true });\r\n      onBoardStateChange({ isPlaceholderVisible: false });\r\n    }\r\n  }\r\n\r\n  handleTaskNameChange = (value) => {\r\n    this.setState({\r\n      taskName: value,\r\n      taskNameLength: value.length,\r\n      isTaskNameValid: validateTaskName(value)\r\n    });\r\n  }\r\n  \r\n  handleTimeChange = (minutes, seconds, units, type) => {\r\n    const object = handleTimeChange(minutes, seconds, units, type);\r\n  \r\n    if (type === 'task') {\r\n      if (units === 'minutes') {\r\n        const {\r\n          taskMinutes, totalTaskTime, totalTaskTimeArray, isTaskTimeValid\r\n        } = object;\r\n        this.setState({\r\n          taskMinutes, totalTaskTime, totalTaskTimeArray, isTaskTimeValid\r\n        });\r\n      } else if (units === 'seconds') {\r\n        const {\r\n          taskSeconds, totalTaskTime, totalTaskTimeArray, isTaskTimeValid\r\n        } = object;\r\n        this.setState({\r\n          taskSeconds, totalTaskTime, totalTaskTimeArray, isTaskTimeValid\r\n        });\r\n      }\r\n    } else if (type === 'break') {\r\n      if (units === 'minutes') {\r\n        const {\r\n          breakMinutes, totalBreakTime, totalBreakTimeArray, isBreakTimeValid\r\n        } = object;\r\n        this.setState({\r\n          breakMinutes, totalBreakTime, totalBreakTimeArray, isBreakTimeValid\r\n        });\r\n      } else if (units === 'seconds') {\r\n        const {\r\n          breakSeconds, totalBreakTime, totalBreakTimeArray, isBreakTimeValid\r\n        } = object;\r\n        this.setState({\r\n          breakSeconds, totalBreakTime, totalBreakTimeArray, isBreakTimeValid\r\n        });\r\n      }\r\n    }\r\n    //this.setState({ alertTimeFlag });\r\n  }\r\n  \r\n  handleEditMode = (input) => {\r\n    const { isMaximized } = this.state;\r\n    if (isMaximized) {\r\n      this.setState({ [`is${input}EditMode`]: true });\r\n    }\r\n  }\r\n  \r\n  acceptEditChange = () => {\r\n    const {\r\n      taskName,\r\n      totalTaskTime,\r\n      totalBreakTime,\r\n      totalTaskTimeArray,\r\n      totalBreakTimeArray,\r\n      isTaskNameValid,\r\n      isTaskTimeValid,\r\n      isBreakTimeValid\r\n    } = this.state;\r\n\r\n    const { id } = this.props.task;\r\n    const { onTaskEdit } = this.props;\r\n    const [ taskMinutes, taskSeconds ] = totalTaskTimeArray;\r\n    const [ breakMinutes, breakSeconds ] = totalBreakTimeArray;\r\n  \r\n    if (isTaskNameValid && isTaskTimeValid && isBreakTimeValid) {\r\n      this.setState({\r\n        isTaskNameEditMode: false,\r\n        isTaskTimeEditMode: false,\r\n        isBreakTimeEditMode: false,\r\n        taskMinutes,\r\n        taskSeconds,\r\n        breakMinutes,\r\n        breakSeconds,\r\n      });\r\n      const editedTask = {\r\n        taskName,\r\n        taskMinutes,\r\n        taskSeconds,\r\n        breakMinutes,\r\n        breakSeconds,\r\n        totalTaskTime,\r\n        totalBreakTime,\r\n        totalTaskTimeArray,\r\n        totalBreakTimeArray,\r\n        id\r\n      }\r\n      onTaskEdit(editedTask, 'edit');\r\n    }\r\n  }\r\n  \r\n  handleAlertVisibility = () => {\r\n    this.setState(prevState => ({\r\n      isStopAlertVisible: !prevState.isStopAlertVisible\r\n    }));\r\n  }\r\n  \r\n  handleTaskRemove = () => {\r\n    const { id } = this.props.task;\r\n    const { onTaskRemove } = this.props;\r\n    onTaskRemove(id);\r\n  }\r\n  \r\n  handleStartButton = () => {\r\n    this.setState({\r\n      isTaskRotatingOut: true,\r\n      isTimerMounted: true\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    const {\r\n      task: { id },\r\n      cardIndex,\r\n      isDraggingMode,\r\n      draggedCardIndex,\r\n      hoveredCardIndex,\r\n      hoveredOffsetX,\r\n      hoveredOffsetY,\r\n      onBoardStateChange,\r\n      onTaskFinish\r\n    } = this.props;\r\n    \r\n    \r\n    const {\r\n      isDragging,\r\n      translateX,\r\n      translateY,\r\n      isMaximized,\r\n      isTaskMounted,\r\n      isTimerStarted,\r\n      isTaskTimeActive,\r\n      isTaskRotatingIn,\r\n      isTaskRotatingOut,\r\n      isStopAlertVisible,\r\n      taskName,\r\n      taskNameLength,\r\n      taskMinutes,\r\n      taskSeconds,\r\n      breakMinutes,\r\n      breakSeconds,\r\n      isTaskNameEditMode,\r\n      isTaskTimeEditMode,\r\n      isBreakTimeEditMode,\r\n      isTaskNameValid,\r\n      isTaskTimeValid,\r\n      isBreakTimeValid\r\n    } = this.state;\r\n\r\n    const editModeActive = isTaskNameEditMode\r\n    || isTaskTimeEditMode\r\n    || isBreakTimeEditMode;\r\n    const inputInvalid = !isTaskNameValid\r\n    || !isTaskTimeValid\r\n    || !isBreakTimeValid;\r\n    const cardRotatingMode = isTaskRotatingIn || isTaskRotatingOut;\r\n    const taskNameDisabled = isTaskTimeEditMode\r\n    || isBreakTimeEditMode\r\n    || cardRotatingMode;\r\n    const taskTimeDisabled = isTaskNameEditMode\r\n    || isBreakTimeEditMode\r\n    || cardRotatingMode;\r\n    const breakTimeDisabled = isTaskNameEditMode\r\n    || isTaskTimeEditMode\r\n    || cardRotatingMode;\r\n\r\n    const cardStyle = cardIndex === hoveredCardIndex && isDraggingMode\r\n      ? { transform: `translate(${hoveredOffsetX}px, ${hoveredOffsetY}px)` }\r\n      : { transform: `translate(${translateX}px, ${translateY}px)` };\r\n  \r\n    const cardClass = classNames(\"Card\", {\r\n      \"Card--dragged\": isDragging,\r\n      \"Card--hovered\": cardIndex === hoveredCardIndex && isDraggingMode,\r\n      \"Card--noTransition\": isDragging ||\r\n      (cardIndex === draggedCardIndex && hoveredCardIndex !== -1)\r\n    });\r\n\r\n    const taskClass = classNames(\"Task\", {\r\n      \"Task--visible\": isTaskMounted,\r\n      \"Task--maximized\": isMaximized,\r\n      \"Task--editMode\": editModeActive,\r\n      \"Task--taskActive\": isTaskTimeActive && isTimerStarted,\r\n      \"Task--rotateIn\": isTaskRotatingIn && isTaskMounted,\r\n      \"Task--rotateOut\": isTaskRotatingOut && isTaskMounted\r\n    });\r\n\r\n    const startButtonClass = classNames(\"Task__startButton\", {\r\n      \"Task__startButton--maximized\": isMaximized,\r\n      \"Task__startButton--disabled\": editModeActive || cardRotatingMode\r\n    });\r\n\r\n    return (\r\n      <div\r\n        className={cardClass}\r\n        style={cardStyle}\r\n        onMouseDown={this.handleCardDrag}\r\n        ref={this.card}\r\n      >\r\n        <div\r\n          className={taskClass}\r\n          style={animationStyle}\r\n          onClick={this.handleMaximizeCard}\r\n        >\r\n          {/* TASK  NAME */}\r\n          <EditableText\r\n            output={taskName}\r\n            isValid={isTaskNameValid}\r\n            isMaximized={isMaximized}\r\n            taskNameLength={taskNameLength}\r\n            isDisabled={taskNameDisabled}\r\n            isEditMode={isTaskNameEditMode}\r\n            onEditModeChange={() => this.handleEditMode('TaskName')}\r\n            onTaskNameChange={this.handleTaskNameChange}\r\n          />\r\n\r\n          {/* TOTAL TASK TIME */}\r\n          <TotalTime\r\n            id={id}\r\n            labelName=\"Task Time\"\r\n            modifier=\"taskTime\"\r\n            isMaximized={isMaximized}\r\n            minutes={taskMinutes}\r\n            seconds={taskSeconds}\r\n            isValid={isTaskTimeValid}\r\n            isDisabled={taskTimeDisabled}\r\n            onEditModeChange={() => this.handleEditMode('TaskTime')}\r\n            isEditMode={isTaskTimeEditMode}\r\n            isCardEditMode={editModeActive}\r\n            onKeyPress={this.handleKeyPress}\r\n            onMinutesChange={(value) => \r\n              this.handleTimeChange(value, taskSeconds, 'minutes', 'task')}\r\n            onSecondsChange={(value) => \r\n              this.handleTimeChange(taskMinutes, value, 'seconds', 'task')}\r\n          />\r\n          \r\n          {/* TOTAL BREAK TIME */}\r\n          <TotalTime\r\n            id={id}\r\n            labelName=\"Break Time\"\r\n            modifier=\"breakTime\"\r\n            isMaximized={isMaximized}\r\n            minutes={breakMinutes}\r\n            seconds={breakSeconds}\r\n            isValid={isBreakTimeValid}\r\n            isDisabled={breakTimeDisabled}\r\n            onEditModeChange={() => this.handleEditMode('BreakTime')}\r\n            isEditMode={isBreakTimeEditMode}\r\n            isCardEditMode={editModeActive}\r\n            onKeyPress={this.handleKeyPress}\r\n            onMinutesChange={(value) => \r\n              this.handleTimeChange(value, breakSeconds, 'minutes', 'break')}\r\n            onSecondsChange={(value) => \r\n              this.handleTimeChange(breakMinutes, value, 'seconds', 'break')}\r\n          />\r\n\r\n          {/* CARD BUTTONS */}\r\n          <CardButtons\r\n            isMaximized={isMaximized}\r\n            editModeActive={editModeActive}\r\n            inputInvalid={inputInvalid}\r\n            cardRotatingMode={cardRotatingMode}\r\n            onAcceptButtonClick={this.acceptEditChange}\r\n            onRemoveButtonClick={this.handleAlertVisibility}\r\n            onTaskStateChange={this.handleStateChange}\r\n            onBoardStateChange={onBoardStateChange}\r\n            onDrag={this.handleMouseDown}\r\n          />\r\n\r\n          {/* START BUTTON */}\r\n          <button\r\n            className={startButtonClass}\r\n            disabled={editModeActive || cardRotatingMode}\r\n            onClick={this.handleStartButton}\r\n          >\r\n            <svg className=\"Task__svg\" viewBox=\"0 0 512 512\">\r\n              <use href={`${icons}#play`} />\r\n            </svg>\r\n          </button>\r\n          \r\n          {/* TIMER COMPONENT */}\r\n          {\r\n            this.state.isTimerMounted\r\n            ? <Timer\r\n                state={this.state}\r\n                id={id}\r\n                onTaskRemove={this.handleTaskRemove}\r\n                cardRotatingMode={cardRotatingMode}\r\n                onCardStateChange={this.handleStateChange}\r\n                onTaskFinish={onTaskFinish}\r\n              />\r\n            : <div className=\"empty\"></div>\r\n          }\r\n\r\n          {/* REMOVE TASK ALERT */}\r\n          <StopAlert\r\n            alertText=\"Do you really want to remove this task?\"\r\n            isStopAlertVisible={isStopAlertVisible}\r\n            onStopCancel={this.handleAlertVisibility}\r\n            onStopConfirm={(id) => this.handleTaskRemove(id)}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Card;","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport '../scss/CardPlaceholder.scss';\r\n\r\nconst CardPlaceholder = (props) => {\r\n\r\n  const { placeholderIndex, cardsSizes, isPlaceholderVisible } = props;\r\n  const placeholder = cardsSizes[placeholderIndex];\r\n  let placeholderStyle = {};\r\n\r\n  if (placeholder) {\r\n    const { top, left, width, height } = placeholder;\r\n    placeholderStyle = {\r\n      top,\r\n      left,\r\n      width,\r\n      height\r\n    }\r\n  }\r\n\r\n  const placeholderClass = classNames('CardPlaceholder', {\r\n    'CardPlaceholder--visible': isPlaceholderVisible\r\n  });\r\n  \r\n  return (\r\n\r\n    <div className={placeholderClass} style={placeholderStyle}></div>\r\n  );\r\n}\r\nexport default CardPlaceholder;","import React, { Component } from 'react';\r\nimport classNames from 'classnames';\r\nimport Sidebar from './Sidebar';\r\nimport Creator from './Creator';\r\nimport Card from './Card';\r\nimport CardPlaceholder from './CardPlaceholder';\r\nimport icons from '../assets/svg/icons.svg';\r\nimport '../scss/Board.scss';\r\n\r\nclass Board extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isCreatorVisible: false,\r\n      isPlaceholderVisible: false,\r\n      isSidebarVisible: false,\r\n      // cards\r\n      isDraggingMode: false,\r\n      cardsSizes: [],\r\n      draggedCardIndex: -1,\r\n      hoveredCardIndex: -1,\r\n      hoveredOffsetX: 0,\r\n      hoveredOffsetY: 0\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    window.addEventListener('resize', this.handleWindowResize);\r\n  }\r\n\r\n  componentWillUnmount = () => {\r\n    window.removeEventListener('resize', this.handleWindowResize);\r\n  }\r\n\r\n  handleWindowResize = () => {\r\n    this.setState({\r\n      isPlaceholderVisible: false\r\n    });\r\n  }\r\n\r\n  handleStateChange = (object) => this.setState(object);\r\n\r\n  handleSidebar = (e) => {\r\n    this.setState(prevState => ({\r\n      isSidebarVisible: !prevState.isSidebarVisible\r\n    }));\r\n  }\r\n\r\n  handleSidebarQuit = ({target}) => {\r\n    if (/Board--sidebarMode/.test(target.className)) this.handleSidebar();\r\n  }\r\n\r\n  handleTaskRemove = (id) => {\r\n    const { onTaskRemove } = this.props;\r\n    onTaskRemove(id);\r\n    this.setState({\r\n      isPlaceholderVisible: false\r\n    });\r\n  }\r\n  \r\n  handleNewTaskButton = () => {\r\n    this.setState({\r\n      isCreatorVisible: true,\r\n      isPlaceholderVisible: false\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      users,\r\n      loggedUserId,\r\n      onUserUpdate,\r\n      onTaskOrderChange,\r\n      onUserLogout,\r\n      onUserRemove,\r\n      onTaskFinish,\r\n      onTaskEdit\r\n    } = this.props;\r\n\r\n    const {\r\n      isCreatorVisible,\r\n      isSidebarVisible,\r\n      isPlaceholderVisible,\r\n      isDraggingMode,\r\n      hoveredCardIndex,\r\n      draggedCardIndex,\r\n      hoveredOffsetX,\r\n      hoveredOffsetY,\r\n      cardsSizes\r\n    } = this.state;\r\n\r\n    const { tasks } = users[loggedUserId];\r\n    \r\n    //#region [ Horizon ] CLASS NAMES\r\n\r\n    const boardClass = classNames('Board', {\r\n      'Board--sidebarMode': isSidebarVisible\r\n    });\r\n\r\n    const newTaskButtonClass = classNames('Board__newTaskButton', {\r\n      'Board__newTaskButton--visible': !isCreatorVisible\r\n    });\r\n\r\n    const creatorContainerClass = classNames('Board__creator', {\r\n      'Board__creator--maximized': isCreatorVisible\r\n    });\r\n\r\n    const boardLogoClass = classNames('Board__logo', {\r\n      'Board__logo--visible': isSidebarVisible\r\n    });\r\n\r\n    //#endregion\r\n\r\n    return (\r\n      <section className={boardClass} /* onClick={this.handleSidebarQuit} */>\r\n        <header className=\"Board__header\">\r\n\r\n          {/* TEXT LOGO */}\r\n          <h2 className={boardLogoClass}>\r\n            task<span className=\"Board__logo--color\">Timer</span>\r\n          </h2>\r\n\r\n          {/* BURGER BUTTON */}\r\n          <button className=\"Board__burger\" onClick={this.handleSidebar}>\r\n            <svg className=\"Board__burgerSvg\" viewBox=\"0 0 100 100\">\r\n              <use href={`${icons}#burger`}></use>\r\n            </svg>\r\n          </button>\r\n        </header>\r\n\r\n        {/* SIDEBAR */}\r\n        <Sidebar\r\n          block=\"userEdit\"\r\n          isSidebarVisible={isSidebarVisible}\r\n          users={users}\r\n          loggedUserId={loggedUserId}\r\n          onUserUpdate={onUserUpdate}\r\n          onUserLogout={onUserLogout}\r\n          onUserRemove={onUserRemove}\r\n        />\r\n\r\n        {/* TASK CARDS */}\r\n        {tasks.map((task, index) => (\r\n          <Card\r\n            key={`card-${task.id}`}\r\n            task={task}\r\n            cardIndex={index}\r\n            onTaskOrderChange={onTaskOrderChange}\r\n            onBoardStateChange={this.handleStateChange}\r\n            onTaskRemove={this.handleTaskRemove}\r\n            isDraggingMode={isDraggingMode}\r\n            hoveredCardIndex={hoveredCardIndex}\r\n            draggedCardIndex={draggedCardIndex}\r\n            hoveredOffsetX={hoveredOffsetX}\r\n            hoveredOffsetY={hoveredOffsetY}\r\n            cardsSizes={cardsSizes}\r\n            onTaskFinish={onTaskFinish}\r\n            onTaskEdit={onTaskEdit}\r\n          />\r\n        ))}\r\n\r\n        {/* CARDS PLACEHOLDERS */}\r\n        {tasks.map((task, index) => (\r\n          <CardPlaceholder\r\n            key={`placeholder-${index}`}\r\n            placeholderIndex={index}\r\n            cardsSizes={cardsSizes}\r\n            isPlaceholderVisible={isPlaceholderVisible}\r\n          />\r\n        ))}\r\n\r\n        {/* CREATE NEW TASK */}\r\n        <section className={creatorContainerClass}>\r\n          <button\r\n            className={newTaskButtonClass}\r\n            onClick={this.handleNewTaskButton}\r\n          >\r\n            Add New Task\r\n          </button>\r\n          {\r\n            isCreatorVisible\r\n            ? <Creator\r\n                isVisible={isCreatorVisible}\r\n                onBoardStateChange={this.handleStateChange}\r\n                onTaskEdit={onTaskEdit}\r\n              />\r\n            : <div className=\"empty\"></div>\r\n          }\r\n        </section>\r\n      </section>\r\n    );\r\n  }\r\n}\r\nexport default Board;","import React from 'react';\r\nimport icons from '../assets/svg/logo.svg';\r\nimport '../scss/Logo.scss';\r\n\r\nconst Logo = () => {\r\n  return (\r\n    <div className=\"Logo\">\r\n      <svg className=\"Logo__base\" viewBox=\"0 0 512 612\">\r\n        <use href={`${icons}#logoBase`}></use>\r\n      </svg>\r\n      <svg className=\"Logo__letter\" viewBox=\"0 0 512 612\">\r\n        <use href={`${icons}#logoLetter`}></use>\r\n      </svg>\r\n      <svg className=\"Logo__shadow Logo__shadow--base\" viewBox=\"0 0 512 612\">\r\n        <use href={`${icons}#logoBaseShadow`}></use>\r\n      </svg>\r\n      <svg className=\"Logo__shadow Logo__shadow--letter\" viewBox=\"0 0 512 612\">\r\n        <use href={`${icons}#logoLetterShadow`}></use>\r\n      </svg>\r\n    </div>\r\n  );\r\n}\r\nexport default Logo;","export default [\r\n  {\r\n    \"login\": \"Jakub\",\r\n    \"password\": \"password\",\r\n    \"date\": [15,0,2020,16,6],\r\n    \"rememberMe\": true,\r\n    \"stats\": {\r\n      \"finishedTasks\": 411,\r\n      \"avgTaskTime\": 0,\r\n      \"avgBreakTime\": 0,\r\n      \"avgTasksPerDay\": 0,\r\n      \"dateCreated\": null,\r\n      \"totalTaskTime\": 943425654,\r\n      \"totalBreakTime\": 126456565\r\n    },\r\n    \"tasks\": [\r\n      {\r\n        taskName: \"Add new feature to TaskTimer App\",\r\n        taskMinutes: 25,\r\n        taskSeconds: 0,\r\n        breakMinutes: 8,\r\n        breakSeconds: 0,\r\n        totalTaskTime: 1500000,\r\n        totalBreakTime: 480000,\r\n        totalTaskTimeArray: [\"25\",\"00\",\"00\"],\r\n        totalBreakTimeArray: [\"08\",\"00\",\"00\"],\r\n        id: 1111111111\r\n      },\r\n      {\r\n        taskName: \"Stretch your neck\",\r\n        taskMinutes: 0,\r\n        taskSeconds: 15,\r\n        breakMinutes: 0,\r\n        breakSeconds: 5,\r\n        totalTaskTime: 15000,\r\n        totalBreakTime: 5000,\r\n        totalTaskTimeArray: [\"00\",\"15\",\"00\"],\r\n        totalBreakTimeArray: [\"00\",\"05\",\"00\"],\r\n        id: 1111111112\r\n      },\r\n      {\r\n        taskName: \"Do quick physical exercises\",\r\n        taskMinutes: 8,\r\n        taskSeconds: 30,\r\n        breakMinutes: 1,\r\n        breakSeconds: 30,\r\n        totalTaskTime: 510000,\r\n        totalBreakTime: 90000,\r\n        totalTaskTimeArray: [\"08\",\"30\",\"00\"],\r\n        totalBreakTimeArray: [\"01\",\"30\",\"00\"],\r\n        id: 1111111113\r\n      },\r\n      {\r\n        taskName: \"Update linkedIn profile\",\r\n        taskMinutes: 30,\r\n        taskSeconds: 0,\r\n        breakMinutes: 10,\r\n        breakSeconds: 0,\r\n        totalTaskTime: 1800000,\r\n        totalBreakTime: 600000,\r\n        totalTaskTimeArray: [\"30\",\"00\",\"00\"],\r\n        totalBreakTimeArray: [\"10\",\"00\",\"00\"],\r\n        id: 1111111114\r\n      },\r\n      {\r\n        taskName: \"Take a breath\",\r\n        taskMinutes: 0,\r\n        taskSeconds: 5,\r\n        breakMinutes: 0,\r\n        breakSeconds: 0,\r\n        totalTaskTime: 5000,\r\n        totalBreakTime: 0,\r\n        totalTaskTimeArray: [\"00\",\"05\",\"00\"],\r\n        totalBreakTimeArray: [\"00\",\"00\",\"00\"],\r\n        id: 1111111115\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"login\": \"Anna P\",\r\n    \"password\": \"password\",\r\n    \"date\": [12,10,2019,18,12],\r\n    \"rememberMe\": false,\r\n    \"stats\": {\r\n      \"finishedTasks\": 1026,\r\n      \"avgTaskTime\": 0,\r\n      \"avgBreakTime\": 0,\r\n      \"avgTasksPerDay\": 0,\r\n      \"dateCreated\": null,\r\n      \"totalTaskTime\": 2487251436,\r\n      \"totalBreakTime\": 802548951\r\n    },\r\n    \"tasks\": [\r\n      {\r\n        taskName: \"Make a training job interview with Jakub\",\r\n        taskMinutes: \"27\",\r\n        taskSeconds: \"00\",\r\n        breakMinutes: \"8\",\r\n        breakSeconds: \"\",\r\n        totalTaskTime: 1620000,\r\n        totalBreakTime: 480000,\r\n        totalTaskTimeArray: [\"27\", \"00\", \"00\"],\r\n        totalBreakTimeArray: [\"08\", \"00\", \"00\"],\r\n        id: 1111111116\r\n      },\r\n      {\r\n        taskName: \"Feed the cat\",\r\n        taskMinutes: \"04\",\r\n        taskSeconds: \"00\",\r\n        breakMinutes: \"00\",\r\n        breakSeconds: \"00\",\r\n        totalTaskTime: 240000,\r\n        totalBreakTime: 0,\r\n        totalTaskTimeArray: [\"04\", \"00\", \"00\"],\r\n        totalBreakTimeArray: [\"00\", \"00\", \"00\"],\r\n        id: 1111111117\r\n      },\r\n      {\r\n        taskName: \"Arrange some meetings with clients for tomorrow\",\r\n        taskMinutes: \"25\",\r\n        taskSeconds: \"00\",\r\n        breakMinutes: \"08\",\r\n        breakSeconds: \"00\",\r\n        totalTaskTime: 1500000,\r\n        totalBreakTime: 480000,\r\n        totalTaskTimeArray: [\"25\", \"00\", \"00\"],\r\n        totalBreakTimeArray: [\"08\", \"00\", \"00\"],\r\n        id: 1111111118\r\n      },\r\n      {\r\n        taskName: \"Buy new shoes\",\r\n        taskMinutes: \"15\",\r\n        taskSeconds: \"\",\r\n        breakMinutes: \"2\",\r\n        breakSeconds: \"\",\r\n        totalTaskTime: 900000,\r\n        totalBreakTime: 120000,\r\n        totalTaskTimeArray: [\"15\", \"00\", \"00\"],\r\n        totalBreakTimeArray: [\"02\", \"00\", \"00\"],\r\n        id: 1111111119\r\n      },\r\n      {\r\n        taskName: \"Do research about climate change\",\r\n        taskMinutes: \"30\",\r\n        taskSeconds: \"\",\r\n        breakMinutes: \"12\",\r\n        breakSeconds: \"\",\r\n        totalTaskTime: 1800000,\r\n        totalBreakTime: 720000,\r\n        totalTaskTimeArray: [\"30\", \"00\", \"00\"],\r\n        totalBreakTimeArray: [\"12\", \"00\", \"00\"],\r\n        id: 1111111120\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"login\": \"Agnieszka\",\r\n    \"password\": \"password\",\r\n    \"date\": [3,2,2020,14,38],\r\n    \"rememberMe\": false,\r\n    \"stats\": {\r\n      \"finishedTasks\": 97,\r\n      \"avgTaskTime\": 0,\r\n      \"avgBreakTime\": 0,\r\n      \"avgTasksPerDay\": 0,\r\n      \"dateCreated\": null,\r\n      \"totalTaskTime\": 214548546,\r\n      \"totalBreakTime\": 75455844\r\n    },\r\n    \"tasks\": [\r\n      {\r\n        taskName: \"Study for the exam\",\r\n        taskMinutes: \"25\",\r\n        taskSeconds: \"\",\r\n        breakMinutes: \"8\",\r\n        breakSeconds: \"\",\r\n        totalTaskTime: 1500000,\r\n        totalBreakTime: 480000,\r\n        totalTaskTimeArray: [\"25\", \"00\", \"00\"],\r\n        totalBreakTimeArray: [\"08\", \"00\", \"00\"],\r\n        id: 1111111121\r\n      },\r\n      {\r\n        taskName: \"Bake some cookies\",\r\n        taskMinutes: \"35\",\r\n        taskSeconds: \"\",\r\n        breakMinutes: \"10\",\r\n        breakSeconds: \"\",\r\n        totalTaskTime: 2100000,\r\n        totalBreakTime: 600000,\r\n        totalTaskTimeArray: [\"35\", \"00\", \"00\"],\r\n        totalBreakTimeArray: [\"10\", \"00\", \"00\"],\r\n        id: 1111111122\r\n      },\r\n      {\r\n        taskName: \"Read some news\",\r\n        taskMinutes: \"15\",\r\n        taskSeconds: \"\",\r\n        breakMinutes: \"2\",\r\n        breakSeconds: \"\",\r\n        totalTaskTime: 900000,\r\n        totalBreakTime: 120000,\r\n        totalTaskTimeArray: [\"15\", \"00\", \"00\"],\r\n        totalBreakTimeArray: [\"02\", \"00\", \"00\"],\r\n        id: 1111111123\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"login\": \"Aleksander\",\r\n    \"password\": \"password\",\r\n    \"date\": [16,1,2020,14,58],\r\n    \"rememberMe\": false,\r\n    \"stats\": {\r\n      \"finishedTasks\": 202,\r\n      \"avgTaskTime\": 0,\r\n      \"avgBreakTime\": 0,\r\n      \"avgTasksPerDay\": 0,\r\n      \"dateCreated\": null,\r\n      \"totalTaskTime\": 455102045,\r\n      \"totalBreakTime\": 155544784\r\n    },\r\n    \"tasks\": [\r\n      {\r\n        taskName: \"Prepare 3d printer for a new project\",\r\n        taskMinutes: \"25\",\r\n        taskSeconds: \"00\",\r\n        breakMinutes: \"09\",\r\n        breakSeconds: \"00\",\r\n        totalTaskTime: 1500000,\r\n        totalBreakTime: 540000,\r\n        totalTaskTimeArray: [\"25\", \"00\", \"00\"],\r\n        totalBreakTimeArray: [\"09\", \"00\", \"00\"],\r\n        id: 1111111124\r\n      },\r\n      {\r\n        taskName: \"Meet the client\",\r\n        taskMinutes: \"40\",\r\n        taskSeconds: \"00\",\r\n        breakMinutes: \"00\",\r\n        breakSeconds: \"00\",\r\n        totalTaskTime: 2400000,\r\n        totalBreakTime: 0,\r\n        totalTaskTimeArray: [\"40\", \"00\", \"00\"],\r\n        totalBreakTimeArray: [\"00\", \"00\"],\r\n        id: 1111111125\r\n      },\r\n      {\r\n        taskName: \"Fix the kitchen's sink\",\r\n        taskMinutes: \"30\",\r\n        taskSeconds: \"\",\r\n        breakMinutes: \"5\",\r\n        breakSeconds: \"\",\r\n        totalTaskTime: 1800000,\r\n        totalBreakTime: 300000,\r\n        totalTaskTimeArray: [\"30\", \"00\", \"00\"],\r\n        totalBreakTimeArray: [\"05\", \"00\", \"00\"],\r\n        id: 1111111126\r\n      },\r\n      {\r\n        taskName: \"Buy a new keyboard\",\r\n        taskMinutes: \"20\",\r\n        taskSeconds: \"\",\r\n        breakMinutes: \"4\",\r\n        breakSeconds: \"\",\r\n        totalTaskTime: 1200000,\r\n        totalBreakTime: 240000,\r\n        totalTaskTimeArray: [\"20\", \"00\", \"00\"],\r\n        totalBreakTimeArray: [\"04\", \"00\", \"00\"],\r\n        id: 1111111127\r\n      }\r\n    ]\r\n  }\r\n]","import React, {Component} from \"react\";\r\nimport Intro from \"./Intro\";\r\nimport UserPanel from \"./UserPanel\";\r\nimport Board from \"./Board\";\r\nimport Logo from \"./Logo\";\r\nimport initialUsers from \"../lib/initialUsers\";\r\nimport {makeTwoDigits, getTotalDays, getTimeArray} from \"../lib/handlers\";\r\nimport \"../scss/App.scss\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      // visibility\r\n      isAppLoaded: false,\r\n      isIntroVisible: true,\r\n      isUserPanelVisible: true,\r\n      isBoardVisible: false,\r\n      // users\r\n      users: null,\r\n      loggedUserId: \"\",\r\n      createdAt: null,\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    // update app state from local storage\r\n    if (localStorage.getItem(\"taskTimerUsers\")) {\r\n      const taskTimerUsers = JSON.parse(localStorage.getItem(\"taskTimerUsers\"));\r\n\r\n      this.setState({\r\n        isAppLoaded: true,\r\n        users: taskTimerUsers,\r\n      });\r\n\r\n      // set state and export to local storage based on initial users object\r\n    } else {\r\n      //const { users } = this.state;\r\n      let users = {};\r\n\r\n      for (let user of initialUsers) {\r\n        const {finishedTasks, totalTaskTime, totalBreakTime} = user.stats;\r\n\r\n        // set date of profile creation\r\n        let [day, month, year, hr, min] = user.date;\r\n        const date = new Date(year, month, day, hr, min);\r\n        const userId = date.getTime();\r\n        // set stat displaying creation date\r\n        day = makeTwoDigits(day);\r\n        month = makeTwoDigits(month + 1);\r\n        hr = makeTwoDigits(hr);\r\n        min = makeTwoDigits(min);\r\n\r\n        const totalDays = getTotalDays(date);\r\n        const avgTasksPerDay = Math.round(finishedTasks / totalDays);\r\n        const avgTaskTime = getTimeArray(totalTaskTime / finishedTasks);\r\n        const avgBreakTime = getTimeArray(totalBreakTime / finishedTasks);\r\n        const [taskMin, taskSec] = avgTaskTime;\r\n        const [breakMin, breakSec] = avgBreakTime;\r\n        const formattedAvgTaskTime = `${taskMin} min ${taskSec} sec`;\r\n        const formattedAvgBreakTime = `${breakMin} min ${breakSec} sec`;\r\n\r\n        user.stats.avgTasksPerDay = avgTasksPerDay;\r\n        user.stats.avgBreakTime = formattedAvgBreakTime;\r\n        user.stats.avgTaskTime = formattedAvgTaskTime;\r\n        user.stats.dateCreated = `${day}-${month}-${year} ${hr}:${min}`;\r\n        user.createdAt = date;\r\n\r\n        users = {...users, [userId]: user};\r\n      }\r\n      this.setState({isAppLoaded: true, users});\r\n    }\r\n    this.exportUsers();\r\n  };\r\n\r\n  componentDidUpdate = () => {\r\n    this.exportUsers();\r\n  };\r\n\r\n  componentWillUnmount = () => {};\r\n\r\n  handleStateChange = (object) => this.setState(object);\r\n\r\n  exportUsers = () => {\r\n    const {users} = this.state;\r\n    localStorage.setItem(\"taskTimerUsers\", JSON.stringify(users));\r\n  };\r\n\r\n  handleUserLogin = (user, form) => {\r\n    const {users} = this.state;\r\n\r\n    const loggedUserId =\r\n      form === \"loginForm\"\r\n        ? Object.entries(users).find(([key, value]) => value === user)[0]\r\n        : new Date(user.createdAt).getTime();\r\n\r\n    this.setState((prevState) => ({\r\n      isUserPanelVisible: false,\r\n      isBoardVisible: true,\r\n      users:\r\n        form === \"loginForm\"\r\n          ? prevState.users\r\n          : {...prevState.users, [loggedUserId]: user},\r\n      loggedUserId,\r\n    }));\r\n  };\r\n\r\n  handleUserLogout = () => {\r\n    const {users, loggedUserId} = this.state;\r\n    const user = users[loggedUserId];\r\n    user.rememberMe = false;\r\n\r\n    this.setState((prevState) => ({\r\n      users: {...prevState.users},\r\n      loggedUserId: \"\",\r\n      isUserPanelVisible: true,\r\n      isBoardVisible: false,\r\n    }));\r\n  };\r\n\r\n  handleUserRemove = () => {\r\n    const {users, loggedUserId} = this.state;\r\n    delete users[loggedUserId];\r\n\r\n    this.setState((prevState) => ({\r\n      users: {...prevState.users},\r\n      isBoardVisible: false,\r\n      isUserPanelVisible: true,\r\n    }));\r\n  };\r\n\r\n  handleTaskRemove = (id) => {\r\n    const {users, loggedUserId} = this.state;\r\n    const user = users[loggedUserId];\r\n    user.tasks = user.tasks.filter((task) => task.id !== id);\r\n\r\n    this.setState((prevState) => ({\r\n      users: {...prevState.users},\r\n    }));\r\n  };\r\n\r\n  handleTaskOrder = (dragIndex, dropIndex) => {\r\n    const {users, loggedUserId} = this.state;\r\n    const user = users[loggedUserId];\r\n    const {tasks} = user;\r\n    const updatedTasks = [...tasks];\r\n    updatedTasks.splice(dragIndex, 1, tasks[dropIndex]);\r\n    updatedTasks.splice(dropIndex, 1, tasks[dragIndex]);\r\n    user.tasks = updatedTasks;\r\n\r\n    this.setState((prevState) => ({\r\n      users: {...prevState.users},\r\n    }));\r\n  };\r\n\r\n  handleUserUpdate = (value, prop) => {\r\n    const {users, loggedUserId} = this.state;\r\n    const user = users[loggedUserId];\r\n    user[prop] = value;\r\n\r\n    this.setState((prevState) => ({\r\n      users: {...prevState.users},\r\n    }));\r\n  };\r\n\r\n  handleTaskFinish = (results) => {\r\n    const {users, loggedUserId} = this.state;\r\n    const {elapsedTaskTime, elapsedBreakTime} = results;\r\n    const user = users[loggedUserId];\r\n\r\n    const {finishedTasks, totalTaskTime, totalBreakTime} = user.stats;\r\n\r\n    const totalDays = getTotalDays(user.createdAt);\r\n    const updatedFinishedTasks = finishedTasks + 1;\r\n    const updatedTotalTaskTime = totalTaskTime + elapsedTaskTime;\r\n    const updatedTotalBreakTime = totalBreakTime + elapsedBreakTime;\r\n    const avgTasksPerDay = Math.round(updatedFinishedTasks / totalDays);\r\n    const avgTaskTime = getTimeArray(\r\n      updatedTotalTaskTime / updatedFinishedTasks\r\n    );\r\n    const avgBreakTime = getTimeArray(\r\n      updatedTotalBreakTime / updatedFinishedTasks\r\n    );\r\n    const [taskMin, taskSec] = avgTaskTime;\r\n    const [breakMin, breakSec] = avgBreakTime;\r\n    const formattedAvgTaskTime = `${taskMin} min ${taskSec} sec`;\r\n    const formattedAvgBreakTime = `${breakMin} min ${breakSec} sec`;\r\n\r\n    user.stats.finishedTasks = updatedFinishedTasks;\r\n    user.stats.totalTaskTime = updatedTotalTaskTime;\r\n    user.stats.totalBreakTime = updatedTotalBreakTime;\r\n    user.stats.avgTaskTime = formattedAvgTaskTime;\r\n    user.stats.avgBreakTime = formattedAvgBreakTime;\r\n    user.stats.avgTasksPerDay = avgTasksPerDay;\r\n\r\n    this.setState((prevState) => ({\r\n      users: {...prevState.users},\r\n    }));\r\n  };\r\n\r\n  handleTaskEdit = (newTask, option) => {\r\n    const {users, loggedUserId} = this.state;\r\n    const user = users[loggedUserId];\r\n\r\n    if (option === \"edit\") {\r\n      const {id} = newTask;\r\n      const tasksIds = user.tasks.map((task) => task.id);\r\n      const editedIndex = tasksIds.indexOf(id);\r\n\r\n      user.tasks = [\r\n        ...user.tasks.filter(\r\n          (task, idx) => task.id !== id && idx < editedIndex\r\n        ),\r\n        newTask,\r\n        ...user.tasks.filter(\r\n          (task, idx) => task.id !== id && idx > editedIndex\r\n        ),\r\n      ];\r\n    } else if (option === \"add\") {\r\n      user.tasks = [...user.tasks, newTask];\r\n    }\r\n\r\n    this.setState((prevState) => ({\r\n      users: {...prevState.users},\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      isAppLoaded,\r\n      isIntroVisible,\r\n      isUserPanelVisible,\r\n      isBoardVisible,\r\n      users,\r\n      loggedUserId,\r\n    } = this.state;\r\n\r\n    return (\r\n      <React.StrictMode>\r\n        <div className=\"App\">\r\n          <h1 className=\"App__heading visuallyhidden\">Task Timer App</h1>\r\n          {\r\n            /* LOGO ANIMATION */\r\n            isIntroVisible ? (\r\n              <Intro\r\n                isIntroVisible={isIntroVisible}\r\n                onAppStateChange={this.handleStateChange}\r\n              />\r\n            ) : (\r\n              <div className=\"empty\"></div>\r\n            )\r\n          }\r\n          {\r\n            /* USER PANEL */\r\n            isUserPanelVisible && isAppLoaded && (\r\n              <UserPanel users={users} onUserLogin={this.handleUserLogin} />\r\n            )\r\n          }\r\n          {\r\n            /* BOARD */\r\n            isBoardVisible ? (\r\n              <Board\r\n                users={users}\r\n                loggedUserId={loggedUserId}\r\n                onUserUpdate={this.handleUserUpdate}\r\n                onUserLogout={this.handleUserLogout}\r\n                onUserRemove={this.handleUserRemove}\r\n                onTaskRemove={this.handleTaskRemove}\r\n                onTaskOrderChange={this.handleTaskOrder}\r\n                onTaskFinish={this.handleTaskFinish}\r\n                onTaskEdit={this.handleTaskEdit}\r\n              />\r\n            ) : (\r\n              <div className=\"empty\"></div>\r\n            )\r\n          }\r\n          <Logo />\r\n        </div>\r\n      </React.StrictMode>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();"],"sourceRoot":""}