{"version":3,"sources":["assets/svg/icons.svg","components/Task.js","components/Time.js","components/Controls.js","components/Display.js","components/Break.js","components/Percentage.js","components/ProgressBar.js","components/Progress.js","components/Timer.js","components/StopTask.js","components/TimeResult.js","components/Outro.js","components/Failure.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Task","handleNextView","e","props","taskNameValidity","onStateChange","keyPressed","key","isTaskVisible","isTimeVisible","isTaskNameChangeActive","alertFlag","this","compClassName","alertClassName","taskName","onTaskNameChange","className","onKeyDown","tabIndex","id","placeholder","onChange","target","value","htmlFor","onClick","viewBox","href","icons","Component","Time","taskTimePlanned","breakTimePlanned","onTaskTimePlannedChange","onBreakTimePlannedChange","isTimerActive","onStartButtonClick","maxLength","disabled","Controls","isTaskTimeActive","isBreakTimeActive","onDisplayModeChange","breaksTotal","incBreaksTotal","previousTime","Date","now","isStopTaskVisible","Display","taskTimeResult","taskTimeArray","join","Break","breakTimeElapsedArray","Percentage","percent","Math","round","ProgressBar","isElapsedMode","percentElapsed","percentRemaining","style","width","Progress","Timer","handleTaskTimeTick","state","taskTimeElapsed","taskTimeRemaining","taskTimeTotal","breakTimeElapsed","onTimeArrayChange","taskTimeElapsedResult","taskTimeTotalResult","taskTimeRemainingResult","overallTimeResult","isTimerVisible","taskTimeElapsedArray","taskTimeRemainingArray","isOutroVisible","overallTime","overallTimeArray","handleBreakTimeTick","breakTimeTotal","breakTimeElapsedResult","breakTimeTotalResult","isFailureVisible","taskIntervalId","setInterval","breakIntervalId","clearInterval","StopTask","isTaskNameValid","isTaskTimePlannedValid","isBreakTimePlannedValid","TimeResult","minutes","seconds","breakFlag","Outro","breakMinutes","breakSeconds","role","aria-label","parseInt","Failure","App","handleStateChange","object","setState","handleTaskName","name","length","handleTaskTimePlanned","time","handleTotalTime","handleTimeArray","test","handleBreakTimePlanned","totalTime","split","map","a","handleStartButton","handleDisplayMode","prevState","makeTwoDigits","number","floor","onKeyPress","handleKeyPress","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.871efda9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icons.92f0e3b1.svg\";","import React, { Component } from 'react';\r\nimport icons from '../assets/svg/icons.svg';\r\nimport '../scss/Task&Time.scss';\r\n\r\nclass Task extends Component {\r\n\r\n  handleNextView = (e) => {\r\n    const { taskNameValidity, onStateChange } = this.props;\r\n    const keyPressed = e.key || null;\r\n    \r\n    if (keyPressed === 'Enter' || keyPressed === null) {\r\n      if (taskNameValidity) {\r\n        onStateChange({\r\n          isTaskVisible: false,\r\n          isTimeVisible: true,\r\n          isTaskNameChangeActive: false,\r\n          alertFlag: false\r\n        })\r\n      } else {\r\n        onStateChange({ alertFlag: true })\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    const {\r\n      compClassName,\r\n      alertClassName,\r\n      taskName,\r\n      onStateChange,\r\n      onTaskNameChange\r\n    } = this.props;\r\n\r\n    return (\r\n      <section\r\n        className={`Task ${compClassName}`}\r\n        onKeyDown={(e) => this.handleNextView(e)}\r\n        tabIndex=\"0\"\r\n      >\r\n        {/* TASK HEADING */}\r\n        <h2 className=\"Task__heading\">Write your task</h2>\r\n        {/* TASK NAME INPUT */}\r\n        <input\r\n          className=\"Task__input Task__input--name\"\r\n          id=\"task-name\"\r\n          placeholder=\"What would be your next task?\"\r\n          onChange={(e) => {\r\n            onTaskNameChange(e.target.value);\r\n            onStateChange({ alertFlag: true })\r\n          }}\r\n          value={taskName}\r\n        />\r\n        {/* TASK NAME LABEL */}\r\n        <label className=\"Task__label Task__label--name visuallyhidden\" htmlFor=\"task-name\">\r\n          Your task\r\n        </label>\r\n        {/* RIGHT BUTTON */}\r\n        <button \r\n          className=\"button Task__button Task__button--right\"\r\n          onClick={this.handleNextView}\r\n        >\r\n          <svg className=\"Task__svg\" viewBox=\"0 0 512 512\">\r\n            <use href={`${icons}#arrow-right`} />\r\n          </svg>\r\n        </button>\r\n        {/* ALERT */}\r\n        <p className={`Task__alert ${alertClassName}`}>\r\n          You have to enter your task first!\r\n        </p>\r\n      </section>\r\n    );\r\n  }\r\n}\r\nexport default Task;","import React from 'react';\r\nimport icons from '../assets/svg/icons.svg';\r\nimport '../scss/Task&Time.scss';\r\n\r\nconst Time = (props) => {\r\n\r\n  const {\r\n    compClassName,\r\n    alertClassName,\r\n    onStateChange,\r\n    taskTimePlanned,\r\n    breakTimePlanned,\r\n    onTaskTimePlannedChange,\r\n    onBreakTimePlannedChange,\r\n    isTimerActive,\r\n    onStartButtonClick\r\n  } = props;\r\n\r\n  return (\r\n    <section className={`Time ${compClassName}`}>\r\n      <h2 className=\"Time__heading\">Estimate a time</h2>\r\n      {/* LEFT BUTTON */}\r\n      <button\r\n        className=\"Time__button Time__button--left\"\r\n        onClick={() => onStateChange({\r\n          isTaskVisible: true,\r\n          isTimeVisible: false,\r\n          isTaskNameChangeActive: true\r\n        })}\r\n      >\r\n        <svg className=\"Time__svg\" viewBox=\"0 0 512 512\">\r\n          <use href={`${icons}#arrow-left`} />\r\n        </svg>\r\n      </button>\r\n      {/* TASK TIME INPUT */}\r\n      <input\r\n        id=\"task-time\"\r\n        className=\"Time__input Time__input--task-time\"\r\n        placeholder=\"00m00s\"\r\n        maxLength=\"6\"\r\n        value={taskTimePlanned}\r\n        onChange={(e) => {\r\n          onTaskTimePlannedChange(e.target.value);\r\n          onStateChange({ alertFlag: true })\r\n        }}\r\n      />\r\n      {/* TASK TIME LABEL */}\r\n      <label className=\"Time__label Time__label--task-time\" htmlFor=\"task-time\">\r\n        Task time\r\n      </label>\r\n      {/* BREAK TIME INPUT */}\r\n      <input\r\n        id=\"break-time\"\r\n        className=\"Time__input Time__input--break-time\"\r\n        placeholder=\"00m00s\"\r\n        maxLength=\"6\"\r\n        value={breakTimePlanned}\r\n        onChange={(e) => {\r\n          onBreakTimePlannedChange(e.target.value);\r\n          onStateChange({ alertFlag: true })\r\n        }}\r\n      />\r\n      {/* BREAK TIME LABEL */}\r\n      <label className=\"Time__label Time__label--break-time\" htmlFor=\"break-time\">\r\n        Max break time\r\n      </label>\r\n      {/* START BUTTON */}\r\n      <button\r\n        className={`Time__start ${isTimerActive\r\n          ? \"Time__start--disabled\" : \"\"}`}\r\n        disabled = {isTimerActive}\r\n        onClick={() => onStartButtonClick()}\r\n      >\r\n        Start\r\n      </button>\r\n      {/* ALERT */}\r\n      <p className={`Time__alert ${alertClassName}`}>\r\n        Enter time in a correct format (00m00s)\r\n      </p>\r\n    </section>\r\n  );\r\n}\r\nexport default Time;","import React from 'react';\r\nimport icons from '../assets/svg/icons.svg';\r\nimport '../scss/Controls.scss';\r\n\r\nconst Controls = (props) => {\r\n  const {\r\n    isTaskTimeActive,\r\n    isBreakTimeActive,\r\n    onDisplayModeChange,\r\n    onStateChange,\r\n    breaksTotal\r\n  } = props;\r\n\r\n  const incBreaksTotal = isTaskTimeActive ? breaksTotal + 1 : breaksTotal;\r\n\r\n  return (\r\n    <div className=\"Controls\">\r\n      {/* PLAY / PAUSE BUTTON */}\r\n      <button\r\n        className=\"Controls__button Controls__button--playPause\"\r\n        onClick={(isTaskTimeActive || isBreakTimeActive)\r\n          ? () => onStateChange({\r\n          isTaskTimeActive: !isTaskTimeActive,\r\n          isBreakTimeActive: !isBreakTimeActive,\r\n          breaksTotal: incBreaksTotal,\r\n          previousTime: Date.now() })\r\n          : () => false }\r\n      >\r\n        <svg\r\n          className={`Controls__svg ${isTaskTimeActive\r\n            ? \"Controls__svg--hidden\" : \"\"}`}\r\n          viewBox=\"0 0 512 512\"\r\n        >\r\n          <use href={`${icons}#play`} />\r\n        </svg>\r\n        <svg\r\n          className={`Controls__svg ${isTaskTimeActive\r\n            ? \"\" : \"Controls__svg--hidden\"}`}\r\n          viewBox=\"0 0 512 512\"\r\n        >\r\n          <use href={`${icons}#pause`} />\r\n        </svg>\r\n      </button>\r\n\r\n      {/* STOP BUTTON */}\r\n      <button\r\n        className=\"Controls__button Controls__button--stop\"\r\n        onClick={(isTaskTimeActive || isBreakTimeActive)\r\n          ? () => onStateChange({ isStopTaskVisible: true })\r\n          : () => false }\r\n      >\r\n        <svg className=\"Controls__svg\" viewBox=\"0 0 512 512\">\r\n          <use href={`${icons}#stop`} />\r\n        </svg>\r\n      </button>\r\n\r\n      {/* TOGGLE BUTTON */}\r\n      <button\r\n        className=\"Controls__button Controls__button--toggle\"\r\n        onClick={() => onDisplayModeChange()}\r\n      >\r\n        <svg className=\"Controls__svg\" viewBox=\"0 0 512 512\">\r\n          <use href={`${icons}#toggle`} />\r\n        </svg>\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\nexport default Controls;","import React from 'react';\r\nimport '../scss/Display.scss';\r\n\r\nconst Display = (props) => {\r\n  const { compClassName, taskTimeArray } = props;\r\n  const taskTimeResult = taskTimeArray.join(':');\r\n\r\n  return (\r\n    <p className={compClassName}>\r\n      {taskTimeResult}\r\n    </p>\r\n  );\r\n}\r\nexport default Display;","import React from 'react';\r\nimport Display from './Display';\r\nimport '../scss/Break.scss';\r\n\r\nconst Break = (props) => {\r\n  const {\r\n    compClassName,\r\n    breaksTotal,\r\n    breakTimeElapsedArray\r\n  } = props;\r\n  \r\n  return (\r\n    <div className={compClassName}>\r\n      <h3 className=\"Break__counter\">\r\n        {`${breaksTotal} ${breaksTotal === 1\r\n        ? \"break\" : \"breaks\"}`}\r\n      </h3>\r\n      <Display\r\n        compClassName=\"Break__display\"\r\n        taskTimeArray={breakTimeElapsedArray}\r\n      />\r\n    </div>\r\n  );\r\n}\r\nexport default Break;","import React from 'react';\r\nimport '../scss/Percentage.scss';\r\n\r\nconst Percentage = (props) => {\r\n  const { compClassName, percent } = props;\r\n  return (\r\n    <p className={compClassName}>\r\n      {`${Math.round(percent)}%`}\r\n    </p>\r\n  );\r\n}\r\nexport default Percentage;","import React from 'react';\r\nimport '../scss/ProgressBar.scss';\r\n\r\nconst ProgressBar = (props) => {\r\n  const { isElapsedMode, percentElapsed, percentRemaining } = props;\r\n  return (\r\n    <div className=\"ProgressBar\">\r\n      <div\r\n        className=\"ProgressBar__part ProgressBar__part--loading\"\r\n        style={{width: `${isElapsedMode\r\n          ? percentElapsed\r\n          : percentRemaining}%`}}\r\n      ></div>\r\n      <div\r\n        className=\"ProgressBar__part ProgressBar__part--unloading\"\r\n        style={{width: `${isElapsedMode\r\n          ? percentRemaining\r\n          : percentElapsed}%`}}\r\n      ></div>\r\n    </div>\r\n  );\r\n}\r\nexport default ProgressBar;","import React from 'react';\r\nimport Percentage from './Percentage';\r\nimport ProgressBar from './ProgressBar';\r\nimport '../scss/Progress.scss';\r\n\r\nconst Progress = (props) => {\r\n  const { isElapsedMode, percentElapsed, percentRemaining } = props;\r\n  \r\n  return (\r\n    <section className=\"Progress\">\r\n      <header className=\"Progress__header\">\r\n        <Percentage\r\n          compClassName={`Percentage ${isElapsedMode\r\n          ? \"Percentage--visible\" : \"\"}`}\r\n          percent={percentElapsed}\r\n        />\r\n        <Percentage\r\n          compClassName={`Percentage ${isElapsedMode\r\n          ? \"\" : \"Percentage--visible\"}`}\r\n          percent={percentRemaining}\r\n        />\r\n      </header>\r\n      <ProgressBar\r\n        percentElapsed={percentElapsed}\r\n        percentRemaining={percentRemaining}\r\n        isElapsedMode={isElapsedMode}\r\n      />\r\n    </section>\r\n  );\r\n}\r\nexport default Progress;","import React, {Component} from 'react';\r\nimport Controls from './Controls';\r\nimport Display from './Display';\r\nimport Break from './Break';\r\nimport Progress from './Progress';\r\nimport '../scss/Timer.scss';\r\n\r\nclass Timer extends Component {\r\n\r\n  componentDidMount() {\r\n    this.taskIntervalId = setInterval(() => this.handleTaskTimeTick(), 10);\r\n    this.breakIntervalId = setInterval(() => this.handleBreakTimeTick(), 10);\r\n  }\r\n  \r\n  componentWillUnmount() {\r\n    clearInterval(this.taskIntervalId);\r\n    clearInterval(this.breakIntervalId);\r\n  }\r\n\r\n  handleTaskTimeTick = () => {\r\n    const {\r\n      isTaskTimeActive,\r\n      taskTimeElapsed,\r\n      taskTimeRemaining,\r\n      previousTime,\r\n      taskTimeTotal,\r\n      breakTimeElapsed\r\n    } = this.props.state;\r\n\r\n    if (isTaskTimeActive) {\r\n      const { onTimeArrayChange, onStateChange } = this.props;\r\n      const now = Date.now();\r\n      const taskTimeElapsedResult = onTimeArrayChange(taskTimeElapsed);\r\n      const taskTimeTotalResult = onTimeArrayChange(taskTimeTotal);\r\n      const taskTimeRemainingResult = onTimeArrayChange(taskTimeRemaining);\r\n      const overallTimeResult = onTimeArrayChange(taskTimeElapsed + breakTimeElapsed);\r\n      const percentElapsed = taskTimeElapsed / taskTimeTotal * 100;\r\n      const percentRemaining = taskTimeRemaining / taskTimeTotal * 100;\r\n\r\n      // when task time finishes\r\n      if (taskTimeElapsed >= taskTimeTotal) {\r\n        onStateChange({\r\n          isStopTaskVisible: false,\r\n          isTimerVisible: false,\r\n          isTaskTimeActive: false,\r\n          taskTimeElapsed: taskTimeTotal,\r\n          taskTimeRemaining: 0,\r\n          taskTimeElapsedArray: taskTimeTotalResult,\r\n          taskTimeRemainingArray: ['00','00','00'],\r\n          percentElapsed: 100,\r\n          percentRemaining: 0,\r\n          isOutroVisible: true,\r\n          overallTime: taskTimeElapsed + breakTimeElapsed,\r\n          overallTimeArray: overallTimeResult\r\n        });\r\n      // normal task time tick\r\n      } else {\r\n        onStateChange({\r\n          previousTime: now,\r\n          taskTimeElapsed: taskTimeElapsed + (now - previousTime),\r\n          taskTimeElapsedArray: taskTimeElapsedResult,\r\n          taskTimeRemaining: taskTimeTotal - taskTimeElapsed,\r\n          taskTimeRemainingArray: taskTimeRemainingResult,\r\n          percentElapsed: percentElapsed,\r\n          percentRemaining: percentRemaining\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  handleBreakTimeTick = () => {\r\n    const {\r\n      taskTimeElapsed,\r\n      isBreakTimeActive,\r\n      breakTimeElapsed,\r\n      breakTimeTotal,\r\n      previousTime\r\n    } = this.props.state;\r\n    \r\n    if (isBreakTimeActive) {\r\n      const { onStateChange, onTimeArrayChange } = this.props;\r\n      const now = Date.now();\r\n      const breakTimeElapsedResult = onTimeArrayChange(breakTimeElapsed);\r\n      const breakTimeTotalResult = onTimeArrayChange(breakTimeTotal);\r\n\r\n      // when break time finishes\r\n      if (breakTimeElapsed >= breakTimeTotal) {\r\n        onStateChange({\r\n          isBreakTimeActive: false,\r\n          isTimerVisible: false,\r\n          isFailureVisible: true,\r\n          overallTime: taskTimeElapsed + breakTimeElapsed,\r\n          breakTimeElapsed: breakTimeTotal,\r\n          breakTimeElapsedArray: breakTimeTotalResult\r\n        })\r\n      } else {\r\n        // normal break time tick\r\n        onStateChange({\r\n          breakTimeElapsed: breakTimeElapsed + (now - previousTime),\r\n          breakTimeElapsedArray: breakTimeElapsedResult,\r\n          previousTime: now\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      taskName,\r\n      isTaskTimeActive,\r\n      isBreakTimeActive,\r\n      isElapsedMode,\r\n      breaksTotal,\r\n      taskTimeElapsedArray,\r\n      taskTimeRemainingArray,\r\n      breakTimeElapsedArray,\r\n      percentElapsed,\r\n      percentRemaining\r\n    } = this.props.state;\r\n\r\n    const {\r\n      compClassName,\r\n      onDisplayModeChange,\r\n      onStateChange\r\n    } = this.props;\r\n\r\n    return (\r\n      <section className={`Timer ${compClassName}`}>\r\n        <div className=\"Timer__container\">\r\n          <h2 className=\"Timer__heading\">{`\"${taskName}\"`}</h2>\r\n          {/* CONTROL BUTTONS */}\r\n          <Controls\r\n            isTaskTimeActive={isTaskTimeActive}\r\n            isBreakTimeActive={isBreakTimeActive}\r\n            breaksTotal={breaksTotal}\r\n            onDisplayModeChange={onDisplayModeChange}\r\n            onStateChange={onStateChange}\r\n          />\r\n          {/* TIMER DISPLAY */}\r\n          <div className={`Timer__display ${isTaskTimeActive\r\n          ? \"\" : \"Timer__display--inactive\"}`}>\r\n            <Display\r\n              compClassName={isElapsedMode\r\n                ? \"Display Display--visible Display--showUp\"\r\n                : \"Display Display--hideUp\"}\r\n              taskTimeArray={taskTimeElapsedArray}\r\n            />\r\n            <Display\r\n              compClassName={isElapsedMode\r\n                ? \"Display Display--hideUp\"\r\n                : \"Display Display--visible Display--showUp\"}\r\n              taskTimeArray={taskTimeRemainingArray}\r\n            />\r\n          </div>\r\n          {/* BREAK */}\r\n          <Break\r\n            compClassName={`Break ${isBreakTimeActive\r\n            ? \"Break--active\" : \"\"}`}\r\n            breaksTotal={breaksTotal}\r\n            breakTimeElapsedArray={breakTimeElapsedArray}\r\n          />\r\n          {/* PROGRESS */}\r\n          <Progress\r\n            isElapsedMode={isElapsedMode}\r\n            percentElapsed={percentElapsed}\r\n            percentRemaining={percentRemaining}\r\n          />\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\nexport default Timer;","import React from 'react';\r\nimport '../scss/StopTask.scss';\r\n\r\nconst StopTask = (props) => {\r\n  const { compClassName, onStateChange } = props;\r\n\r\n  return (\r\n    <section className={compClassName}>\r\n      <div className=\"StopTask__container\">\r\n        <h2 className=\"StopTask__heading\">\r\n          Are you sure you want to quit?\r\n        </h2>\r\n        <button\r\n          className=\"StopTask__button StopTask__button--stop\"\r\n          onClick={() => onStateChange({\r\n            isTaskVisible: true,\r\n            isStopTaskVisible: false,\r\n            isTimerVisible: false,\r\n            isTaskTimeActive: false,\r\n            isBreakTimeActive: false,\r\n            taskName: \"\",\r\n            isTaskNameValid: false,\r\n            taskTimePlanned: \"\",\r\n            isTaskTimePlannedValid: false,\r\n            breakTimePlanned: \"\",\r\n            isBreakTimePlannedValid: false\r\n          })}\r\n        >\r\n          Yes\r\n        </button>\r\n        <button\r\n          className=\"StopTask__button StopTask__button--cancel\"\r\n          onClick={() => onStateChange({\r\n            isStopTaskVisible: false\r\n          })}\r\n        >\r\n          Cancel\r\n        </button>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\nexport default StopTask;","import React from 'react';\r\nimport '../scss/TimeResult.scss';\r\n\r\nconst TimeResult = (props) => {\r\n  const {minutes, seconds, breakTimeElapsed, breakFlag} = props;\r\n\r\n  return (\r\n    <span className=\"TimeResult\">\r\n      <span>\r\n        { minutes > 1\r\n          ? ` ${minutes} minutes` : minutes === 1\r\n          ? ` ${minutes} minute` : \"\"}\r\n      </span>\r\n\r\n      {minutes > 0 && (breakFlag ? breakTimeElapsed !== 0 : seconds !== 0)\r\n      ? \"and\" : \"\"}\r\n\r\n      <span>\r\n        { seconds > 1\r\n          ? ` ${seconds} seconds` : seconds === 1\r\n          ? ` ${seconds} second` : breakFlag && breakTimeElapsed !== 0\r\n          ? \" a split second\" : \"\"}\r\n      </span>\r\n    </span>\r\n  );\r\n}\r\nexport default TimeResult;","import React from 'react';\r\nimport TimeResult from './TimeResult';\r\nimport icons from '../assets/svg/icons.svg';\r\nimport '../scss/Outro&Failure.scss';\r\n\r\nconst Outro = (props) => {\r\n  const {\r\n    taskName,\r\n    breaksTotal,\r\n    breakTimeElapsed,\r\n    breakTimeElapsedArray,\r\n    overallTime,\r\n    overallTimeArray\r\n  } = props.state;\r\n\r\n  const { compClassName, onStateChange } = props;\r\n\r\n  const [minutes, seconds] = overallTimeArray;\r\n  const [breakMinutes, breakSeconds] = breakTimeElapsedArray;\r\n\r\n  return (\r\n    <section className={compClassName}>\r\n      <div className=\"Outro__container\">\r\n        <h2 className=\"Outro__heading\">\r\n          Congratulations!\r\n          <span\r\n            className=\"Outro__emoji\"\r\n            role=\"img\"\r\n            aria-label=\"party\"\r\n          > 🎉</span>\r\n        </h2>\r\n        <p className=\"Outro__message\">\r\n          You have finished your task entitled <br />\r\n          <span className=\"TimeResult\">\r\n            {`\"${taskName}\"`}\r\n          </span><br />\r\n          in\r\n          <TimeResult\r\n            minutes={parseInt(minutes)}\r\n            seconds={parseInt(seconds)}\r\n            breakTimeElapsed={breakTimeElapsed}\r\n          />\r\n          {`${breakTimeElapsed > 0 ? \" including break time.\" : \".\"}`}\r\n          <br />\r\n          You had\r\n          <span className=\"TimeResult\">\r\n            {`\r\n            ${breaksTotal > 1\r\n            ? `${breaksTotal} breaks`\r\n            : breaksTotal === 1 ? `${breaksTotal} break` : \"no brakes\"}\r\n            `}\r\n          </span>\r\n          during this task\r\n          <TimeResult\r\n            minutes={parseInt(breakMinutes)}\r\n            seconds={parseInt(breakSeconds)}\r\n            breakTimeElapsed={breakTimeElapsed}\r\n            breakFlag={true}\r\n          />\r\n          {breaksTotal ? \" long, what makes it around\" : \"\"}\r\n          <span className=\"TimeResult\">\r\n            { breaksTotal\r\n              ? ` ${Math.round(breakTimeElapsed / overallTime * 100)}%`\r\n              : \"\"}\r\n          </span>\r\n          {breaksTotal ? \" of all time.\" : \".\"}\r\n        </p>\r\n        <button\r\n          className=\"Outro__retry\"\r\n          onClick={() => onStateChange({\r\n            isOutroVisible: false,\r\n            isTaskVisible: true,\r\n            taskName: \"\",\r\n            isTaskNameValid: false,\r\n            taskTimePlanned: \"\",\r\n            isTaskTimePlannedValid: false,\r\n            breakTimePlanned: \"\",\r\n            isBreakTimePlannedValid: false\r\n          })}\r\n        >\r\n          <svg className=\"Outro__svg\" viewBox=\"0 0 512 512\">\r\n            <use href={`${icons}#retry`}/>\r\n          </svg>\r\n        </button>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\nexport default Outro;","import React from 'react';\r\nimport TimeResult from './TimeResult';\r\nimport icons from '../assets/svg/icons.svg';\r\nimport '../scss/Outro&Failure.scss';\r\n\r\nconst Failure = (props) => {\r\n  const { compClassName, onStateChange, state } = props;\r\n\r\n  const {\r\n    breaksTotal,\r\n    breakTimeElapsed,\r\n    breakTimeElapsedArray,\r\n    overallTime\r\n  } = state;\r\n  \r\n  const [breakMinutes, breakSeconds] = breakTimeElapsedArray;\r\n\r\n  return (\r\n    <section className={compClassName}>\r\n      <div className=\"Failure__container\">\r\n        <h2 className=\"Failure__heading\">\r\n          Too long break!\r\n          <span\r\n            className=\"Failure__emoji\"\r\n            role=\"img\"\r\n            aria-label=\"fail\"\r\n          > 😮</span>\r\n        </h2>\r\n        <p className=\"Failure__message\">\r\n          It seems you exceeded the limit of break time! <br />\r\n\r\n          You had\r\n          <span className=\"TimeResult\">\r\n            {`\r\n            ${breaksTotal > 1\r\n            ? `${breaksTotal} breaks`\r\n            : breaksTotal === 1 ? `${breaksTotal} break` : \"no brakes\"}\r\n            `}\r\n          </span>\r\n          during this task\r\n          <TimeResult\r\n            minutes={parseInt(breakMinutes)}\r\n            seconds={parseInt(breakSeconds)}\r\n            breakTimeElapsed={breakTimeElapsed}\r\n            breakFlag={true}\r\n          />\r\n          {breaksTotal ? \" long, what makes it around\" : \"\"}\r\n          <span className=\"TimeResult\">\r\n            { breaksTotal\r\n              ? ` ${Math.round(breakTimeElapsed / overallTime * 100)}%`\r\n              : \"\"}\r\n          </span>\r\n          {breaksTotal ? \" of all time.\" : \".\"} <br />\r\n          But don't give up, try again!\r\n        </p>\r\n        <button\r\n          className=\"Failure__retry\"\r\n          onClick={() => onStateChange({\r\n            isFailureVisible: false,\r\n            isTaskVisible: true,\r\n            taskName: \"\",\r\n            isTaskNameValid: false,\r\n            taskTimePlanned: \"\",\r\n            isTaskTimePlannedValid: false,\r\n            breakTimePlanned: \"\",\r\n            isBreakTimePlannedValid: false\r\n          })}\r\n        >\r\n          <svg className=\"Failure__svg\" viewBox=\"0 0 512 512\">\r\n            <use href={`${icons}#retry`}/>\r\n          </svg>\r\n        </button>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\nexport default Failure;","import React, {Component} from 'react';\nimport Task from './Task.js';\nimport Time from './Time.js';\nimport Timer from './Timer.js';\nimport StopTask from './StopTask.js';\nimport Outro from './Outro.js';\nimport Failure from './Failure.js';\nimport '../scss/App.scss';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // visibility\n      isTaskVisible: true,\n      isTimeVisible: false,\n      isTimerVisible: false,\n      isStopTaskVisible: false,\n      isOutroVisible: false,\n      isFailureVisible: false,\n      isElapsedMode: true,\n      isTaskNameChangeActive: false,\n      alertFlag: false,\n      // task\n      taskName: \"\",\n      isTaskNameValid: false,\n      taskTimePlanned: \"\",\n      isTaskTimePlannedValid: false,\n      taskTimeTotal: 0,\n      taskTimeElapsed: 0,\n      taskTimeElapsedArray: ['00','00','00'],\n      taskTimeRemaining: 0,\n      taskTimeRemainingArray: ['00','00','00'],\n      isTaskTimeActive: false,\n      //break\n      isBreakTimePlannedValid: true,\n      isBreakTimeActive: false,\n      breaksTotal: 0,\n      breakTimePlanned: \"\",\n      breakTimeTotal: 0,\n      breakTimeElapsed: 0,\n      breakTimeElapsedArray: ['00','00','00'],\n      //timer\n      previousTime: 0,\n      percentElapsed: 0,\n      percentRemaining: 100,\n      overallTime: 0,\n      overallTimeArray: ['00','00','00']\n    }\n  }\n\n  handleStateChange = (object) => this.setState(object);\n\n  handleTaskName = (name) => {\n    this.setState({\n      taskName: name,\n      isTaskNameValid: name.length > 0 ? true : false \n    });\n  }\n\n  handleTaskTimePlanned = (time) => {\n    const taskTimeTotal = this.handleTotalTime(time);\n    const taskTimeRemainingArray = this.handleTimeArray(taskTimeTotal);\n\n    this.setState({\n      taskTimePlanned: time,\n      isTaskTimePlannedValid:\n        /(\\d?\\d[Mm])?(\\d?\\d[Ss])/.test(time) && taskTimeTotal > 0,\n      taskTimeTotal: taskTimeTotal,\n      taskTimeRemaining: taskTimeTotal,\n      taskTimeRemainingArray: taskTimeRemainingArray\n    })\n  }\n  \n  handleBreakTimePlanned = (time) => {\n    const breakTimeTotal = this.handleTotalTime(time);\n    \n    this.setState({\n      breakTimePlanned: time,\n      isBreakTimePlannedValid:\n      /(\\d?\\d[Mm])?(\\d?\\d[Ss])/.test(time) && breakTimeTotal > 0,\n      breakTimeTotal: breakTimeTotal\n    })\n  }\n\n  handleTotalTime = (time) => {\n    let totalTime = time.split(/[mM]/).map(a => parseInt(a) || 0);\n    // if time format 00m is acceptable\n    totalTime = totalTime.length > 1 ? totalTime : [0, ...totalTime];\n    const [minutes, seconds] = totalTime;\n    return minutes * 60000 + seconds * 1000;\n  }\n\n  handleStartButton = () => {\n    const { isTaskTimePlannedValid, isBreakTimePlannedValid } = this.state;\n    const breakTimeElapsedResult = this.handleTimeArray(0);\n\n    if (isTaskTimePlannedValid && isBreakTimePlannedValid) {\n      this.setState({\n        isTimeVisible: false,\n        isTimerVisible: true,\n        isTaskTimeActive: true,\n        previousTime: Date.now(),\n        taskTimeElapsed: 0,\n        breaksTotal: 0,\n        breakTimeElapsed: 0,\n        breakTimeElapsedArray: breakTimeElapsedResult,\n        alertFlag: false\n      });\n    } else {\n      this.setState({ alertFlag: true });\n    }\n  }\n\n  handleDisplayMode = () => this.setState(prevState => ({\n    isElapsedMode: !prevState.isElapsedMode\n  }));\n\n  handleTimeArray = (time) => {\n    const makeTwoDigits = (number) => number < 10 ? `0${number}` : number;\n    return [\n      makeTwoDigits(Math.floor(time / 60000)),\n      makeTwoDigits(Math.floor(time / 1000 % 60)),\n      makeTwoDigits(Math.floor(time / 10 % 100))\n    ]\n  }\n\n  render() {\n    const {\n      isTaskVisible,\n      isTimeVisible,\n      isTimerVisible,\n      isStopTaskVisible,\n      isOutroVisible,\n      isFailureVisible,\n      alertFlag,\n      taskName,\n      isTaskNameChangeActive,\n      isTaskNameValid,\n      taskTimePlanned,\n      breakTimePlanned,\n      isTaskTimePlannedValid,\n      isBreakTimePlannedValid,\n      isTaskTimeActive\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1 className=\"App__heading visuallyhidden\">Task Timer App</h1>\n        {/* TASK SECTION */}\n        <Task\n          compClassName={isTaskVisible\n            ? `Task--visible ${isTaskNameChangeActive\n              ? \"slideInLeft\" : \"slideInRight\"}`\n            : \"slideOutLeft\"}\n          alertClassName={alertFlag && !isTaskNameValid\n            ? \"Task__alert--visible\" : \"\"}\n          onStateChange={this.handleStateChange}\n          onTaskNameChange={this.handleTaskName}\n          taskNameValidity={isTaskNameValid}\n          taskName={taskName}\n          onKeyPress={this.handleKeyPress}\n        />\n        {/* TIME SECTION */}\n        <Time\n          compClassName={isTimeVisible\n            ? \"Time--visible slideInRight\" : isTimerVisible\n            ? \"slideOutLeft\" : \"slideOutRight\"}\n          alertClassName={(alertFlag && !isTaskTimePlannedValid)\n            || (alertFlag && !isBreakTimePlannedValid)\n            ? \"Time__alert--visible\" : \"\"}\n          onTaskTimePlannedChange={this.handleTaskTimePlanned}\n          onBreakTimePlannedChange={this.handleBreakTimePlanned}\n          onStateChange={this.handleStateChange}\n          onStartButtonClick={this.handleStartButton}\n          isTimerActive={isTaskTimeActive}\n          taskTimePlanned={taskTimePlanned}\n          breakTimePlanned={breakTimePlanned}\n        />\n        {/* TIMER SECTION */}\n        <Timer\n          compClassName={isTimerVisible\n            ? \"Timer--visible slideInRight\" : \"slideOutLeft\"}\n          onStateChange={this.handleStateChange}\n          onDisplayModeChange={this.handleDisplayMode}\n          onTimeArrayChange={this.handleTimeArray}\n          state={this.state}\n        />\n        {/* STOP TASK SECTION */}\n        <StopTask\n          compClassName={`StopTask ${isStopTaskVisible\n          ? \"StopTask--visible\" : \"\"}`}\n          onStateChange={this.handleStateChange}\n        />\n        {/* OUTRO SECTION */}\n        <Outro\n          compClassName={`Outro ${isOutroVisible\n          ? \"Outro--visible slideInRight\"\n          : \"slideOutLeft\"}`}\n          state={this.state}\n          onStateChange={this.handleStateChange}\n        />\n        {/* BREAK TIME EXCEEDED */}\n        <Failure\n          compClassName={`Failure ${isFailureVisible\n          ? \"Failure--visible slideInRight\"\n          : \"slideOutLeft\"}`}\n          state={this.state}\n          onStateChange={this.handleStateChange}\n        />\n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();"],"sourceRoot":""}